pub const GLenum = c_uint;
pub const GLboolean = u8;
pub const GLbitfield = c_uint;
pub const GLvoid = c_void;
pub const GLbyte = i8;
pub const GLshort = c_short;
pub const GLint = c_int;
pub const GLubyte = u8;
pub const GLushort = c_ushort;
pub const GLuint = c_uint;
pub const GLsizei = c_int;
pub const GLfloat = f32;
pub const GLclampf = f32;
pub const GLdouble = f64;
pub const GLclampd = f64;
pub extern fn glClearIndex(c: GLfloat) void;
pub extern fn glClearColor(red: GLclampf, green: GLclampf, blue: GLclampf, alpha: GLclampf) void;
pub extern fn glClear(mask: GLbitfield) void;
pub extern fn glIndexMask(mask: GLuint) void;
pub extern fn glColorMask(red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean) void;
pub extern fn glAlphaFunc(func: GLenum, ref: GLclampf) void;
pub extern fn glBlendFunc(sfactor: GLenum, dfactor: GLenum) void;
pub extern fn glLogicOp(opcode: GLenum) void;
pub extern fn glCullFace(mode: GLenum) void;
pub extern fn glFrontFace(mode: GLenum) void;
pub extern fn glPointSize(size: GLfloat) void;
pub extern fn glLineWidth(width: GLfloat) void;
pub extern fn glLineStipple(factor: GLint, pattern: GLushort) void;
pub extern fn glPolygonMode(face: GLenum, mode: GLenum) void;
pub extern fn glPolygonOffset(factor: GLfloat, units: GLfloat) void;
pub extern fn glPolygonStipple(mask: [*c]const GLubyte) void;
pub extern fn glGetPolygonStipple(mask: [*c]GLubyte) void;
pub extern fn glEdgeFlag(flag: GLboolean) void;
pub extern fn glEdgeFlagv(flag: [*c]const GLboolean) void;
pub extern fn glScissor(x: GLint, y: GLint, width: GLsizei, height: GLsizei) void;
pub extern fn glClipPlane(plane: GLenum, equation: [*c]const GLdouble) void;
pub extern fn glGetClipPlane(plane: GLenum, equation: [*c]GLdouble) void;
pub extern fn glDrawBuffer(mode: GLenum) void;
pub extern fn glReadBuffer(mode: GLenum) void;
pub extern fn glEnable(cap: GLenum) void;
pub extern fn glDisable(cap: GLenum) void;
pub extern fn glIsEnabled(cap: GLenum) GLboolean;
pub extern fn glEnableClientState(cap: GLenum) void;
pub extern fn glDisableClientState(cap: GLenum) void;
pub extern fn glGetBooleanv(pname: GLenum, params: [*c]GLboolean) void;
pub extern fn glGetDoublev(pname: GLenum, params: [*c]GLdouble) void;
pub extern fn glGetFloatv(pname: GLenum, params: [*c]GLfloat) void;
pub extern fn glGetIntegerv(pname: GLenum, params: [*c]GLint) void;
pub extern fn glPushAttrib(mask: GLbitfield) void;
pub extern fn glPopAttrib() void;
pub extern fn glPushClientAttrib(mask: GLbitfield) void;
pub extern fn glPopClientAttrib() void;
pub extern fn glRenderMode(mode: GLenum) GLint;
pub extern fn glGetError() GLenum;
pub extern fn glGetString(name: GLenum* [*c]const GLubyte;
pub extern fn glFinish() void;
pub extern fn glFlush() void;
pub extern fn glHint(target: GLenum, mode: GLenum) void;
pub extern fn glClearDepth(depth: GLclampd) void;
pub extern fn glDepthFunc(func: GLenum) void;
pub extern fn glDepthMask(flag: GLboolean) void;
pub extern fn glDepthRange(near_val: GLclampd, far_val: GLclampd) void;
pub extern fn glClearAccum(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) void;
pub extern fn glAccum(op: GLenum, value: GLfloat) void;
pub extern fn glMatrixMode(mode: GLenum) void;
pub extern fn glOrtho(left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, near_val: GLdouble, far_val: GLdouble) void;
pub extern fn glFrustum(left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, near_val: GLdouble, far_val: GLdouble) void;
pub extern fn glViewport(x: GLint, y: GLint, width: GLsizei, height: GLsizei) void;
pub extern fn glPushMatrix() void;
pub extern fn glPopMatrix() void;
pub extern fn glLoadIdentity() void;
pub extern fn glLoadMatrixd(m: [*c]const GLdouble) void;
pub extern fn glLoadMatrixf(m: [*c]const GLfloat) void;
pub extern fn glMultMatrixd(m: [*c]const GLdouble) void;
pub extern fn glMultMatrixf(m: [*c]const GLfloat) void;
pub extern fn glRotated(angle: GLdouble, x: GLdouble, y: GLdouble, z: GLdouble) void;
pub extern fn glRotatef(angle: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) void;
pub extern fn glScaled(x: GLdouble, y: GLdouble, z: GLdouble) void;
pub extern fn glScalef(x: GLfloat, y: GLfloat, z: GLfloat) void;
pub extern fn glTranslated(x: GLdouble, y: GLdouble, z: GLdouble) void;
pub extern fn glTranslatef(x: GLfloat, y: GLfloat, z: GLfloat) void;
pub extern fn glIsList(list: GLuint) GLboolean;
pub extern fn glDeleteLists(list: GLuint, range: GLsizei) void;
pub extern fn glGenLists(range: GLsizei) GLuint;
pub extern fn glNewList(list: GLuint, mode: GLenum) void;
pub extern fn glEndList() void;
pub extern fn glCallList(list: GLuint) void;
pub extern fn glCallLists(n: GLsizei, type_0: GLenum, lists: ?*const GLvoid) void;
pub extern fn glListBase(base: GLuint) void;
pub extern fn glBegin(mode: GLenum) void;
pub extern fn glEnd() void;
pub extern fn glVertex2d(x: GLdouble, y: GLdouble) void;
pub extern fn glVertex2f(x: GLfloat, y: GLfloat) void;
pub extern fn glVertex2i(x: GLint, y: GLint) void;
pub extern fn glVertex2s(x: GLshort, y: GLshort) void;
pub extern fn glVertex3d(x: GLdouble, y: GLdouble, z: GLdouble) void;
pub extern fn glVertex3f(x: GLfloat, y: GLfloat, z: GLfloat) void;
pub extern fn glVertex3i(x: GLint, y: GLint, z: GLint) void;
pub extern fn glVertex3s(x: GLshort, y: GLshort, z: GLshort) void;
pub extern fn glVertex4d(x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) void;
pub extern fn glVertex4f(x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) void;
pub extern fn glVertex4i(x: GLint, y: GLint, z: GLint, w: GLint) void;
pub extern fn glVertex4s(x: GLshort, y: GLshort, z: GLshort, w: GLshort) void;
pub extern fn glVertex2dv(v: [*c]const GLdouble) void;
pub extern fn glVertex2fv(v: [*c]const GLfloat) void;
pub extern fn glVertex2iv(v: [*c]const GLint) void;
pub extern fn glVertex2sv(v: [*c]const GLshort) void;
pub extern fn glVertex3dv(v: [*c]const GLdouble) void;
pub extern fn glVertex3fv(v: [*c]const GLfloat) void;
pub extern fn glVertex3iv(v: [*c]const GLint) void;
pub extern fn glVertex3sv(v: [*c]const GLshort) void;
pub extern fn glVertex4dv(v: [*c]const GLdouble) void;
pub extern fn glVertex4fv(v: [*c]const GLfloat) void;
pub extern fn glVertex4iv(v: [*c]const GLint) void;
pub extern fn glVertex4sv(v: [*c]const GLshort) void;
pub extern fn glNormal3b(nx: GLbyte, ny: GLbyte, nz: GLbyte) void;
pub extern fn glNormal3d(nx: GLdouble, ny: GLdouble, nz: GLdouble) void;
pub extern fn glNormal3f(nx: GLfloat, ny: GLfloat, nz: GLfloat) void;
pub extern fn glNormal3i(nx: GLint, ny: GLint, nz: GLint) void;
pub extern fn glNormal3s(nx: GLshort, ny: GLshort, nz: GLshort) void;
pub extern fn glNormal3bv(v: [*c]const GLbyte) void;
pub extern fn glNormal3dv(v: [*c]const GLdouble) void;
pub extern fn glNormal3fv(v: [*c]const GLfloat) void;
pub extern fn glNormal3iv(v: [*c]const GLint) void;
pub extern fn glNormal3sv(v: [*c]const GLshort) void;
pub extern fn glIndexd(c: GLdouble) void;
pub extern fn glIndexf(c: GLfloat) void;
pub extern fn glIndexi(c: GLint) void;
pub extern fn glIndexs(c: GLshort) void;
pub extern fn glIndexub(c: GLubyte) void;
pub extern fn glIndexdv(c: [*c]const GLdouble) void;
pub extern fn glIndexfv(c: [*c]const GLfloat) void;
pub extern fn glIndexiv(c: [*c]const GLint) void;
pub extern fn glIndexsv(c: [*c]const GLshort) void;
pub extern fn glIndexubv(c: [*c]const GLubyte) void;
pub extern fn glColor3b(red: GLbyte, green: GLbyte, blue: GLbyte) void;
pub extern fn glColor3d(red: GLdouble, green: GLdouble, blue: GLdouble) void;
pub extern fn glColor3f(red: GLfloat, green: GLfloat, blue: GLfloat) void;
pub extern fn glColor3i(red: GLint, green: GLint, blue: GLint) void;
pub extern fn glColor3s(red: GLshort, green: GLshort, blue: GLshort) void;
pub extern fn glColor3ub(red: GLubyte, green: GLubyte, blue: GLubyte) void;
pub extern fn glColor3ui(red: GLuint, green: GLuint, blue: GLuint) void;
pub extern fn glColor3us(red: GLushort, green: GLushort, blue: GLushort) void;
pub extern fn glColor4b(red: GLbyte, green: GLbyte, blue: GLbyte, alpha: GLbyte) void;
pub extern fn glColor4d(red: GLdouble, green: GLdouble, blue: GLdouble, alpha: GLdouble) void;
pub extern fn glColor4f(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) void;
pub extern fn glColor4i(red: GLint, green: GLint, blue: GLint, alpha: GLint) void;
pub extern fn glColor4s(red: GLshort, green: GLshort, blue: GLshort, alpha: GLshort) void;
pub extern fn glColor4ub(red: GLubyte, green: GLubyte, blue: GLubyte, alpha: GLubyte) void;
pub extern fn glColor4ui(red: GLuint, green: GLuint, blue: GLuint, alpha: GLuint) void;
pub extern fn glColor4us(red: GLushort, green: GLushort, blue: GLushort, alpha: GLushort) void;
pub extern fn glColor3bv(v: [*c]const GLbyte) void;
pub extern fn glColor3dv(v: [*c]const GLdouble) void;
pub extern fn glColor3fv(v: [*c]const GLfloat) void;
pub extern fn glColor3iv(v: [*c]const GLint) void;
pub extern fn glColor3sv(v: [*c]const GLshort) void;
pub extern fn glColor3ubv(v: [*c]const GLubyte) void;
pub extern fn glColor3uiv(v: [*c]const GLuint) void;
pub extern fn glColor3usv(v: [*c]const GLushort) void;
pub extern fn glColor4bv(v: [*c]const GLbyte) void;
pub extern fn glColor4dv(v: [*c]const GLdouble) void;
pub extern fn glColor4fv(v: [*c]const GLfloat) void;
pub extern fn glColor4iv(v: [*c]const GLint) void;
pub extern fn glColor4sv(v: [*c]const GLshort) void;
pub extern fn glColor4ubv(v: [*c]const GLubyte) void;
pub extern fn glColor4uiv(v: [*c]const GLuint) void;
pub extern fn glColor4usv(v: [*c]const GLushort) void;
pub extern fn glTexCoord1d(s: GLdouble) void;
pub extern fn glTexCoord1f(s: GLfloat) void;
pub extern fn glTexCoord1i(s: GLint) void;
pub extern fn glTexCoord1s(s: GLshort) void;
pub extern fn glTexCoord2d(s: GLdouble, t: GLdouble) void;
pub extern fn glTexCoord2f(s: GLfloat, t: GLfloat) void;
pub extern fn glTexCoord2i(s: GLint, t: GLint) void;
pub extern fn glTexCoord2s(s: GLshort, t: GLshort) void;
pub extern fn glTexCoord3d(s: GLdouble, t: GLdouble, r: GLdouble) void;
pub extern fn glTexCoord3f(s: GLfloat, t: GLfloat, r: GLfloat) void;
pub extern fn glTexCoord3i(s: GLint, t: GLint, r: GLint) void;
pub extern fn glTexCoord3s(s: GLshort, t: GLshort, r: GLshort) void;
pub extern fn glTexCoord4d(s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) void;
pub extern fn glTexCoord4f(s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) void;
pub extern fn glTexCoord4i(s: GLint, t: GLint, r: GLint, q: GLint) void;
pub extern fn glTexCoord4s(s: GLshort, t: GLshort, r: GLshort, q: GLshort) void;
pub extern fn glTexCoord1dv(v: [*c]const GLdouble) void;
pub extern fn glTexCoord1fv(v: [*c]const GLfloat) void;
pub extern fn glTexCoord1iv(v: [*c]const GLint) void;
pub extern fn glTexCoord1sv(v: [*c]const GLshort) void;
pub extern fn glTexCoord2dv(v: [*c]const GLdouble) void;
pub extern fn glTexCoord2fv(v: [*c]const GLfloat) void;
pub extern fn glTexCoord2iv(v: [*c]const GLint) void;
pub extern fn glTexCoord2sv(v: [*c]const GLshort) void;
pub extern fn glTexCoord3dv(v: [*c]const GLdouble) void;
pub extern fn glTexCoord3fv(v: [*c]const GLfloat) void;
pub extern fn glTexCoord3iv(v: [*c]const GLint) void;
pub extern fn glTexCoord3sv(v: [*c]const GLshort) void;
pub extern fn glTexCoord4dv(v: [*c]const GLdouble) void;
pub extern fn glTexCoord4fv(v: [*c]const GLfloat) void;
pub extern fn glTexCoord4iv(v: [*c]const GLint) void;
pub extern fn glTexCoord4sv(v: [*c]const GLshort) void;
pub extern fn glRasterPos2d(x: GLdouble, y: GLdouble) void;
pub extern fn glRasterPos2f(x: GLfloat, y: GLfloat) void;
pub extern fn glRasterPos2i(x: GLint, y: GLint) void;
pub extern fn glRasterPos2s(x: GLshort, y: GLshort) void;
pub extern fn glRasterPos3d(x: GLdouble, y: GLdouble, z: GLdouble) void;
pub extern fn glRasterPos3f(x: GLfloat, y: GLfloat, z: GLfloat) void;
pub extern fn glRasterPos3i(x: GLint, y: GLint, z: GLint) void;
pub extern fn glRasterPos3s(x: GLshort, y: GLshort, z: GLshort) void;
pub extern fn glRasterPos4d(x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) void;
pub extern fn glRasterPos4f(x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) void;
pub extern fn glRasterPos4i(x: GLint, y: GLint, z: GLint, w: GLint) void;
pub extern fn glRasterPos4s(x: GLshort, y: GLshort, z: GLshort, w: GLshort) void;
pub extern fn glRasterPos2dv(v: [*c]const GLdouble) void;
pub extern fn glRasterPos2fv(v: [*c]const GLfloat) void;
pub extern fn glRasterPos2iv(v: [*c]const GLint) void;
pub extern fn glRasterPos2sv(v: [*c]const GLshort) void;
pub extern fn glRasterPos3dv(v: [*c]const GLdouble) void;
pub extern fn glRasterPos3fv(v: [*c]const GLfloat) void;
pub extern fn glRasterPos3iv(v: [*c]const GLint) void;
pub extern fn glRasterPos3sv(v: [*c]const GLshort) void;
pub extern fn glRasterPos4dv(v: [*c]const GLdouble) void;
pub extern fn glRasterPos4fv(v: [*c]const GLfloat) void;
pub extern fn glRasterPos4iv(v: [*c]const GLint) void;
pub extern fn glRasterPos4sv(v: [*c]const GLshort) void;
pub extern fn glRectd(x1: GLdouble, y1: GLdouble, x2: GLdouble, y2: GLdouble) void;
pub extern fn glRectf(x1: GLfloat, y1: GLfloat, x2: GLfloat, y2: GLfloat) void;
pub extern fn glRecti(x1: GLint, y1: GLint, x2: GLint, y2: GLint) void;
pub extern fn glRects(x1: GLshort, y1: GLshort, x2: GLshort, y2: GLshort) void;
pub extern fn glRectdv(v1: [*c]const GLdouble, v2: [*c]const GLdouble) void;
pub extern fn glRectfv(v1: [*c]const GLfloat, v2: [*c]const GLfloat) void;
pub extern fn glRectiv(v1: [*c]const GLint, v2: [*c]const GLint) void;
pub extern fn glRectsv(v1: [*c]const GLshort, v2: [*c]const GLshort) void;
pub extern fn glVertexPointer(size: GLint, type_0: GLenum, stride: GLsizei, ptr: ?*const GLvoid) void;
pub extern fn glNormalPointer(type_0: GLenum, stride: GLsizei, ptr: ?*const GLvoid) void;
pub extern fn glColorPointer(size: GLint, type_0: GLenum, stride: GLsizei, ptr: ?*const GLvoid) void;
pub extern fn glIndexPointer(type_0: GLenum, stride: GLsizei, ptr: ?*const GLvoid) void;
pub extern fn glTexCoordPointer(size: GLint, type_0: GLenum, stride: GLsizei, ptr: ?*const GLvoid) void;
pub extern fn glEdgeFlagPointer(stride: GLsizei, ptr: ?*const GLvoid) void;
pub extern fn glGetPointerv(pname: GLenum, params: [*c](?*GLvoid)) void;
pub extern fn glArrayElement(i: GLint) void;
pub extern fn glDrawArrays(mode: GLenum, first: GLint, count: GLsizei) void;
pub extern fn glDrawElements(mode: GLenum, count: GLsizei, type_0: GLenum, indices: ?*const GLvoid) void;
pub extern fn glInterleavedArrays(format: GLenum, stride: GLsizei, pointer: ?*const GLvoid) void;
pub extern fn glShadeModel(mode: GLenum) void;
pub extern fn glLightf(light: GLenum, pname: GLenum, param: GLfloat) void;
pub extern fn glLighti(light: GLenum, pname: GLenum, param: GLint) void;
pub extern fn glLightfv(light: GLenum, pname: GLenum, params: [*c]const GLfloat) void;
pub extern fn glLightiv(light: GLenum, pname: GLenum, params: [*c]const GLint) void;
pub extern fn glGetLightfv(light: GLenum, pname: GLenum, params: [*c]GLfloat) void;
pub extern fn glGetLightiv(light: GLenum, pname: GLenum, params: [*c]GLint) void;
pub extern fn glLightModelf(pname: GLenum, param: GLfloat) void;
pub extern fn glLightModeli(pname: GLenum, param: GLint) void;
pub extern fn glLightModelfv(pname: GLenum, params: [*c]const GLfloat) void;
pub extern fn glLightModeliv(pname: GLenum, params: [*c]const GLint) void;
pub extern fn glMaterialf(face: GLenum, pname: GLenum, param: GLfloat) void;
pub extern fn glMateriali(face: GLenum, pname: GLenum, param: GLint) void;
pub extern fn glMaterialfv(face: GLenum, pname: GLenum, params: [*c]const GLfloat) void;
pub extern fn glMaterialiv(face: GLenum, pname: GLenum, params: [*c]const GLint) void;
pub extern fn glGetMaterialfv(face: GLenum, pname: GLenum, params: [*c]GLfloat) void;
pub extern fn glGetMaterialiv(face: GLenum, pname: GLenum, params: [*c]GLint) void;
pub extern fn glColorMaterial(face: GLenum, mode: GLenum) void;
pub extern fn glPixelZoom(xfactor: GLfloat, yfactor: GLfloat) void;
pub extern fn glPixelStoref(pname: GLenum, param: GLfloat) void;
pub extern fn glPixelStorei(pname: GLenum, param: GLint) void;
pub extern fn glPixelTransferf(pname: GLenum, param: GLfloat) void;
pub extern fn glPixelTransferi(pname: GLenum, param: GLint) void;
pub extern fn glPixelMapfv(map: GLenum, mapsize: GLsizei, values: [*c]const GLfloat) void;
pub extern fn glPixelMapuiv(map: GLenum, mapsize: GLsizei, values: [*c]const GLuint) void;
pub extern fn glPixelMapusv(map: GLenum, mapsize: GLsizei, values: [*c]const GLushort) void;
pub extern fn glGetPixelMapfv(map: GLenum, values: [*c]GLfloat) void;
pub extern fn glGetPixelMapuiv(map: GLenum, values: [*c]GLuint) void;
pub extern fn glGetPixelMapusv(map: GLenum, values: [*c]GLushort) void;
pub extern fn glBitmap(width: GLsizei, height: GLsizei, xorig: GLfloat, yorig: GLfloat, xmove: GLfloat, ymove: GLfloat, bitmap: [*c]const GLubyte) void;
pub extern fn glReadPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_0: GLenum, pixels: ?*GLvoid) void;
pub extern fn glDrawPixels(width: GLsizei, height: GLsizei, format: GLenum, type_0: GLenum, pixels: ?*const GLvoid) void;
pub extern fn glCopyPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, type_0: GLenum) void;
pub extern fn glStencilFunc(func: GLenum, ref: GLint, mask: GLuint) void;
pub extern fn glStencilMask(mask: GLuint) void;
pub extern fn glStencilOp(fail: GLenum, zfail: GLenum, zpass: GLenum) void;
pub extern fn glClearStencil(s: GLint) void;
pub extern fn glTexGend(coord: GLenum, pname: GLenum, param: GLdouble) void;
pub extern fn glTexGenf(coord: GLenum, pname: GLenum, param: GLfloat) void;
pub extern fn glTexGeni(coord: GLenum, pname: GLenum, param: GLint) void;
pub extern fn glTexGendv(coord: GLenum, pname: GLenum, params: [*c]const GLdouble) void;
pub extern fn glTexGenfv(coord: GLenum, pname: GLenum, params: [*c]const GLfloat) void;
pub extern fn glTexGeniv(coord: GLenum, pname: GLenum, params: [*c]const GLint) void;
pub extern fn glGetTexGendv(coord: GLenum, pname: GLenum, params: [*c]GLdouble) void;
pub extern fn glGetTexGenfv(coord: GLenum, pname: GLenum, params: [*c]GLfloat) void;
pub extern fn glGetTexGeniv(coord: GLenum, pname: GLenum, params: [*c]GLint) void;
pub extern fn glTexEnvf(target: GLenum, pname: GLenum, param: GLfloat) void;
pub extern fn glTexEnvi(target: GLenum, pname: GLenum, param: GLint) void;
pub extern fn glTexEnvfv(target: GLenum, pname: GLenum, params: [*c]const GLfloat) void;
pub extern fn glTexEnviv(target: GLenum, pname: GLenum, params: [*c]const GLint) void;
pub extern fn glGetTexEnvfv(target: GLenum, pname: GLenum, params: [*c]GLfloat) void;
pub extern fn glGetTexEnviv(target: GLenum, pname: GLenum, params: [*c]GLint) void;
pub extern fn glTexParameterf(target: GLenum, pname: GLenum, param: GLfloat) void;
pub extern fn glTexParameteri(target: GLenum, pname: GLenum, param: GLint) void;
pub extern fn glTexParameterfv(target: GLenum, pname: GLenum, params: [*c]const GLfloat) void;
pub extern fn glTexParameteriv(target: GLenum, pname: GLenum, params: [*c]const GLint) void;
pub extern fn glGetTexParameterfv(target: GLenum, pname: GLenum, params: [*c]GLfloat) void;
pub extern fn glGetTexParameteriv(target: GLenum, pname: GLenum, params: [*c]GLint) void;
pub extern fn glGetTexLevelParameterfv(target: GLenum, level: GLint, pname: GLenum, params: [*c]GLfloat) void;
pub extern fn glGetTexLevelParameteriv(target: GLenum, level: GLint, pname: GLenum, params: [*c]GLint) void;
pub extern fn glTexImage1D(target: GLenum, level: GLint, internalFormat: GLint, width: GLsizei, border: GLint, format: GLenum, type_0: GLenum, pixels: ?*const GLvoid) void;
pub extern fn glTexImage2D(target: GLenum, level: GLint, internalFormat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type_0: GLenum, pixels: ?*const GLvoid) void;
pub extern fn glGetTexImage(target: GLenum, level: GLint, format: GLenum, type_0: GLenum, pixels: ?*GLvoid) void;
pub extern fn glGenTextures(n: GLsizei, textures: [*c]GLuint) void;
pub extern fn glDeleteTextures(n: GLsizei, textures: [*c]const GLuint) void;
pub extern fn glBindTexture(target: GLenum, texture: GLuint) void;
pub extern fn glPrioritizeTextures(n: GLsizei, textures: [*c]const GLuint, priorities: [*c]const GLclampf) void;
pub extern fn glAreTexturesResident(n: GLsizei, textures: [*c]const GLuint, residences: [*c]GLboolean) GLboolean;
pub extern fn glIsTexture(texture: GLuint) GLboolean;
pub extern fn glTexSubImage1D(target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type_0: GLenum, pixels: ?*const GLvoid) void;
pub extern fn glTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_0: GLenum, pixels: ?*const GLvoid) void;
pub extern fn glCopyTexImage1D(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) void;
pub extern fn glCopyTexImage2D(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) void;
pub extern fn glCopyTexSubImage1D(target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) void;
pub extern fn glCopyTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) void;
pub extern fn glMap1d(target: GLenum, u1_0: GLdouble, u2_0: GLdouble, stride: GLint, order: GLint, points: [*c]const GLdouble) void;
pub extern fn glMap1f(target: GLenum, u1_0: GLfloat, u2_0: GLfloat, stride: GLint, order: GLint, points: [*c]const GLfloat) void;
pub extern fn glMap2d(target: GLenum, u1_0: GLdouble, u2_0: GLdouble, ustride: GLint, uorder: GLint, v1: GLdouble, v2: GLdouble, vstride: GLint, vorder: GLint, points: [*c]const GLdouble) void;
pub extern fn glMap2f(target: GLenum, u1_0: GLfloat, u2_0: GLfloat, ustride: GLint, uorder: GLint, v1: GLfloat, v2: GLfloat, vstride: GLint, vorder: GLint, points: [*c]const GLfloat) void;
pub extern fn glGetMapdv(target: GLenum, query: GLenum, v: [*c]GLdouble) void;
pub extern fn glGetMapfv(target: GLenum, query: GLenum, v: [*c]GLfloat) void;
pub extern fn glGetMapiv(target: GLenum, query: GLenum, v: [*c]GLint) void;
pub extern fn glEvalCoord1d(u: GLdouble) void;
pub extern fn glEvalCoord1f(u: GLfloat) void;
pub extern fn glEvalCoord1dv(u: [*c]const GLdouble) void;
pub extern fn glEvalCoord1fv(u: [*c]const GLfloat) void;
pub extern fn glEvalCoord2d(u: GLdouble, v: GLdouble) void;
pub extern fn glEvalCoord2f(u: GLfloat, v: GLfloat) void;
pub extern fn glEvalCoord2dv(u: [*c]const GLdouble) void;
pub extern fn glEvalCoord2fv(u: [*c]const GLfloat) void;
pub extern fn glMapGrid1d(un: GLint, u1_0: GLdouble, u2_0: GLdouble) void;
pub extern fn glMapGrid1f(un: GLint, u1_0: GLfloat, u2_0: GLfloat) void;
pub extern fn glMapGrid2d(un: GLint, u1_0: GLdouble, u2_0: GLdouble, vn: GLint, v1: GLdouble, v2: GLdouble) void;
pub extern fn glMapGrid2f(un: GLint, u1_0: GLfloat, u2_0: GLfloat, vn: GLint, v1: GLfloat, v2: GLfloat) void;
pub extern fn glEvalPoint1(i: GLint) void;
pub extern fn glEvalPoint2(i: GLint, j: GLint) void;
pub extern fn glEvalMesh1(mode: GLenum, i1_0: GLint, i2_0: GLint) void;
pub extern fn glEvalMesh2(mode: GLenum, i1_0: GLint, i2_0: GLint, j1: GLint, j2: GLint) void;
pub extern fn glFogf(pname: GLenum, param: GLfloat) void;
pub extern fn glFogi(pname: GLenum, param: GLint) void;
pub extern fn glFogfv(pname: GLenum, params: [*c]const GLfloat) void;
pub extern fn glFogiv(pname: GLenum, params: [*c]const GLint) void;
pub extern fn glFeedbackBuffer(size: GLsizei, type_0: GLenum, buffer: [*c]GLfloat) void;
pub extern fn glPassThrough(token: GLfloat) void;
pub extern fn glSelectBuffer(size: GLsizei, buffer: [*c]GLuint) void;
pub extern fn glInitNames() void;
pub extern fn glLoadName(name: GLuint) void;
pub extern fn glPushName(name: GLuint) void;
pub extern fn glPopName() void;
pub extern fn glDrawRangeElements(mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type_0: GLenum, indices: ?*const GLvoid) void;
pub extern fn glTexImage3D(target: GLenum, level: GLint, internalFormat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type_0: GLenum, pixels: ?*const GLvoid) void;
pub extern fn glTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type_0: GLenum, pixels: ?*const GLvoid) void;
pub extern fn glCopyTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) void;
pub const PFNGLDRAWRANGEELEMENTSPROC = ?extern fn (GLenum, GLuint, GLuint, GLsizei, GLenum, ?*const GLvoid) void;
pub const PFNGLTEXIMAGE3DPROC = ?extern fn (GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const GLvoid) void;
pub const PFNGLTEXSUBIMAGE3DPROC = ?extern fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const GLvoid) void;
pub const PFNGLCOPYTEXSUBIMAGE3DPROC = ?extern fn (GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) void;
pub extern fn glColorTable(target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, type_0: GLenum, table: ?*const GLvoid) void;
pub extern fn glColorSubTable(target: GLenum, start: GLsizei, count: GLsizei, format: GLenum, type_0: GLenum, data: ?*const GLvoid) void;
pub extern fn glColorTableParameteriv(target: GLenum, pname: GLenum, params: [*c]const GLint) void;
pub extern fn glColorTableParameterfv(target: GLenum, pname: GLenum, params: [*c]const GLfloat) void;
pub extern fn glCopyColorSubTable(target: GLenum, start: GLsizei, x: GLint, y: GLint, width: GLsizei) void;
pub extern fn glCopyColorTable(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei) void;
pub extern fn glGetColorTable(target: GLenum, format: GLenum, type_0: GLenum, table: ?*GLvoid) void;
pub extern fn glGetColorTableParameterfv(target: GLenum, pname: GLenum, params: [*c]GLfloat) void;
pub extern fn glGetColorTableParameteriv(target: GLenum, pname: GLenum, params: [*c]GLint) void;
pub extern fn glBlendEquation(mode: GLenum) void;
pub extern fn glBlendColor(red: GLclampf, green: GLclampf, blue: GLclampf, alpha: GLclampf) void;
pub extern fn glHistogram(target: GLenum, width: GLsizei, internalformat: GLenum, sink: GLboolean) void;
pub extern fn glResetHistogram(target: GLenum) void;
pub extern fn glGetHistogram(target: GLenum, reset: GLboolean, format: GLenum, type_0: GLenum, values: ?*GLvoid) void;
pub extern fn glGetHistogramParameterfv(target: GLenum, pname: GLenum, params: [*c]GLfloat) void;
pub extern fn glGetHistogramParameteriv(target: GLenum, pname: GLenum, params: [*c]GLint) void;
pub extern fn glMinmax(target: GLenum, internalformat: GLenum, sink: GLboolean) void;
pub extern fn glResetMinmax(target: GLenum) void;
pub extern fn glGetMinmax(target: GLenum, reset: GLboolean, format: GLenum, types: GLenum, values: ?*GLvoid) void;
pub extern fn glGetMinmaxParameterfv(target: GLenum, pname: GLenum, params: [*c]GLfloat) void;
pub extern fn glGetMinmaxParameteriv(target: GLenum, pname: GLenum, params: [*c]GLint) void;
pub extern fn glConvolutionFilter1D(target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, type_0: GLenum, image: ?*const GLvoid) void;
pub extern fn glConvolutionFilter2D(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, type_0: GLenum, image: ?*const GLvoid) void;
pub extern fn glConvolutionParameterf(target: GLenum, pname: GLenum, params: GLfloat) void;
pub extern fn glConvolutionParameterfv(target: GLenum, pname: GLenum, params: [*c]const GLfloat) void;
pub extern fn glConvolutionParameteri(target: GLenum, pname: GLenum, params: GLint) void;
pub extern fn glConvolutionParameteriv(target: GLenum, pname: GLenum, params: [*c]const GLint) void;
pub extern fn glCopyConvolutionFilter1D(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei) void;
pub extern fn glCopyConvolutionFilter2D(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) void;
pub extern fn glGetConvolutionFilter(target: GLenum, format: GLenum, type_0: GLenum, image: ?*GLvoid) void;
pub extern fn glGetConvolutionParameterfv(target: GLenum, pname: GLenum, params: [*c]GLfloat) void;
pub extern fn glGetConvolutionParameteriv(target: GLenum, pname: GLenum, params: [*c]GLint) void;
pub extern fn glSeparableFilter2D(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, type_0: GLenum, row: ?*const GLvoid, column: ?*const GLvoid) void;
pub extern fn glGetSeparableFilter(target: GLenum, format: GLenum, type_0: GLenum, row: ?*GLvoid, column: ?*GLvoid, span: ?*GLvoid) void;
pub extern fn glActiveTexture(texture: GLenum) void;
pub extern fn glClientActiveTexture(texture: GLenum) void;
pub extern fn glCompressedTexImage1D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, data: ?*const GLvoid) void;
pub extern fn glCompressedTexImage2D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: ?*const GLvoid) void;
pub extern fn glCompressedTexImage3D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: ?*const GLvoid) void;
pub extern fn glCompressedTexSubImage1D(target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: ?*const GLvoid) void;
pub extern fn glCompressedTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: ?*const GLvoid) void;
pub extern fn glCompressedTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: ?*const GLvoid) void;
pub extern fn glGetCompressedTexImage(target: GLenum, lod: GLint, img: ?*GLvoid) void;
pub extern fn glMultiTexCoord1d(target: GLenum, s: GLdouble) void;
pub extern fn glMultiTexCoord1dv(target: GLenum, v: [*c]const GLdouble) void;
pub extern fn glMultiTexCoord1f(target: GLenum, s: GLfloat) void;
pub extern fn glMultiTexCoord1fv(target: GLenum, v: [*c]const GLfloat) void;
pub extern fn glMultiTexCoord1i(target: GLenum, s: GLint) void;
pub extern fn glMultiTexCoord1iv(target: GLenum, v: [*c]const GLint) void;
pub extern fn glMultiTexCoord1s(target: GLenum, s: GLshort) void;
pub extern fn glMultiTexCoord1sv(target: GLenum, v: [*c]const GLshort) void;
pub extern fn glMultiTexCoord2d(target: GLenum, s: GLdouble, t: GLdouble) void;
pub extern fn glMultiTexCoord2dv(target: GLenum, v: [*c]const GLdouble) void;
pub extern fn glMultiTexCoord2f(target: GLenum, s: GLfloat, t: GLfloat) void;
pub extern fn glMultiTexCoord2fv(target: GLenum, v: [*c]const GLfloat) void;
pub extern fn glMultiTexCoord2i(target: GLenum, s: GLint, t: GLint) void;
pub extern fn glMultiTexCoord2iv(target: GLenum, v: [*c]const GLint) void;
pub extern fn glMultiTexCoord2s(target: GLenum, s: GLshort, t: GLshort) void;
pub extern fn glMultiTexCoord2sv(target: GLenum, v: [*c]const GLshort) void;
pub extern fn glMultiTexCoord3d(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble) void;
pub extern fn glMultiTexCoord3dv(target: GLenum, v: [*c]const GLdouble) void;
pub extern fn glMultiTexCoord3f(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat) void;
pub extern fn glMultiTexCoord3fv(target: GLenum, v: [*c]const GLfloat) void;
pub extern fn glMultiTexCoord3i(target: GLenum, s: GLint, t: GLint, r: GLint) void;
pub extern fn glMultiTexCoord3iv(target: GLenum, v: [*c]const GLint) void;
pub extern fn glMultiTexCoord3s(target: GLenum, s: GLshort, t: GLshort, r: GLshort) void;
pub extern fn glMultiTexCoord3sv(target: GLenum, v: [*c]const GLshort) void;
pub extern fn glMultiTexCoord4d(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) void;
pub extern fn glMultiTexCoord4dv(target: GLenum, v: [*c]const GLdouble) void;
pub extern fn glMultiTexCoord4f(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) void;
pub extern fn glMultiTexCoord4fv(target: GLenum, v: [*c]const GLfloat) void;
pub extern fn glMultiTexCoord4i(target: GLenum, s: GLint, t: GLint, r: GLint, q: GLint) void;
pub extern fn glMultiTexCoord4iv(target: GLenum, v: [*c]const GLint) void;
pub extern fn glMultiTexCoord4s(target: GLenum, s: GLshort, t: GLshort, r: GLshort, q: GLshort) void;
pub extern fn glMultiTexCoord4sv(target: GLenum, v: [*c]const GLshort) void;
pub extern fn glLoadTransposeMatrixd(m: [*c]const GLdouble) void;
pub extern fn glLoadTransposeMatrixf(m: [*c]const GLfloat) void;
pub extern fn glMultTransposeMatrixd(m: [*c]const GLdouble) void;
pub extern fn glMultTransposeMatrixf(m: [*c]const GLfloat) void;
pub extern fn glSampleCoverage(value: GLclampf, invert: GLboolean) void;
pub const PFNGLACTIVETEXTUREPROC = ?extern fn (GLenum) void;
pub const PFNGLSAMPLECOVERAGEPROC = ?extern fn (GLclampf, GLboolean) void;
pub const PFNGLCOMPRESSEDTEXIMAGE3DPROC = ?extern fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, ?*const GLvoid) void;
pub const PFNGLCOMPRESSEDTEXIMAGE2DPROC = ?extern fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, ?*const GLvoid) void;
pub const PFNGLCOMPRESSEDTEXIMAGE1DPROC = ?extern fn (GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, ?*const GLvoid) void;
pub const PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC = ?extern fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, ?*const GLvoid) void;
pub const PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC = ?extern fn (GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, ?*const GLvoid) void;
pub const PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC = ?extern fn (GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, ?*const GLvoid) void;
pub const PFNGLGETCOMPRESSEDTEXIMAGEPROC = ?extern fn (GLenum, GLint, ?*GLvoid) void;
pub extern fn glActiveTextureARB(texture: GLenum) void;
pub extern fn glClientActiveTextureARB(texture: GLenum) void;
pub extern fn glMultiTexCoord1dARB(target: GLenum, s: GLdouble) void;
pub extern fn glMultiTexCoord1dvARB(target: GLenum, v: [*c]const GLdouble) void;
pub extern fn glMultiTexCoord1fARB(target: GLenum, s: GLfloat) void;
pub extern fn glMultiTexCoord1fvARB(target: GLenum, v: [*c]const GLfloat) void;
pub extern fn glMultiTexCoord1iARB(target: GLenum, s: GLint) void;
pub extern fn glMultiTexCoord1ivARB(target: GLenum, v: [*c]const GLint) void;
pub extern fn glMultiTexCoord1sARB(target: GLenum, s: GLshort) void;
pub extern fn glMultiTexCoord1svARB(target: GLenum, v: [*c]const GLshort) void;
pub extern fn glMultiTexCoord2dARB(target: GLenum, s: GLdouble, t: GLdouble) void;
pub extern fn glMultiTexCoord2dvARB(target: GLenum, v: [*c]const GLdouble) void;
pub extern fn glMultiTexCoord2fARB(target: GLenum, s: GLfloat, t: GLfloat) void;
pub extern fn glMultiTexCoord2fvARB(target: GLenum, v: [*c]const GLfloat) void;
pub extern fn glMultiTexCoord2iARB(target: GLenum, s: GLint, t: GLint) void;
pub extern fn glMultiTexCoord2ivARB(target: GLenum, v: [*c]const GLint) void;
pub extern fn glMultiTexCoord2sARB(target: GLenum, s: GLshort, t: GLshort) void;
pub extern fn glMultiTexCoord2svARB(target: GLenum, v: [*c]const GLshort) void;
pub extern fn glMultiTexCoord3dARB(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble) void;
pub extern fn glMultiTexCoord3dvARB(target: GLenum, v: [*c]const GLdouble) void;
pub extern fn glMultiTexCoord3fARB(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat) void;
pub extern fn glMultiTexCoord3fvARB(target: GLenum, v: [*c]const GLfloat) void;
pub extern fn glMultiTexCoord3iARB(target: GLenum, s: GLint, t: GLint, r: GLint) void;
pub extern fn glMultiTexCoord3ivARB(target: GLenum, v: [*c]const GLint) void;
pub extern fn glMultiTexCoord3sARB(target: GLenum, s: GLshort, t: GLshort, r: GLshort) void;
pub extern fn glMultiTexCoord3svARB(target: GLenum, v: [*c]const GLshort) void;
pub extern fn glMultiTexCoord4dARB(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) void;
pub extern fn glMultiTexCoord4dvARB(target: GLenum, v: [*c]const GLdouble) void;
pub extern fn glMultiTexCoord4fARB(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) void;
pub extern fn glMultiTexCoord4fvARB(target: GLenum, v: [*c]const GLfloat) void;
pub extern fn glMultiTexCoord4iARB(target: GLenum, s: GLint, t: GLint, r: GLint, q: GLint) void;
pub extern fn glMultiTexCoord4ivARB(target: GLenum, v: [*c]const GLint) void;
pub extern fn glMultiTexCoord4sARB(target: GLenum, s: GLshort, t: GLshort, r: GLshort, q: GLshort) void;
pub extern fn glMultiTexCoord4svARB(target: GLenum, v: [*c]const GLshort) void;
pub const PFNGLACTIVETEXTUREARBPROC = ?extern fn (GLenum) void;
pub const PFNGLCLIENTACTIVETEXTUREARBPROC = ?extern fn (GLenum) void;
pub const PFNGLMULTITEXCOORD1DARBPROC = ?extern fn (GLenum, GLdouble) void;
pub const PFNGLMULTITEXCOORD1DVARBPROC = ?extern fn (GLenum, [*c]const GLdouble) void;
pub const PFNGLMULTITEXCOORD1FARBPROC = ?extern fn (GLenum, GLfloat) void;
pub const PFNGLMULTITEXCOORD1FVARBPROC = ?extern fn (GLenum, [*c]const GLfloat) void;
pub const PFNGLMULTITEXCOORD1IARBPROC = ?extern fn (GLenum, GLint) void;
pub const PFNGLMULTITEXCOORD1IVARBPROC = ?extern fn (GLenum, [*c]const GLint) void;
pub const PFNGLMULTITEXCOORD1SARBPROC = ?extern fn (GLenum, GLshort) void;
pub const PFNGLMULTITEXCOORD1SVARBPROC = ?extern fn (GLenum, [*c]const GLshort) void;
pub const PFNGLMULTITEXCOORD2DARBPROC = ?extern fn (GLenum, GLdouble, GLdouble) void;
pub const PFNGLMULTITEXCOORD2DVARBPROC = ?extern fn (GLenum, [*c]const GLdouble) void;
pub const PFNGLMULTITEXCOORD2FARBPROC = ?extern fn (GLenum, GLfloat, GLfloat) void;
pub const PFNGLMULTITEXCOORD2FVARBPROC = ?extern fn (GLenum, [*c]const GLfloat) void;
pub const PFNGLMULTITEXCOORD2IARBPROC = ?extern fn (GLenum, GLint, GLint) void;
pub const PFNGLMULTITEXCOORD2IVARBPROC = ?extern fn (GLenum, [*c]const GLint) void;
pub const PFNGLMULTITEXCOORD2SARBPROC = ?extern fn (GLenum, GLshort, GLshort) void;
pub const PFNGLMULTITEXCOORD2SVARBPROC = ?extern fn (GLenum, [*c]const GLshort) void;
pub const PFNGLMULTITEXCOORD3DARBPROC = ?extern fn (GLenum, GLdouble, GLdouble, GLdouble) void;
pub const PFNGLMULTITEXCOORD3DVARBPROC = ?extern fn (GLenum, [*c]const GLdouble) void;
pub const PFNGLMULTITEXCOORD3FARBPROC = ?extern fn (GLenum, GLfloat, GLfloat, GLfloat) void;
pub const PFNGLMULTITEXCOORD3FVARBPROC = ?extern fn (GLenum, [*c]const GLfloat) void;
pub const PFNGLMULTITEXCOORD3IARBPROC = ?extern fn (GLenum, GLint, GLint, GLint) void;
pub const PFNGLMULTITEXCOORD3IVARBPROC = ?extern fn (GLenum, [*c]const GLint) void;
pub const PFNGLMULTITEXCOORD3SARBPROC = ?extern fn (GLenum, GLshort, GLshort, GLshort) void;
pub const PFNGLMULTITEXCOORD3SVARBPROC = ?extern fn (GLenum, [*c]const GLshort) void;
pub const PFNGLMULTITEXCOORD4DARBPROC = ?extern fn (GLenum, GLdouble, GLdouble, GLdouble, GLdouble) void;
pub const PFNGLMULTITEXCOORD4DVARBPROC = ?extern fn (GLenum, [*c]const GLdouble) void;
pub const PFNGLMULTITEXCOORD4FARBPROC = ?extern fn (GLenum, GLfloat, GLfloat, GLfloat, GLfloat) void;
pub const PFNGLMULTITEXCOORD4FVARBPROC = ?extern fn (GLenum, [*c]const GLfloat) void;
pub const PFNGLMULTITEXCOORD4IARBPROC = ?extern fn (GLenum, GLint, GLint, GLint, GLint) void;
pub const PFNGLMULTITEXCOORD4IVARBPROC = ?extern fn (GLenum, [*c]const GLint) void;
pub const PFNGLMULTITEXCOORD4SARBPROC = ?extern fn (GLenum, GLshort, GLshort, GLshort, GLshort) void;
pub const PFNGLMULTITEXCOORD4SVARBPROC = ?extern fn (GLenum, [*c]const GLshort) void;
pub const PFNGLBLENDFUNCSEPARATEPROC = ?extern fn (GLenum, GLenum, GLenum, GLenum) void;
pub const PFNGLMULTIDRAWARRAYSPROC = ?extern fn (GLenum, [*c]const GLint, [*c]const GLsizei, GLsizei) void;
pub const PFNGLMULTIDRAWELEMENTSPROC = ?extern fn (GLenum, [*c]const GLsizei, GLenum, [*c]const (?*const c_void), GLsizei) void;
pub const PFNGLPOINTPARAMETERFPROC = ?extern fn (GLenum, GLfloat) void;
pub const PFNGLPOINTPARAMETERFVPROC = ?extern fn (GLenum, [*c]const GLfloat) void;
pub const PFNGLPOINTPARAMETERIPROC = ?extern fn (GLenum, GLint) void;
pub const PFNGLPOINTPARAMETERIVPROC = ?extern fn (GLenum, [*c]const GLint) void;
pub const PFNGLFOGCOORDFPROC = ?extern fn (GLfloat) void;
pub const PFNGLFOGCOORDFVPROC = ?extern fn ([*c]const GLfloat) void;
pub const PFNGLFOGCOORDDPROC = ?extern fn (GLdouble) void;
pub const PFNGLFOGCOORDDVPROC = ?extern fn ([*c]const GLdouble) void;
pub const PFNGLFOGCOORDPOINTERPROC = ?extern fn (GLenum, GLsizei, ?*const c_void) void;
pub const PFNGLSECONDARYCOLOR3BPROC = ?extern fn (GLbyte, GLbyte, GLbyte) void;
pub const PFNGLSECONDARYCOLOR3BVPROC = ?extern fn ([*c]const GLbyte) void;
pub const PFNGLSECONDARYCOLOR3DPROC = ?extern fn (GLdouble, GLdouble, GLdouble) void;
pub const PFNGLSECONDARYCOLOR3DVPROC = ?extern fn ([*c]const GLdouble) void;
pub const PFNGLSECONDARYCOLOR3FPROC = ?extern fn (GLfloat, GLfloat, GLfloat) void;
pub const PFNGLSECONDARYCOLOR3FVPROC = ?extern fn ([*c]const GLfloat) void;
pub const PFNGLSECONDARYCOLOR3IPROC = ?extern fn (GLint, GLint, GLint) void;
pub const PFNGLSECONDARYCOLOR3IVPROC = ?extern fn ([*c]const GLint) void;
pub const PFNGLSECONDARYCOLOR3SPROC = ?extern fn (GLshort, GLshort, GLshort) void;
pub const PFNGLSECONDARYCOLOR3SVPROC = ?extern fn ([*c]const GLshort) void;
pub const PFNGLSECONDARYCOLOR3UBPROC = ?extern fn (GLubyte, GLubyte, GLubyte) void;
pub const PFNGLSECONDARYCOLOR3UBVPROC = ?extern fn ([*c]const GLubyte) void;
pub const PFNGLSECONDARYCOLOR3UIPROC = ?extern fn (GLuint, GLuint, GLuint) void;
pub const PFNGLSECONDARYCOLOR3UIVPROC = ?extern fn ([*c]const GLuint) void;
pub const PFNGLSECONDARYCOLOR3USPROC = ?extern fn (GLushort, GLushort, GLushort) void;
pub const PFNGLSECONDARYCOLOR3USVPROC = ?extern fn ([*c]const GLushort) void;
pub const PFNGLSECONDARYCOLORPOINTERPROC = ?extern fn (GLint, GLenum, GLsizei, ?*const c_void) void;
pub const PFNGLWINDOWPOS2DPROC = ?extern fn (GLdouble, GLdouble) void;
pub const PFNGLWINDOWPOS2DVPROC = ?extern fn ([*c]const GLdouble) void;
pub const PFNGLWINDOWPOS2FPROC = ?extern fn (GLfloat, GLfloat) void;
pub const PFNGLWINDOWPOS2FVPROC = ?extern fn ([*c]const GLfloat) void;
pub const PFNGLWINDOWPOS2IPROC = ?extern fn (GLint, GLint) void;
pub const PFNGLWINDOWPOS2IVPROC = ?extern fn ([*c]const GLint) void;
pub const PFNGLWINDOWPOS2SPROC = ?extern fn (GLshort, GLshort) void;
pub const PFNGLWINDOWPOS2SVPROC = ?extern fn ([*c]const GLshort) void;
pub const PFNGLWINDOWPOS3DPROC = ?extern fn (GLdouble, GLdouble, GLdouble) void;
pub const PFNGLWINDOWPOS3DVPROC = ?extern fn ([*c]const GLdouble) void;
pub const PFNGLWINDOWPOS3FPROC = ?extern fn (GLfloat, GLfloat, GLfloat) void;
pub const PFNGLWINDOWPOS3FVPROC = ?extern fn ([*c]const GLfloat) void;
pub const PFNGLWINDOWPOS3IPROC = ?extern fn (GLint, GLint, GLint) void;
pub const PFNGLWINDOWPOS3IVPROC = ?extern fn ([*c]const GLint) void;
pub const PFNGLWINDOWPOS3SPROC = ?extern fn (GLshort, GLshort, GLshort) void;
pub const PFNGLWINDOWPOS3SVPROC = ?extern fn ([*c]const GLshort) void;
pub const PFNGLBLENDCOLORPROC = ?extern fn (GLfloat, GLfloat, GLfloat, GLfloat) void;
pub const PFNGLBLENDEQUATIONPROC = ?extern fn (GLenum) void;
pub const khronos_int32_t = i32;
pub const khronos_uint32_t = u32;
pub const khronos_int64_t = i64;
pub const khronos_uint64_t = u64;
pub const khronos_int8_t = i8;
pub const khronos_uint8_t = u8;
pub const khronos_int16_t = c_short;
pub const khronos_uint16_t = c_ushort;
pub const khronos_intptr_t = c_long;
pub const khronos_uintptr_t = c_ulong;
pub const khronos_ssize_t = c_long;
pub const khronos_usize_t = c_ulong;
pub const khronos_float_t = f32;
pub const khronos_utime_nanoseconds_t = khronos_uint64_t;
pub const khronos_stime_nanoseconds_t = khronos_int64_t;
pub const KHRONOS_FALSE = 0;
pub const KHRONOS_TRUE = 1;
pub const KHRONOS_BOOLEAN_ENUM_FORCE_SIZE = 2147483647;
pub const khronos_boolean_enum_t = extern enum {
    KHRONOS_FALSE = 0,
    KHRONOS_TRUE = 1,
    KHRONOS_BOOLEAN_ENUM_FORCE_SIZE = 2147483647,
};
pub const GLsizeiptr = khronos_ssize_t;
pub const GLintptr = khronos_intptr_t;
pub const PFNGLGENQUERIESPROC = ?extern fn (GLsizei, [*c]GLuint) void;
pub const PFNGLDELETEQUERIESPROC = ?extern fn (GLsizei, [*c]const GLuint) void;
pub const PFNGLISQUERYPROC = ?extern fn (GLuint) GLboolean;
pub const PFNGLBEGINQUERYPROC = ?extern fn (GLenum, GLuint) void;
pub const PFNGLENDQUERYPROC = ?extern fn (GLenum) void;
pub const PFNGLGETQUERYIVPROC = ?extern fn (GLenum, GLenum, [*c]GLint) void;
pub const PFNGLGETQUERYOBJECTIVPROC = ?extern fn (GLuint, GLenum, [*c]GLint) void;
pub const PFNGLGETQUERYOBJECTUIVPROC = ?extern fn (GLuint, GLenum, [*c]GLuint) void;
pub const PFNGLBINDBUFFERPROC = ?extern fn (GLenum, GLuint) void;
pub const PFNGLDELETEBUFFERSPROC = ?extern fn (GLsizei, [*c]const GLuint) void;
pub const PFNGLGENBUFFERSPROC = ?extern fn (GLsizei, [*c]GLuint) void;
pub const PFNGLISBUFFERPROC = ?extern fn (GLuint) GLboolean;
pub const PFNGLBUFFERDATAPROC = ?extern fn (GLenum, GLsizeiptr, ?*const c_void, GLenum) void;
pub const PFNGLBUFFERSUBDATAPROC = ?extern fn (GLenum, GLintptr, GLsizeiptr, ?*const c_void) void;
pub const PFNGLGETBUFFERSUBDATAPROC = ?extern fn (GLenum, GLintptr, GLsizeiptr, ?*c_void) void;
pub const PFNGLMAPBUFFERPROC = ?extern fn (GLenum, GLenum) ?*c_void;
pub const PFNGLUNMAPBUFFERPROC = ?extern fn (GLenum) GLboolean;
pub const PFNGLGETBUFFERPARAMETERIVPROC = ?extern fn (GLenum, GLenum, [*c]GLint) void;
pub const PFNGLGETBUFFERPOINTERVPROC = ?extern fn (GLenum, GLenum, [*c](?*c_void)) void;
pub const GLchar = u8;
pub const PFNGLBLENDEQUATIONSEPARATEPROC = ?extern fn (GLenum, GLenum) void;
pub const PFNGLDRAWBUFFERSPROC = ?extern fn (GLsizei, [*c]const GLenum) void;
pub const PFNGLSTENCILOPSEPARATEPROC = ?extern fn (GLenum, GLenum, GLenum, GLenum) void;
pub const PFNGLSTENCILFUNCSEPARATEPROC = ?extern fn (GLenum, GLenum, GLint, GLuint) void;
pub const PFNGLSTENCILMASKSEPARATEPROC = ?extern fn (GLenum, GLuint) void;
pub const PFNGLATTACHSHADERPROC = ?extern fn (GLuint, GLuint) void;
pub const PFNGLBINDATTRIBLOCATIONPROC = ?extern fn (GLuint, GLuint, [*c]const GLchar) void;
pub const PFNGLCOMPILESHADERPROC = ?extern fn (GLuint) void;
pub const PFNGLCREATEPROGRAMPROC = ?extern fn () GLuint;
pub const PFNGLCREATESHADERPROC = ?extern fn (GLenum) GLuint;
pub const PFNGLDELETEPROGRAMPROC = ?extern fn (GLuint) void;
pub const PFNGLDELETESHADERPROC = ?extern fn (GLuint) void;
pub const PFNGLDETACHSHADERPROC = ?extern fn (GLuint, GLuint) void;
pub const PFNGLDISABLEVERTEXATTRIBARRAYPROC = ?extern fn (GLuint) void;
pub const PFNGLENABLEVERTEXATTRIBARRAYPROC = ?extern fn (GLuint) void;
pub const PFNGLGETACTIVEATTRIBPROC = ?extern fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLint, [*c]GLenum, [*c]GLchar) void;
pub const PFNGLGETACTIVEUNIFORMPROC = ?extern fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLint, [*c]GLenum, [*c]GLchar) void;
pub const PFNGLGETATTACHEDSHADERSPROC = ?extern fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLuint) void;
pub const PFNGLGETATTRIBLOCATIONPROC = ?extern fn (GLuint, [*c]const GLchar) GLint;
pub const PFNGLGETPROGRAMIVPROC = ?extern fn (GLuint, GLenum, [*c]GLint) void;
pub const PFNGLGETPROGRAMINFOLOGPROC = ?extern fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) void;
pub const PFNGLGETSHADERIVPROC = ?extern fn (GLuint, GLenum, [*c]GLint) void;
pub const PFNGLGETSHADERINFOLOGPROC = ?extern fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) void;
pub const PFNGLGETSHADERSOURCEPROC = ?extern fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) void;
pub const PFNGLGETUNIFORMLOCATIONPROC = ?extern fn (GLuint, [*c]const GLchar) GLint;
pub const PFNGLGETUNIFORMFVPROC = ?extern fn (GLuint, GLint, [*c]GLfloat) void;
pub const PFNGLGETUNIFORMIVPROC = ?extern fn (GLuint, GLint, [*c]GLint) void;
pub const PFNGLGETVERTEXATTRIBDVPROC = ?extern fn (GLuint, GLenum, [*c]GLdouble) void;
pub const PFNGLGETVERTEXATTRIBFVPROC = ?extern fn (GLuint, GLenum, [*c]GLfloat) void;
pub const PFNGLGETVERTEXATTRIBIVPROC = ?extern fn (GLuint, GLenum, [*c]GLint) void;
pub const PFNGLGETVERTEXATTRIBPOINTERVPROC = ?extern fn (GLuint, GLenum, [*c](?*c_void)) void;
pub const PFNGLISPROGRAMPROC = ?extern fn (GLuint) GLboolean;
pub const PFNGLISSHADERPROC = ?extern fn (GLuint) GLboolean;
pub const PFNGLLINKPROGRAMPROC = ?extern fn (GLuint) void;
pub const PFNGLSHADERSOURCEPROC = ?extern fn (GLuint, GLsizei, [*c]const ([*c]const GLchar), [*c]const GLint) void;
pub const PFNGLUSEPROGRAMPROC = ?extern fn (GLuint) void;
pub const PFNGLUNIFORM1FPROC = ?extern fn (GLint, GLfloat) void;
pub const PFNGLUNIFORM2FPROC = ?extern fn (GLint, GLfloat, GLfloat) void;
pub const PFNGLUNIFORM3FPROC = ?extern fn (GLint, GLfloat, GLfloat, GLfloat) void;
pub const PFNGLUNIFORM4FPROC = ?extern fn (GLint, GLfloat, GLfloat, GLfloat, GLfloat) void;
pub const PFNGLUNIFORM1IPROC = ?extern fn (GLint, GLint) void;
pub const PFNGLUNIFORM2IPROC = ?extern fn (GLint, GLint, GLint) void;
pub const PFNGLUNIFORM3IPROC = ?extern fn (GLint, GLint, GLint, GLint) void;
pub const PFNGLUNIFORM4IPROC = ?extern fn (GLint, GLint, GLint, GLint, GLint) void;
pub const PFNGLUNIFORM1FVPROC = ?extern fn (GLint, GLsizei, [*c]const GLfloat) void;
pub const PFNGLUNIFORM2FVPROC = ?extern fn (GLint, GLsizei, [*c]const GLfloat) void;
pub const PFNGLUNIFORM3FVPROC = ?extern fn (GLint, GLsizei, [*c]const GLfloat) void;
pub const PFNGLUNIFORM4FVPROC = ?extern fn (GLint, GLsizei, [*c]const GLfloat) void;
pub const PFNGLUNIFORM1IVPROC = ?extern fn (GLint, GLsizei, [*c]const GLint) void;
pub const PFNGLUNIFORM2IVPROC = ?extern fn (GLint, GLsizei, [*c]const GLint) void;
pub const PFNGLUNIFORM3IVPROC = ?extern fn (GLint, GLsizei, [*c]const GLint) void;
pub const PFNGLUNIFORM4IVPROC = ?extern fn (GLint, GLsizei, [*c]const GLint) void;
pub const PFNGLUNIFORMMATRIX2FVPROC = ?extern fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) void;
pub const PFNGLUNIFORMMATRIX3FVPROC = ?extern fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) void;
pub const PFNGLUNIFORMMATRIX4FVPROC = ?extern fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) void;
pub const PFNGLVALIDATEPROGRAMPROC = ?extern fn (GLuint) void;
pub const PFNGLVERTEXATTRIB1DPROC = ?extern fn (GLuint, GLdouble) void;
pub const PFNGLVERTEXATTRIB1DVPROC = ?extern fn (GLuint, [*c]const GLdouble) void;
pub const PFNGLVERTEXATTRIB1FPROC = ?extern fn (GLuint, GLfloat) void;
pub const PFNGLVERTEXATTRIB1FVPROC = ?extern fn (GLuint, [*c]const GLfloat) void;
pub const PFNGLVERTEXATTRIB1SPROC = ?extern fn (GLuint, GLshort) void;
pub const PFNGLVERTEXATTRIB1SVPROC = ?extern fn (GLuint, [*c]const GLshort) void;
pub const PFNGLVERTEXATTRIB2DPROC = ?extern fn (GLuint, GLdouble, GLdouble) void;
pub const PFNGLVERTEXATTRIB2DVPROC = ?extern fn (GLuint, [*c]const GLdouble) void;
pub const PFNGLVERTEXATTRIB2FPROC = ?extern fn (GLuint, GLfloat, GLfloat) void;
pub const PFNGLVERTEXATTRIB2FVPROC = ?extern fn (GLuint, [*c]const GLfloat) void;
pub const PFNGLVERTEXATTRIB2SPROC = ?extern fn (GLuint, GLshort, GLshort) void;
pub const PFNGLVERTEXATTRIB2SVPROC = ?extern fn (GLuint, [*c]const GLshort) void;
pub const PFNGLVERTEXATTRIB3DPROC = ?extern fn (GLuint, GLdouble, GLdouble, GLdouble) void;
pub const PFNGLVERTEXATTRIB3DVPROC = ?extern fn (GLuint, [*c]const GLdouble) void;
pub const PFNGLVERTEXATTRIB3FPROC = ?extern fn (GLuint, GLfloat, GLfloat, GLfloat) void;
pub const PFNGLVERTEXATTRIB3FVPROC = ?extern fn (GLuint, [*c]const GLfloat) void;
pub const PFNGLVERTEXATTRIB3SPROC = ?extern fn (GLuint, GLshort, GLshort, GLshort) void;
pub const PFNGLVERTEXATTRIB3SVPROC = ?extern fn (GLuint, [*c]const GLshort) void;
pub const PFNGLVERTEXATTRIB4NBVPROC = ?extern fn (GLuint, [*c]const GLbyte) void;
pub const PFNGLVERTEXATTRIB4NIVPROC = ?extern fn (GLuint, [*c]const GLint) void;
pub const PFNGLVERTEXATTRIB4NSVPROC = ?extern fn (GLuint, [*c]const GLshort) void;
pub const PFNGLVERTEXATTRIB4NUBPROC = ?extern fn (GLuint, GLubyte, GLubyte, GLubyte, GLubyte) void;
pub const PFNGLVERTEXATTRIB4NUBVPROC = ?extern fn (GLuint, [*c]const GLubyte) void;
pub const PFNGLVERTEXATTRIB4NUIVPROC = ?extern fn (GLuint, [*c]const GLuint) void;
pub const PFNGLVERTEXATTRIB4NUSVPROC = ?extern fn (GLuint, [*c]const GLushort) void;
pub const PFNGLVERTEXATTRIB4BVPROC = ?extern fn (GLuint, [*c]const GLbyte) void;
pub const PFNGLVERTEXATTRIB4DPROC = ?extern fn (GLuint, GLdouble, GLdouble, GLdouble, GLdouble) void;
pub const PFNGLVERTEXATTRIB4DVPROC = ?extern fn (GLuint, [*c]const GLdouble) void;
pub const PFNGLVERTEXATTRIB4FPROC = ?extern fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat) void;
pub const PFNGLVERTEXATTRIB4FVPROC = ?extern fn (GLuint, [*c]const GLfloat) void;
pub const PFNGLVERTEXATTRIB4IVPROC = ?extern fn (GLuint, [*c]const GLint) void;
pub const PFNGLVERTEXATTRIB4SPROC = ?extern fn (GLuint, GLshort, GLshort, GLshort, GLshort) void;
pub const PFNGLVERTEXATTRIB4SVPROC = ?extern fn (GLuint, [*c]const GLshort) void;
pub const PFNGLVERTEXATTRIB4UBVPROC = ?extern fn (GLuint, [*c]const GLubyte) void;
pub const PFNGLVERTEXATTRIB4UIVPROC = ?extern fn (GLuint, [*c]const GLuint) void;
pub const PFNGLVERTEXATTRIB4USVPROC = ?extern fn (GLuint, [*c]const GLushort) void;
pub const PFNGLVERTEXATTRIBPOINTERPROC = ?extern fn (GLuint, GLint, GLenum, GLboolean, GLsizei, ?*const c_void) void;
pub const PFNGLUNIFORMMATRIX2X3FVPROC = ?extern fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) void;
pub const PFNGLUNIFORMMATRIX3X2FVPROC = ?extern fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) void;
pub const PFNGLUNIFORMMATRIX2X4FVPROC = ?extern fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) void;
pub const PFNGLUNIFORMMATRIX4X2FVPROC = ?extern fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) void;
pub const PFNGLUNIFORMMATRIX3X4FVPROC = ?extern fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) void;
pub const PFNGLUNIFORMMATRIX4X3FVPROC = ?extern fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) void;
pub const GLhalf = c_ushort;
pub const PFNGLCOLORMASKIPROC = ?extern fn (GLuint, GLboolean, GLboolean, GLboolean, GLboolean) void;
pub const PFNGLGETBOOLEANI_VPROC = ?extern fn (GLenum, GLuint, [*c]GLboolean) void;
pub const PFNGLGETINTEGERI_VPROC = ?extern fn (GLenum, GLuint, [*c]GLint) void;
pub const PFNGLENABLEIPROC = ?extern fn (GLenum, GLuint) void;
pub const PFNGLDISABLEIPROC = ?extern fn (GLenum, GLuint) void;
pub const PFNGLISENABLEDIPROC = ?extern fn (GLenum, GLuint) GLboolean;
pub const PFNGLBEGINTRANSFORMFEEDBACKPROC = ?extern fn (GLenum) void;
pub const PFNGLENDTRANSFORMFEEDBACKPROC = ?extern fn () void;
pub const PFNGLBINDBUFFERRANGEPROC = ?extern fn (GLenum, GLuint, GLuint, GLintptr, GLsizeiptr) void;
pub const PFNGLBINDBUFFERBASEPROC = ?extern fn (GLenum, GLuint, GLuint) void;
pub const PFNGLTRANSFORMFEEDBACKVARYINGSPROC = ?extern fn (GLuint, GLsizei, [*c]const ([*c]const GLchar), GLenum) void;
pub const PFNGLGETTRANSFORMFEEDBACKVARYINGPROC = ?extern fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLsizei, [*c]GLenum, [*c]GLchar) void;
pub const PFNGLCLAMPCOLORPROC = ?extern fn (GLenum, GLenum) void;
pub const PFNGLBEGINCONDITIONALRENDERPROC = ?extern fn (GLuint, GLenum) void;
pub const PFNGLENDCONDITIONALRENDERPROC = ?extern fn () void;
pub const PFNGLVERTEXATTRIBIPOINTERPROC = ?extern fn (GLuint, GLint, GLenum, GLsizei, ?*const c_void) void;
pub const PFNGLGETVERTEXATTRIBIIVPROC = ?extern fn (GLuint, GLenum, [*c]GLint) void;
pub const PFNGLGETVERTEXATTRIBIUIVPROC = ?extern fn (GLuint, GLenum, [*c]GLuint) void;
pub const PFNGLVERTEXATTRIBI1IPROC = ?extern fn (GLuint, GLint) void;
pub const PFNGLVERTEXATTRIBI2IPROC = ?extern fn (GLuint, GLint, GLint) void;
pub const PFNGLVERTEXATTRIBI3IPROC = ?extern fn (GLuint, GLint, GLint, GLint) void;
pub const PFNGLVERTEXATTRIBI4IPROC = ?extern fn (GLuint, GLint, GLint, GLint, GLint) void;
pub const PFNGLVERTEXATTRIBI1UIPROC = ?extern fn (GLuint, GLuint) void;
pub const PFNGLVERTEXATTRIBI2UIPROC = ?extern fn (GLuint, GLuint, GLuint) void;
pub const PFNGLVERTEXATTRIBI3UIPROC = ?extern fn (GLuint, GLuint, GLuint, GLuint) void;
pub const PFNGLVERTEXATTRIBI4UIPROC = ?extern fn (GLuint, GLuint, GLuint, GLuint, GLuint) void;
pub const PFNGLVERTEXATTRIBI1IVPROC = ?extern fn (GLuint, [*c]const GLint) void;
pub const PFNGLVERTEXATTRIBI2IVPROC = ?extern fn (GLuint, [*c]const GLint) void;
pub const PFNGLVERTEXATTRIBI3IVPROC = ?extern fn (GLuint, [*c]const GLint) void;
pub const PFNGLVERTEXATTRIBI4IVPROC = ?extern fn (GLuint, [*c]const GLint) void;
pub const PFNGLVERTEXATTRIBI1UIVPROC = ?extern fn (GLuint, [*c]const GLuint) void;
pub const PFNGLVERTEXATTRIBI2UIVPROC = ?extern fn (GLuint, [*c]const GLuint) void;
pub const PFNGLVERTEXATTRIBI3UIVPROC = ?extern fn (GLuint, [*c]const GLuint) void;
pub const PFNGLVERTEXATTRIBI4UIVPROC = ?extern fn (GLuint, [*c]const GLuint) void;
pub const PFNGLVERTEXATTRIBI4BVPROC = ?extern fn (GLuint, [*c]const GLbyte) void;
pub const PFNGLVERTEXATTRIBI4SVPROC = ?extern fn (GLuint, [*c]const GLshort) void;
pub const PFNGLVERTEXATTRIBI4UBVPROC = ?extern fn (GLuint, [*c]const GLubyte) void;
pub const PFNGLVERTEXATTRIBI4USVPROC = ?extern fn (GLuint, [*c]const GLushort) void;
pub const PFNGLGETUNIFORMUIVPROC = ?extern fn (GLuint, GLint, [*c]GLuint) void;
pub const PFNGLBINDFRAGDATALOCATIONPROC = ?extern fn (GLuint, GLuint, [*c]const GLchar) void;
pub const PFNGLGETFRAGDATALOCATIONPROC = ?extern fn (GLuint, [*c]const GLchar) GLint;
pub const PFNGLUNIFORM1UIPROC = ?extern fn (GLint, GLuint) void;
pub const PFNGLUNIFORM2UIPROC = ?extern fn (GLint, GLuint, GLuint) void;
pub const PFNGLUNIFORM3UIPROC = ?extern fn (GLint, GLuint, GLuint, GLuint) void;
pub const PFNGLUNIFORM4UIPROC = ?extern fn (GLint, GLuint, GLuint, GLuint, GLuint) void;
pub const PFNGLUNIFORM1UIVPROC = ?extern fn (GLint, GLsizei, [*c]const GLuint) void;
pub const PFNGLUNIFORM2UIVPROC = ?extern fn (GLint, GLsizei, [*c]const GLuint) void;
pub const PFNGLUNIFORM3UIVPROC = ?extern fn (GLint, GLsizei, [*c]const GLuint) void;
pub const PFNGLUNIFORM4UIVPROC = ?extern fn (GLint, GLsizei, [*c]const GLuint) void;
pub const PFNGLTEXPARAMETERIIVPROC = ?extern fn (GLenum, GLenum, [*c]const GLint) void;
pub const PFNGLTEXPARAMETERIUIVPROC = ?extern fn (GLenum, GLenum, [*c]const GLuint) void;
pub const PFNGLGETTEXPARAMETERIIVPROC = ?extern fn (GLenum, GLenum, [*c]GLint) void;
pub const PFNGLGETTEXPARAMETERIUIVPROC = ?extern fn (GLenum, GLenum, [*c]GLuint) void;
pub const PFNGLCLEARBUFFERIVPROC = ?extern fn (GLenum, GLint, [*c]const GLint) void;
pub const PFNGLCLEARBUFFERUIVPROC = ?extern fn (GLenum, GLint, [*c]const GLuint) void;
pub const PFNGLCLEARBUFFERFVPROC = ?extern fn (GLenum, GLint, [*c]const GLfloat) void;
pub const PFNGLCLEARBUFFERFIPROC = ?extern fn (GLenum, GLint, GLfloat, GLint) void;
pub const PFNGLGETSTRINGIPROC = ?extern fn (GLenum, GLuint* [*c]const GLubyte;
pub const PFNGLISRENDERBUFFERPROC = ?extern fn (GLuint) GLboolean;
pub const PFNGLBINDRENDERBUFFERPROC = ?extern fn (GLenum, GLuint) void;
pub const PFNGLDELETERENDERBUFFERSPROC = ?extern fn (GLsizei, [*c]const GLuint) void;
pub const PFNGLGENRENDERBUFFERSPROC = ?extern fn (GLsizei, [*c]GLuint) void;
pub const PFNGLRENDERBUFFERSTORAGEPROC = ?extern fn (GLenum, GLenum, GLsizei, GLsizei) void;
pub const PFNGLGETRENDERBUFFERPARAMETERIVPROC = ?extern fn (GLenum, GLenum, [*c]GLint) void;
pub const PFNGLISFRAMEBUFFERPROC = ?extern fn (GLuint) GLboolean;
pub const PFNGLBINDFRAMEBUFFERPROC = ?extern fn (GLenum, GLuint) void;
pub const PFNGLDELETEFRAMEBUFFERSPROC = ?extern fn (GLsizei, [*c]const GLuint) void;
pub const PFNGLGENFRAMEBUFFERSPROC = ?extern fn (GLsizei, [*c]GLuint) void;
pub const PFNGLCHECKFRAMEBUFFERSTATUSPROC = ?extern fn (GLenum) GLenum;
pub const PFNGLFRAMEBUFFERTEXTURE1DPROC = ?extern fn (GLenum, GLenum, GLenum, GLuint, GLint) void;
pub const PFNGLFRAMEBUFFERTEXTURE2DPROC = ?extern fn (GLenum, GLenum, GLenum, GLuint, GLint) void;
pub const PFNGLFRAMEBUFFERTEXTURE3DPROC = ?extern fn (GLenum, GLenum, GLenum, GLuint, GLint, GLint) void;
pub const PFNGLFRAMEBUFFERRENDERBUFFERPROC = ?extern fn (GLenum, GLenum, GLenum, GLuint) void;
pub const PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC = ?extern fn (GLenum, GLenum, GLenum, [*c]GLint) void;
pub const PFNGLGENERATEMIPMAPPROC = ?extern fn (GLenum) void;
pub const PFNGLBLITFRAMEBUFFERPROC = ?extern fn (GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) void;
pub const PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC = ?extern fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) void;
pub const PFNGLFRAMEBUFFERTEXTURELAYERPROC = ?extern fn (GLenum, GLenum, GLuint, GLint, GLint) void;
pub const PFNGLMAPBUFFERRANGEPROC = ?extern fn (GLenum, GLintptr, GLsizeiptr, GLbitfield) ?*c_void;
pub const PFNGLFLUSHMAPPEDBUFFERRANGEPROC = ?extern fn (GLenum, GLintptr, GLsizeiptr) void;
pub const PFNGLBINDVERTEXARRAYPROC = ?extern fn (GLuint) void;
pub const PFNGLDELETEVERTEXARRAYSPROC = ?extern fn (GLsizei, [*c]const GLuint) void;
pub const PFNGLGENVERTEXARRAYSPROC = ?extern fn (GLsizei, [*c]GLuint) void;
pub const PFNGLISVERTEXARRAYPROC = ?extern fn (GLuint) GLboolean;
pub const PFNGLDRAWARRAYSINSTANCEDPROC = ?extern fn (GLenum, GLint, GLsizei, GLsizei) void;
pub const PFNGLDRAWELEMENTSINSTANCEDPROC = ?extern fn (GLenum, GLsizei, GLenum, ?*const c_void, GLsizei) void;
pub const PFNGLTEXBUFFERPROC = ?extern fn (GLenum, GLenum, GLuint) void;
pub const PFNGLPRIMITIVERESTARTINDEXPROC = ?extern fn (GLuint) void;
pub const PFNGLCOPYBUFFERSUBDATAPROC = ?extern fn (GLenum, GLenum, GLintptr, GLintptr, GLsizeiptr) void;
pub const PFNGLGETUNIFORMINDICESPROC = ?extern fn (GLuint, GLsizei, [*c]const ([*c]const GLchar), [*c]GLuint) void;
pub const PFNGLGETACTIVEUNIFORMSIVPROC = ?extern fn (GLuint, GLsizei, [*c]const GLuint, GLenum, [*c]GLint) void;
pub const PFNGLGETACTIVEUNIFORMNAMEPROC = ?extern fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) void;
pub const PFNGLGETUNIFORMBLOCKINDEXPROC = ?extern fn (GLuint, [*c]const GLchar) GLuint;
pub const PFNGLGETACTIVEUNIFORMBLOCKIVPROC = ?extern fn (GLuint, GLuint, GLenum, [*c]GLint) void;
pub const PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC = ?extern fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) void;
pub const PFNGLUNIFORMBLOCKBINDINGPROC = ?extern fn (GLuint, GLuint, GLuint) void;
pub const struct___GLsync = @OpaqueType();
pub const GLsync = ?*struct___GLsync;
pub const __gwchar_t = c_int;
pub const imaxdiv_t = extern struct {
    quot: c_long,
    rem: c_long,
};
pub extern fn imaxabs(__n: intmax_t) intmax_t;
pub extern fn imaxdiv(__numer: intmax_t, __denom: intmax_t) imaxdiv_t;
pub extern fn strtoimax(noalias __nptr: [*c]const u8, noalias __endptr: [*c]([*c]u8), __base: c_int) intmax_t;
pub extern fn strtoumax(noalias __nptr: [*c]const u8, noalias __endptr: [*c]([*c]u8), __base: c_int) uintmax_t;
pub extern fn wcstoimax(noalias __nptr: [*c]const __gwchar_t, noalias __endptr: [*c]([*c]__gwchar_t), __base: c_int) intmax_t;
pub extern fn wcstoumax(noalias __nptr: [*c]const __gwchar_t, noalias __endptr: [*c]([*c]__gwchar_t), __base: c_int) uintmax_t;
pub const GLuint64 = u64;
pub const GLint64 = i64;
pub const PFNGLDRAWELEMENTSBASEVERTEXPROC = ?extern fn (GLenum, GLsizei, GLenum, ?*const c_void, GLint) void;
pub const PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC = ?extern fn (GLenum, GLuint, GLuint, GLsizei, GLenum, ?*const c_void, GLint) void;
pub const PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC = ?extern fn (GLenum, GLsizei, GLenum, ?*const c_void, GLsizei, GLint) void;
pub const PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC = ?extern fn (GLenum, [*c]const GLsizei, GLenum, [*c]const (?*const c_void), GLsizei, [*c]const GLint) void;
pub const PFNGLPROVOKINGVERTEXPROC = ?extern fn (GLenum) void;
pub const PFNGLFENCESYNCPROC = ?extern fn (GLenum, GLbitfield) GLsync;
pub const PFNGLISSYNCPROC = ?extern fn (GLsync) GLboolean;
pub const PFNGLDELETESYNCPROC = ?extern fn (GLsync) void;
pub const PFNGLCLIENTWAITSYNCPROC = ?extern fn (GLsync, GLbitfield, GLuint64) GLenum;
pub const PFNGLWAITSYNCPROC = ?extern fn (GLsync, GLbitfield, GLuint64) void;
pub const PFNGLGETINTEGER64VPROC = ?extern fn (GLenum, [*c]GLint64) void;
pub const PFNGLGETSYNCIVPROC = ?extern fn (GLsync, GLenum, GLsizei, [*c]GLsizei, [*c]GLint) void;
pub const PFNGLGETINTEGER64I_VPROC = ?extern fn (GLenum, GLuint, [*c]GLint64) void;
pub const PFNGLGETBUFFERPARAMETERI64VPROC = ?extern fn (GLenum, GLenum, [*c]GLint64) void;
pub const PFNGLFRAMEBUFFERTEXTUREPROC = ?extern fn (GLenum, GLenum, GLuint, GLint) void;
pub const PFNGLTEXIMAGE2DMULTISAMPLEPROC = ?extern fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean) void;
pub const PFNGLTEXIMAGE3DMULTISAMPLEPROC = ?extern fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean) void;
pub const PFNGLGETMULTISAMPLEFVPROC = ?extern fn (GLenum, GLuint, [*c]GLfloat) void;
pub const PFNGLSAMPLEMASKIPROC = ?extern fn (GLuint, GLbitfield) void;
pub const PFNGLBINDFRAGDATALOCATIONINDEXEDPROC = ?extern fn (GLuint, GLuint, GLuint, [*c]const GLchar) void;
pub const PFNGLGETFRAGDATAINDEXPROC = ?extern fn (GLuint, [*c]const GLchar) GLint;
pub const PFNGLGENSAMPLERSPROC = ?extern fn (GLsizei, [*c]GLuint) void;
pub const PFNGLDELETESAMPLERSPROC = ?extern fn (GLsizei, [*c]const GLuint) void;
pub const PFNGLISSAMPLERPROC = ?extern fn (GLuint) GLboolean;
pub const PFNGLBINDSAMPLERPROC = ?extern fn (GLuint, GLuint) void;
pub const PFNGLSAMPLERPARAMETERIPROC = ?extern fn (GLuint, GLenum, GLint) void;
pub const PFNGLSAMPLERPARAMETERIVPROC = ?extern fn (GLuint, GLenum, [*c]const GLint) void;
pub const PFNGLSAMPLERPARAMETERFPROC = ?extern fn (GLuint, GLenum, GLfloat) void;
pub const PFNGLSAMPLERPARAMETERFVPROC = ?extern fn (GLuint, GLenum, [*c]const GLfloat) void;
pub const PFNGLSAMPLERPARAMETERIIVPROC = ?extern fn (GLuint, GLenum, [*c]const GLint) void;
pub const PFNGLSAMPLERPARAMETERIUIVPROC = ?extern fn (GLuint, GLenum, [*c]const GLuint) void;
pub const PFNGLGETSAMPLERPARAMETERIVPROC = ?extern fn (GLuint, GLenum, [*c]GLint) void;
pub const PFNGLGETSAMPLERPARAMETERIIVPROC = ?extern fn (GLuint, GLenum, [*c]GLint) void;
pub const PFNGLGETSAMPLERPARAMETERFVPROC = ?extern fn (GLuint, GLenum, [*c]GLfloat) void;
pub const PFNGLGETSAMPLERPARAMETERIUIVPROC = ?extern fn (GLuint, GLenum, [*c]GLuint) void;
pub const PFNGLQUERYCOUNTERPROC = ?extern fn (GLuint, GLenum) void;
pub const PFNGLGETQUERYOBJECTI64VPROC = ?extern fn (GLuint, GLenum, [*c]GLint64) void;
pub const PFNGLGETQUERYOBJECTUI64VPROC = ?extern fn (GLuint, GLenum, [*c]GLuint64) void;
pub const PFNGLVERTEXATTRIBDIVISORPROC = ?extern fn (GLuint, GLuint) void;
pub const PFNGLVERTEXATTRIBP1UIPROC = ?extern fn (GLuint, GLenum, GLboolean, GLuint) void;
pub const PFNGLVERTEXATTRIBP1UIVPROC = ?extern fn (GLuint, GLenum, GLboolean, [*c]const GLuint) void;
pub const PFNGLVERTEXATTRIBP2UIPROC = ?extern fn (GLuint, GLenum, GLboolean, GLuint) void;
pub const PFNGLVERTEXATTRIBP2UIVPROC = ?extern fn (GLuint, GLenum, GLboolean, [*c]const GLuint) void;
pub const PFNGLVERTEXATTRIBP3UIPROC = ?extern fn (GLuint, GLenum, GLboolean, GLuint) void;
pub const PFNGLVERTEXATTRIBP3UIVPROC = ?extern fn (GLuint, GLenum, GLboolean, [*c]const GLuint) void;
pub const PFNGLVERTEXATTRIBP4UIPROC = ?extern fn (GLuint, GLenum, GLboolean, GLuint) void;
pub const PFNGLVERTEXATTRIBP4UIVPROC = ?extern fn (GLuint, GLenum, GLboolean, [*c]const GLuint) void;
pub const PFNGLVERTEXP2UIPROC = ?extern fn (GLenum, GLuint) void;
pub const PFNGLVERTEXP2UIVPROC = ?extern fn (GLenum, [*c]const GLuint) void;
pub const PFNGLVERTEXP3UIPROC = ?extern fn (GLenum, GLuint) void;
pub const PFNGLVERTEXP3UIVPROC = ?extern fn (GLenum, [*c]const GLuint) void;
pub const PFNGLVERTEXP4UIPROC = ?extern fn (GLenum, GLuint) void;
pub const PFNGLVERTEXP4UIVPROC = ?extern fn (GLenum, [*c]const GLuint) void;
pub const PFNGLTEXCOORDP1UIPROC = ?extern fn (GLenum, GLuint) void;
pub const PFNGLTEXCOORDP1UIVPROC = ?extern fn (GLenum, [*c]const GLuint) void;
pub const PFNGLTEXCOORDP2UIPROC = ?extern fn (GLenum, GLuint) void;
pub const PFNGLTEXCOORDP2UIVPROC = ?extern fn (GLenum, [*c]const GLuint) void;
pub const PFNGLTEXCOORDP3UIPROC = ?extern fn (GLenum, GLuint) void;
pub const PFNGLTEXCOORDP3UIVPROC = ?extern fn (GLenum, [*c]const GLuint) void;
pub const PFNGLTEXCOORDP4UIPROC = ?extern fn (GLenum, GLuint) void;
pub const PFNGLTEXCOORDP4UIVPROC = ?extern fn (GLenum, [*c]const GLuint) void;
pub const PFNGLMULTITEXCOORDP1UIPROC = ?extern fn (GLenum, GLenum, GLuint) void;
pub const PFNGLMULTITEXCOORDP1UIVPROC = ?extern fn (GLenum, GLenum, [*c]const GLuint) void;
pub const PFNGLMULTITEXCOORDP2UIPROC = ?extern fn (GLenum, GLenum, GLuint) void;
pub const PFNGLMULTITEXCOORDP2UIVPROC = ?extern fn (GLenum, GLenum, [*c]const GLuint) void;
pub const PFNGLMULTITEXCOORDP3UIPROC = ?extern fn (GLenum, GLenum, GLuint) void;
pub const PFNGLMULTITEXCOORDP3UIVPROC = ?extern fn (GLenum, GLenum, [*c]const GLuint) void;
pub const PFNGLMULTITEXCOORDP4UIPROC = ?extern fn (GLenum, GLenum, GLuint) void;
pub const PFNGLMULTITEXCOORDP4UIVPROC = ?extern fn (GLenum, GLenum, [*c]const GLuint) void;
pub const PFNGLNORMALP3UIPROC = ?extern fn (GLenum, GLuint) void;
pub const PFNGLNORMALP3UIVPROC = ?extern fn (GLenum, [*c]const GLuint) void;
pub const PFNGLCOLORP3UIPROC = ?extern fn (GLenum, GLuint) void;
pub const PFNGLCOLORP3UIVPROC = ?extern fn (GLenum, [*c]const GLuint) void;
pub const PFNGLCOLORP4UIPROC = ?extern fn (GLenum, GLuint) void;
pub const PFNGLCOLORP4UIVPROC = ?extern fn (GLenum, [*c]const GLuint) void;
pub const PFNGLSECONDARYCOLORP3UIPROC = ?extern fn (GLenum, GLuint) void;
pub const PFNGLSECONDARYCOLORP3UIVPROC = ?extern fn (GLenum, [*c]const GLuint) void;
pub const PFNGLMINSAMPLESHADINGPROC = ?extern fn (GLfloat) void;
pub const PFNGLBLENDEQUATIONIPROC = ?extern fn (GLuint, GLenum) void;
pub const PFNGLBLENDEQUATIONSEPARATEIPROC = ?extern fn (GLuint, GLenum, GLenum) void;
pub const PFNGLBLENDFUNCIPROC = ?extern fn (GLuint, GLenum, GLenum) void;
pub const PFNGLBLENDFUNCSEPARATEIPROC = ?extern fn (GLuint, GLenum, GLenum, GLenum, GLenum) void;
pub const PFNGLDRAWARRAYSINDIRECTPROC = ?extern fn (GLenum, ?*const c_void) void;
pub const PFNGLDRAWELEMENTSINDIRECTPROC = ?extern fn (GLenum, GLenum, ?*const c_void) void;
pub const PFNGLUNIFORM1DPROC = ?extern fn (GLint, GLdouble) void;
pub const PFNGLUNIFORM2DPROC = ?extern fn (GLint, GLdouble, GLdouble) void;
pub const PFNGLUNIFORM3DPROC = ?extern fn (GLint, GLdouble, GLdouble, GLdouble) void;
pub const PFNGLUNIFORM4DPROC = ?extern fn (GLint, GLdouble, GLdouble, GLdouble, GLdouble) void;
pub const PFNGLUNIFORM1DVPROC = ?extern fn (GLint, GLsizei, [*c]const GLdouble) void;
pub const PFNGLUNIFORM2DVPROC = ?extern fn (GLint, GLsizei, [*c]const GLdouble) void;
pub const PFNGLUNIFORM3DVPROC = ?extern fn (GLint, GLsizei, [*c]const GLdouble) void;
pub const PFNGLUNIFORM4DVPROC = ?extern fn (GLint, GLsizei, [*c]const GLdouble) void;
pub const PFNGLUNIFORMMATRIX2DVPROC = ?extern fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) void;
pub const PFNGLUNIFORMMATRIX3DVPROC = ?extern fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) void;
pub const PFNGLUNIFORMMATRIX4DVPROC = ?extern fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) void;
pub const PFNGLUNIFORMMATRIX2X3DVPROC = ?extern fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) void;
pub const PFNGLUNIFORMMATRIX2X4DVPROC = ?extern fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) void;
pub const PFNGLUNIFORMMATRIX3X2DVPROC = ?extern fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) void;
pub const PFNGLUNIFORMMATRIX3X4DVPROC = ?extern fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) void;
pub const PFNGLUNIFORMMATRIX4X2DVPROC = ?extern fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) void;
pub const PFNGLUNIFORMMATRIX4X3DVPROC = ?extern fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) void;
pub const PFNGLGETUNIFORMDVPROC = ?extern fn (GLuint, GLint, [*c]GLdouble) void;
pub const PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC = ?extern fn (GLuint, GLenum, [*c]const GLchar) GLint;
pub const PFNGLGETSUBROUTINEINDEXPROC = ?extern fn (GLuint, GLenum, [*c]const GLchar) GLuint;
pub const PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC = ?extern fn (GLuint, GLenum, GLuint, GLenum, [*c]GLint) void;
pub const PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC = ?extern fn (GLuint, GLenum, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) void;
pub const PFNGLGETACTIVESUBROUTINENAMEPROC = ?extern fn (GLuint, GLenum, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) void;
pub const PFNGLUNIFORMSUBROUTINESUIVPROC = ?extern fn (GLenum, GLsizei, [*c]const GLuint) void;
pub const PFNGLGETUNIFORMSUBROUTINEUIVPROC = ?extern fn (GLenum, GLint, [*c]GLuint) void;
pub const PFNGLGETPROGRAMSTAGEIVPROC = ?extern fn (GLuint, GLenum, GLenum, [*c]GLint) void;
pub const PFNGLPATCHPARAMETERIPROC = ?extern fn (GLenum, GLint) void;
pub const PFNGLPATCHPARAMETERFVPROC = ?extern fn (GLenum, [*c]const GLfloat) void;
pub const PFNGLBINDTRANSFORMFEEDBACKPROC = ?extern fn (GLenum, GLuint) void;
pub const PFNGLDELETETRANSFORMFEEDBACKSPROC = ?extern fn (GLsizei, [*c]const GLuint) void;
pub const PFNGLGENTRANSFORMFEEDBACKSPROC = ?extern fn (GLsizei, [*c]GLuint) void;
pub const PFNGLISTRANSFORMFEEDBACKPROC = ?extern fn (GLuint) GLboolean;
pub const PFNGLPAUSETRANSFORMFEEDBACKPROC = ?extern fn () void;
pub const PFNGLRESUMETRANSFORMFEEDBACKPROC = ?extern fn () void;
pub const PFNGLDRAWTRANSFORMFEEDBACKPROC = ?extern fn (GLenum, GLuint) void;
pub const PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC = ?extern fn (GLenum, GLuint, GLuint) void;
pub const PFNGLBEGINQUERYINDEXEDPROC = ?extern fn (GLenum, GLuint, GLuint) void;
pub const PFNGLENDQUERYINDEXEDPROC = ?extern fn (GLenum, GLuint) void;
pub const PFNGLGETQUERYINDEXEDIVPROC = ?extern fn (GLenum, GLuint, GLenum, [*c]GLint) void;
pub const PFNGLRELEASESHADERCOMPILERPROC = ?extern fn () void;
pub const PFNGLSHADERBINARYPROC = ?extern fn (GLsizei, [*c]const GLuint, GLenum, ?*const c_void, GLsizei) void;
pub const PFNGLGETSHADERPRECISIONFORMATPROC = ?extern fn (GLenum, GLenum, [*c]GLint, [*c]GLint) void;
pub const PFNGLDEPTHRANGEFPROC = ?extern fn (GLfloat, GLfloat) void;
pub const PFNGLCLEARDEPTHFPROC = ?extern fn (GLfloat) void;
pub const PFNGLGETPROGRAMBINARYPROC = ?extern fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLenum, ?*c_void) void;
pub const PFNGLPROGRAMBINARYPROC = ?extern fn (GLuint, GLenum, ?*const c_void, GLsizei) void;
pub const PFNGLPROGRAMPARAMETERIPROC = ?extern fn (GLuint, GLenum, GLint) void;
pub const PFNGLUSEPROGRAMSTAGESPROC = ?extern fn (GLuint, GLbitfield, GLuint) void;
pub const PFNGLACTIVESHADERPROGRAMPROC = ?extern fn (GLuint, GLuint) void;
pub const PFNGLCREATESHADERPROGRAMVPROC = ?extern fn (GLenum, GLsizei, [*c]const ([*c]const GLchar)) GLuint;
pub const PFNGLBINDPROGRAMPIPELINEPROC = ?extern fn (GLuint) void;
pub const PFNGLDELETEPROGRAMPIPELINESPROC = ?extern fn (GLsizei, [*c]const GLuint) void;
pub const PFNGLGENPROGRAMPIPELINESPROC = ?extern fn (GLsizei, [*c]GLuint) void;
pub const PFNGLISPROGRAMPIPELINEPROC = ?extern fn (GLuint) GLboolean;
pub const PFNGLGETPROGRAMPIPELINEIVPROC = ?extern fn (GLuint, GLenum, [*c]GLint) void;
pub const PFNGLPROGRAMUNIFORM1IPROC = ?extern fn (GLuint, GLint, GLint) void;
pub const PFNGLPROGRAMUNIFORM1IVPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLint) void;
pub const PFNGLPROGRAMUNIFORM1FPROC = ?extern fn (GLuint, GLint, GLfloat) void;
pub const PFNGLPROGRAMUNIFORM1FVPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLfloat) void;
pub const PFNGLPROGRAMUNIFORM1DPROC = ?extern fn (GLuint, GLint, GLdouble) void;
pub const PFNGLPROGRAMUNIFORM1DVPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLdouble) void;
pub const PFNGLPROGRAMUNIFORM1UIPROC = ?extern fn (GLuint, GLint, GLuint) void;
pub const PFNGLPROGRAMUNIFORM1UIVPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLuint) void;
pub const PFNGLPROGRAMUNIFORM2IPROC = ?extern fn (GLuint, GLint, GLint, GLint) void;
pub const PFNGLPROGRAMUNIFORM2IVPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLint) void;
pub const PFNGLPROGRAMUNIFORM2FPROC = ?extern fn (GLuint, GLint, GLfloat, GLfloat) void;
pub const PFNGLPROGRAMUNIFORM2FVPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLfloat) void;
pub const PFNGLPROGRAMUNIFORM2DPROC = ?extern fn (GLuint, GLint, GLdouble, GLdouble) void;
pub const PFNGLPROGRAMUNIFORM2DVPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLdouble) void;
pub const PFNGLPROGRAMUNIFORM2UIPROC = ?extern fn (GLuint, GLint, GLuint, GLuint) void;
pub const PFNGLPROGRAMUNIFORM2UIVPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLuint) void;
pub const PFNGLPROGRAMUNIFORM3IPROC = ?extern fn (GLuint, GLint, GLint, GLint, GLint) void;
pub const PFNGLPROGRAMUNIFORM3IVPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLint) void;
pub const PFNGLPROGRAMUNIFORM3FPROC = ?extern fn (GLuint, GLint, GLfloat, GLfloat, GLfloat) void;
pub const PFNGLPROGRAMUNIFORM3FVPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLfloat) void;
pub const PFNGLPROGRAMUNIFORM3DPROC = ?extern fn (GLuint, GLint, GLdouble, GLdouble, GLdouble) void;
pub const PFNGLPROGRAMUNIFORM3DVPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLdouble) void;
pub const PFNGLPROGRAMUNIFORM3UIPROC = ?extern fn (GLuint, GLint, GLuint, GLuint, GLuint) void;
pub const PFNGLPROGRAMUNIFORM3UIVPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLuint) void;
pub const PFNGLPROGRAMUNIFORM4IPROC = ?extern fn (GLuint, GLint, GLint, GLint, GLint, GLint) void;
pub const PFNGLPROGRAMUNIFORM4IVPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLint) void;
pub const PFNGLPROGRAMUNIFORM4FPROC = ?extern fn (GLuint, GLint, GLfloat, GLfloat, GLfloat, GLfloat) void;
pub const PFNGLPROGRAMUNIFORM4FVPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLfloat) void;
pub const PFNGLPROGRAMUNIFORM4DPROC = ?extern fn (GLuint, GLint, GLdouble, GLdouble, GLdouble, GLdouble) void;
pub const PFNGLPROGRAMUNIFORM4DVPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLdouble) void;
pub const PFNGLPROGRAMUNIFORM4UIPROC = ?extern fn (GLuint, GLint, GLuint, GLuint, GLuint, GLuint) void;
pub const PFNGLPROGRAMUNIFORM4UIVPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLuint) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2FVPROC = ?extern fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3FVPROC = ?extern fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4FVPROC = ?extern fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2DVPROC = ?extern fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3DVPROC = ?extern fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4DVPROC = ?extern fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC = ?extern fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC = ?extern fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC = ?extern fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC = ?extern fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC = ?extern fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC = ?extern fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC = ?extern fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC = ?extern fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC = ?extern fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC = ?extern fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC = ?extern fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC = ?extern fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) void;
pub const PFNGLVALIDATEPROGRAMPIPELINEPROC = ?extern fn (GLuint) void;
pub const PFNGLGETPROGRAMPIPELINEINFOLOGPROC = ?extern fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) void;
pub const PFNGLVERTEXATTRIBL1DPROC = ?extern fn (GLuint, GLdouble) void;
pub const PFNGLVERTEXATTRIBL2DPROC = ?extern fn (GLuint, GLdouble, GLdouble) void;
pub const PFNGLVERTEXATTRIBL3DPROC = ?extern fn (GLuint, GLdouble, GLdouble, GLdouble) void;
pub const PFNGLVERTEXATTRIBL4DPROC = ?extern fn (GLuint, GLdouble, GLdouble, GLdouble, GLdouble) void;
pub const PFNGLVERTEXATTRIBL1DVPROC = ?extern fn (GLuint, [*c]const GLdouble) void;
pub const PFNGLVERTEXATTRIBL2DVPROC = ?extern fn (GLuint, [*c]const GLdouble) void;
pub const PFNGLVERTEXATTRIBL3DVPROC = ?extern fn (GLuint, [*c]const GLdouble) void;
pub const PFNGLVERTEXATTRIBL4DVPROC = ?extern fn (GLuint, [*c]const GLdouble) void;
pub const PFNGLVERTEXATTRIBLPOINTERPROC = ?extern fn (GLuint, GLint, GLenum, GLsizei, ?*const c_void) void;
pub const PFNGLGETVERTEXATTRIBLDVPROC = ?extern fn (GLuint, GLenum, [*c]GLdouble) void;
pub const PFNGLVIEWPORTARRAYVPROC = ?extern fn (GLuint, GLsizei, [*c]const GLfloat) void;
pub const PFNGLVIEWPORTINDEXEDFPROC = ?extern fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat) void;
pub const PFNGLVIEWPORTINDEXEDFVPROC = ?extern fn (GLuint, [*c]const GLfloat) void;
pub const PFNGLSCISSORARRAYVPROC = ?extern fn (GLuint, GLsizei, [*c]const GLint) void;
pub const PFNGLSCISSORINDEXEDPROC = ?extern fn (GLuint, GLint, GLint, GLsizei, GLsizei) void;
pub const PFNGLSCISSORINDEXEDVPROC = ?extern fn (GLuint, [*c]const GLint) void;
pub const PFNGLDEPTHRANGEARRAYVPROC = ?extern fn (GLuint, GLsizei, [*c]const GLdouble) void;
pub const PFNGLDEPTHRANGEINDEXEDPROC = ?extern fn (GLuint, GLdouble, GLdouble) void;
pub const PFNGLGETFLOATI_VPROC = ?extern fn (GLenum, GLuint, [*c]GLfloat) void;
pub const PFNGLGETDOUBLEI_VPROC = ?extern fn (GLenum, GLuint, [*c]GLdouble) void;
pub const PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC = ?extern fn (GLenum, GLint, GLsizei, GLsizei, GLuint) void;
pub const PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC = ?extern fn (GLenum, GLsizei, GLenum, ?*const c_void, GLsizei, GLuint) void;
pub const PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC = ?extern fn (GLenum, GLsizei, GLenum, ?*const c_void, GLsizei, GLint, GLuint) void;
pub const PFNGLGETINTERNALFORMATIVPROC = ?extern fn (GLenum, GLenum, GLenum, GLsizei, [*c]GLint) void;
pub const PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC = ?extern fn (GLuint, GLuint, GLenum, [*c]GLint) void;
pub const PFNGLBINDIMAGETEXTUREPROC = ?extern fn (GLuint, GLuint, GLint, GLboolean, GLint, GLenum, GLenum) void;
pub const PFNGLMEMORYBARRIERPROC = ?extern fn (GLbitfield) void;
pub const PFNGLTEXSTORAGE1DPROC = ?extern fn (GLenum, GLsizei, GLenum, GLsizei) void;
pub const PFNGLTEXSTORAGE2DPROC = ?extern fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) void;
pub const PFNGLTEXSTORAGE3DPROC = ?extern fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei) void;
pub const PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC = ?extern fn (GLenum, GLuint, GLsizei) void;
pub const PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC = ?extern fn (GLenum, GLuint, GLuint, GLsizei) void;
pub const GLDEBUGPROC = ?extern fn (GLenum, GLenum, GLuint, GLenum, GLsizei, [*c]const GLchar, ?*const c_void) void;
pub const PFNGLCLEARBUFFERDATAPROC = ?extern fn (GLenum, GLenum, GLenum, GLenum, ?*const c_void) void;
pub const PFNGLCLEARBUFFERSUBDATAPROC = ?extern fn (GLenum, GLenum, GLintptr, GLsizeiptr, GLenum, GLenum, ?*const c_void) void;
pub const PFNGLDISPATCHCOMPUTEPROC = ?extern fn (GLuint, GLuint, GLuint) void;
pub const PFNGLDISPATCHCOMPUTEINDIRECTPROC = ?extern fn (GLintptr) void;
pub const PFNGLCOPYIMAGESUBDATAPROC = ?extern fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) void;
pub const PFNGLFRAMEBUFFERPARAMETERIPROC = ?extern fn (GLenum, GLenum, GLint) void;
pub const PFNGLGETFRAMEBUFFERPARAMETERIVPROC = ?extern fn (GLenum, GLenum, [*c]GLint) void;
pub const PFNGLGETINTERNALFORMATI64VPROC = ?extern fn (GLenum, GLenum, GLenum, GLsizei, [*c]GLint64) void;
pub const PFNGLINVALIDATETEXSUBIMAGEPROC = ?extern fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) void;
pub const PFNGLINVALIDATETEXIMAGEPROC = ?extern fn (GLuint, GLint) void;
pub const PFNGLINVALIDATEBUFFERSUBDATAPROC = ?extern fn (GLuint, GLintptr, GLsizeiptr) void;
pub const PFNGLINVALIDATEBUFFERDATAPROC = ?extern fn (GLuint) void;
pub const PFNGLINVALIDATEFRAMEBUFFERPROC = ?extern fn (GLenum, GLsizei, [*c]const GLenum) void;
pub const PFNGLINVALIDATESUBFRAMEBUFFERPROC = ?extern fn (GLenum, GLsizei, [*c]const GLenum, GLint, GLint, GLsizei, GLsizei) void;
pub const PFNGLMULTIDRAWARRAYSINDIRECTPROC = ?extern fn (GLenum, ?*const c_void, GLsizei, GLsizei) void;
pub const PFNGLMULTIDRAWELEMENTSINDIRECTPROC = ?extern fn (GLenum, GLenum, ?*const c_void, GLsizei, GLsizei) void;
pub const PFNGLGETPROGRAMINTERFACEIVPROC = ?extern fn (GLuint, GLenum, GLenum, [*c]GLint) void;
pub const PFNGLGETPROGRAMRESOURCEINDEXPROC = ?extern fn (GLuint, GLenum, [*c]const GLchar) GLuint;
pub const PFNGLGETPROGRAMRESOURCENAMEPROC = ?extern fn (GLuint, GLenum, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) void;
pub const PFNGLGETPROGRAMRESOURCEIVPROC = ?extern fn (GLuint, GLenum, GLuint, GLsizei, [*c]const GLenum, GLsizei, [*c]GLsizei, [*c]GLint) void;
pub const PFNGLGETPROGRAMRESOURCELOCATIONPROC = ?extern fn (GLuint, GLenum, [*c]const GLchar) GLint;
pub const PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC = ?extern fn (GLuint, GLenum, [*c]const GLchar) GLint;
pub const PFNGLSHADERSTORAGEBLOCKBINDINGPROC = ?extern fn (GLuint, GLuint, GLuint) void;
pub const PFNGLTEXBUFFERRANGEPROC = ?extern fn (GLenum, GLenum, GLuint, GLintptr, GLsizeiptr) void;
pub const PFNGLTEXSTORAGE2DMULTISAMPLEPROC = ?extern fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean) void;
pub const PFNGLTEXSTORAGE3DMULTISAMPLEPROC = ?extern fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean) void;
pub const PFNGLTEXTUREVIEWPROC = ?extern fn (GLuint, GLenum, GLuint, GLenum, GLuint, GLuint, GLuint, GLuint) void;
pub const PFNGLBINDVERTEXBUFFERPROC = ?extern fn (GLuint, GLuint, GLintptr, GLsizei) void;
pub const PFNGLVERTEXATTRIBFORMATPROC = ?extern fn (GLuint, GLint, GLenum, GLboolean, GLuint) void;
pub const PFNGLVERTEXATTRIBIFORMATPROC = ?extern fn (GLuint, GLint, GLenum, GLuint) void;
pub const PFNGLVERTEXATTRIBLFORMATPROC = ?extern fn (GLuint, GLint, GLenum, GLuint) void;
pub const PFNGLVERTEXATTRIBBINDINGPROC = ?extern fn (GLuint, GLuint) void;
pub const PFNGLVERTEXBINDINGDIVISORPROC = ?extern fn (GLuint, GLuint) void;
pub const PFNGLDEBUGMESSAGECONTROLPROC = ?extern fn (GLenum, GLenum, GLenum, GLsizei, [*c]const GLuint, GLboolean) void;
pub const PFNGLDEBUGMESSAGEINSERTPROC = ?extern fn (GLenum, GLenum, GLuint, GLenum, GLsizei, [*c]const GLchar) void;
pub const PFNGLDEBUGMESSAGECALLBACKPROC = ?extern fn (GLDEBUGPROC, ?*const c_void) void;
pub const PFNGLGETDEBUGMESSAGELOGPROC = ?extern fn (GLuint, GLsizei, [*c]GLenum, [*c]GLenum, [*c]GLuint, [*c]GLenum, [*c]GLsizei, [*c]GLchar) GLuint;
pub const PFNGLPUSHDEBUGGROUPPROC = ?extern fn (GLenum, GLuint, GLsizei, [*c]const GLchar) void;
pub const PFNGLPOPDEBUGGROUPPROC = ?extern fn () void;
pub const PFNGLOBJECTLABELPROC = ?extern fn (GLenum, GLuint, GLsizei, [*c]const GLchar) void;
pub const PFNGLGETOBJECTLABELPROC = ?extern fn (GLenum, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) void;
pub const PFNGLOBJECTPTRLABELPROC = ?extern fn (?*const c_void, GLsizei, [*c]const GLchar) void;
pub const PFNGLGETOBJECTPTRLABELPROC = ?extern fn (?*const c_void, GLsizei, [*c]GLsizei, [*c]GLchar) void;
pub const PFNGLBUFFERSTORAGEPROC = ?extern fn (GLenum, GLsizeiptr, ?*const c_void, GLbitfield) void;
pub const PFNGLCLEARTEXIMAGEPROC = ?extern fn (GLuint, GLint, GLenum, GLenum, ?*const c_void) void;
pub const PFNGLCLEARTEXSUBIMAGEPROC = ?extern fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void) void;
pub const PFNGLBINDBUFFERSBASEPROC = ?extern fn (GLenum, GLuint, GLsizei, [*c]const GLuint) void;
pub const PFNGLBINDBUFFERSRANGEPROC = ?extern fn (GLenum, GLuint, GLsizei, [*c]const GLuint, [*c]const GLintptr, [*c]const GLsizeiptr) void;
pub const PFNGLBINDTEXTURESPROC = ?extern fn (GLuint, GLsizei, [*c]const GLuint) void;
pub const PFNGLBINDSAMPLERSPROC = ?extern fn (GLuint, GLsizei, [*c]const GLuint) void;
pub const PFNGLBINDIMAGETEXTURESPROC = ?extern fn (GLuint, GLsizei, [*c]const GLuint) void;
pub const PFNGLBINDVERTEXBUFFERSPROC = ?extern fn (GLuint, GLsizei, [*c]const GLuint, [*c]const GLintptr, [*c]const GLsizei) void;
pub const PFNGLCLIPCONTROLPROC = ?extern fn (GLenum, GLenum) void;
pub const PFNGLCREATETRANSFORMFEEDBACKSPROC = ?extern fn (GLsizei, [*c]GLuint) void;
pub const PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC = ?extern fn (GLuint, GLuint, GLuint) void;
pub const PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC = ?extern fn (GLuint, GLuint, GLuint, GLintptr, GLsizeiptr) void;
pub const PFNGLGETTRANSFORMFEEDBACKIVPROC = ?extern fn (GLuint, GLenum, [*c]GLint) void;
pub const PFNGLGETTRANSFORMFEEDBACKI_VPROC = ?extern fn (GLuint, GLenum, GLuint, [*c]GLint) void;
pub const PFNGLGETTRANSFORMFEEDBACKI64_VPROC = ?extern fn (GLuint, GLenum, GLuint, [*c]GLint64) void;
pub const PFNGLCREATEBUFFERSPROC = ?extern fn (GLsizei, [*c]GLuint) void;
pub const PFNGLNAMEDBUFFERSTORAGEPROC = ?extern fn (GLuint, GLsizeiptr, ?*const c_void, GLbitfield) void;
pub const PFNGLNAMEDBUFFERDATAPROC = ?extern fn (GLuint, GLsizeiptr, ?*const c_void, GLenum) void;
pub const PFNGLNAMEDBUFFERSUBDATAPROC = ?extern fn (GLuint, GLintptr, GLsizeiptr, ?*const c_void) void;
pub const PFNGLCOPYNAMEDBUFFERSUBDATAPROC = ?extern fn (GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr) void;
pub const PFNGLCLEARNAMEDBUFFERDATAPROC = ?extern fn (GLuint, GLenum, GLenum, GLenum, ?*const c_void) void;
pub const PFNGLCLEARNAMEDBUFFERSUBDATAPROC = ?extern fn (GLuint, GLenum, GLintptr, GLsizeiptr, GLenum, GLenum, ?*const c_void) void;
pub const PFNGLMAPNAMEDBUFFERPROC = ?extern fn (GLuint, GLenum) ?*c_void;
pub const PFNGLMAPNAMEDBUFFERRANGEPROC = ?extern fn (GLuint, GLintptr, GLsizeiptr, GLbitfield) ?*c_void;
pub const PFNGLUNMAPNAMEDBUFFERPROC = ?extern fn (GLuint) GLboolean;
pub const PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC = ?extern fn (GLuint, GLintptr, GLsizeiptr) void;
pub const PFNGLGETNAMEDBUFFERPARAMETERIVPROC = ?extern fn (GLuint, GLenum, [*c]GLint) void;
pub const PFNGLGETNAMEDBUFFERPARAMETERI64VPROC = ?extern fn (GLuint, GLenum, [*c]GLint64) void;
pub const PFNGLGETNAMEDBUFFERPOINTERVPROC = ?extern fn (GLuint, GLenum, [*c](?*c_void)) void;
pub const PFNGLGETNAMEDBUFFERSUBDATAPROC = ?extern fn (GLuint, GLintptr, GLsizeiptr, ?*c_void) void;
pub const PFNGLCREATEFRAMEBUFFERSPROC = ?extern fn (GLsizei, [*c]GLuint) void;
pub const PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC = ?extern fn (GLuint, GLenum, GLenum, GLuint) void;
pub const PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC = ?extern fn (GLuint, GLenum, GLint) void;
pub const PFNGLNAMEDFRAMEBUFFERTEXTUREPROC = ?extern fn (GLuint, GLenum, GLuint, GLint) void;
pub const PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC = ?extern fn (GLuint, GLenum, GLuint, GLint, GLint) void;
pub const PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC = ?extern fn (GLuint, GLenum) void;
pub const PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC = ?extern fn (GLuint, GLsizei, [*c]const GLenum) void;
pub const PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC = ?extern fn (GLuint, GLenum) void;
pub const PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC = ?extern fn (GLuint, GLsizei, [*c]const GLenum) void;
pub const PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC = ?extern fn (GLuint, GLsizei, [*c]const GLenum, GLint, GLint, GLsizei, GLsizei) void;
pub const PFNGLCLEARNAMEDFRAMEBUFFERIVPROC = ?extern fn (GLuint, GLenum, GLint, [*c]const GLint) void;
pub const PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC = ?extern fn (GLuint, GLenum, GLint, [*c]const GLuint) void;
pub const PFNGLCLEARNAMEDFRAMEBUFFERFVPROC = ?extern fn (GLuint, GLenum, GLint, [*c]const GLfloat) void;
pub const PFNGLCLEARNAMEDFRAMEBUFFERFIPROC = ?extern fn (GLuint, GLenum, GLint, GLfloat, GLint) void;
pub const PFNGLBLITNAMEDFRAMEBUFFERPROC = ?extern fn (GLuint, GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) void;
pub const PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC = ?extern fn (GLuint, GLenum) GLenum;
pub const PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC = ?extern fn (GLuint, GLenum, [*c]GLint) void;
pub const PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC = ?extern fn (GLuint, GLenum, GLenum, [*c]GLint) void;
pub const PFNGLCREATERENDERBUFFERSPROC = ?extern fn (GLsizei, [*c]GLuint) void;
pub const PFNGLNAMEDRENDERBUFFERSTORAGEPROC = ?extern fn (GLuint, GLenum, GLsizei, GLsizei) void;
pub const PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC = ?extern fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei) void;
pub const PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC = ?extern fn (GLuint, GLenum, [*c]GLint) void;
pub const PFNGLCREATETEXTURESPROC = ?extern fn (GLenum, GLsizei, [*c]GLuint) void;
pub const PFNGLTEXTUREBUFFERPROC = ?extern fn (GLuint, GLenum, GLuint) void;
pub const PFNGLTEXTUREBUFFERRANGEPROC = ?extern fn (GLuint, GLenum, GLuint, GLintptr, GLsizeiptr) void;
pub const PFNGLTEXTURESTORAGE1DPROC = ?extern fn (GLuint, GLsizei, GLenum, GLsizei) void;
pub const PFNGLTEXTURESTORAGE2DPROC = ?extern fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei) void;
pub const PFNGLTEXTURESTORAGE3DPROC = ?extern fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei) void;
pub const PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC = ?extern fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLboolean) void;
pub const PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC = ?extern fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean) void;
pub const PFNGLTEXTURESUBIMAGE1DPROC = ?extern fn (GLuint, GLint, GLint, GLsizei, GLenum, GLenum, ?*const c_void) void;
pub const PFNGLTEXTURESUBIMAGE2DPROC = ?extern fn (GLuint, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void) void;
pub const PFNGLTEXTURESUBIMAGE3DPROC = ?extern fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void) void;
pub const PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC = ?extern fn (GLuint, GLint, GLint, GLsizei, GLenum, GLsizei, ?*const c_void) void;
pub const PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC = ?extern fn (GLuint, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, ?*const c_void) void;
pub const PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC = ?extern fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, ?*const c_void) void;
pub const PFNGLCOPYTEXTURESUBIMAGE1DPROC = ?extern fn (GLuint, GLint, GLint, GLint, GLint, GLsizei) void;
pub const PFNGLCOPYTEXTURESUBIMAGE2DPROC = ?extern fn (GLuint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) void;
pub const PFNGLCOPYTEXTURESUBIMAGE3DPROC = ?extern fn (GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) void;
pub const PFNGLTEXTUREPARAMETERFPROC = ?extern fn (GLuint, GLenum, GLfloat) void;
pub const PFNGLTEXTUREPARAMETERFVPROC = ?extern fn (GLuint, GLenum, [*c]const GLfloat) void;
pub const PFNGLTEXTUREPARAMETERIPROC = ?extern fn (GLuint, GLenum, GLint) void;
pub const PFNGLTEXTUREPARAMETERIIVPROC = ?extern fn (GLuint, GLenum, [*c]const GLint) void;
pub const PFNGLTEXTUREPARAMETERIUIVPROC = ?extern fn (GLuint, GLenum, [*c]const GLuint) void;
pub const PFNGLTEXTUREPARAMETERIVPROC = ?extern fn (GLuint, GLenum, [*c]const GLint) void;
pub const PFNGLGENERATETEXTUREMIPMAPPROC = ?extern fn (GLuint) void;
pub const PFNGLBINDTEXTUREUNITPROC = ?extern fn (GLuint, GLuint) void;
pub const PFNGLGETTEXTUREIMAGEPROC = ?extern fn (GLuint, GLint, GLenum, GLenum, GLsizei, ?*c_void) void;
pub const PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC = ?extern fn (GLuint, GLint, GLsizei, ?*c_void) void;
pub const PFNGLGETTEXTURELEVELPARAMETERFVPROC = ?extern fn (GLuint, GLint, GLenum, [*c]GLfloat) void;
pub const PFNGLGETTEXTURELEVELPARAMETERIVPROC = ?extern fn (GLuint, GLint, GLenum, [*c]GLint) void;
pub const PFNGLGETTEXTUREPARAMETERFVPROC = ?extern fn (GLuint, GLenum, [*c]GLfloat) void;
pub const PFNGLGETTEXTUREPARAMETERIIVPROC = ?extern fn (GLuint, GLenum, [*c]GLint) void;
pub const PFNGLGETTEXTUREPARAMETERIUIVPROC = ?extern fn (GLuint, GLenum, [*c]GLuint) void;
pub const PFNGLGETTEXTUREPARAMETERIVPROC = ?extern fn (GLuint, GLenum, [*c]GLint) void;
pub const PFNGLCREATEVERTEXARRAYSPROC = ?extern fn (GLsizei, [*c]GLuint) void;
pub const PFNGLDISABLEVERTEXARRAYATTRIBPROC = ?extern fn (GLuint, GLuint) void;
pub const PFNGLENABLEVERTEXARRAYATTRIBPROC = ?extern fn (GLuint, GLuint) void;
pub const PFNGLVERTEXARRAYELEMENTBUFFERPROC = ?extern fn (GLuint, GLuint) void;
pub const PFNGLVERTEXARRAYVERTEXBUFFERPROC = ?extern fn (GLuint, GLuint, GLuint, GLintptr, GLsizei) void;
pub const PFNGLVERTEXARRAYVERTEXBUFFERSPROC = ?extern fn (GLuint, GLuint, GLsizei, [*c]const GLuint, [*c]const GLintptr, [*c]const GLsizei) void;
pub const PFNGLVERTEXARRAYATTRIBBINDINGPROC = ?extern fn (GLuint, GLuint, GLuint) void;
pub const PFNGLVERTEXARRAYATTRIBFORMATPROC = ?extern fn (GLuint, GLuint, GLint, GLenum, GLboolean, GLuint) void;
pub const PFNGLVERTEXARRAYATTRIBIFORMATPROC = ?extern fn (GLuint, GLuint, GLint, GLenum, GLuint) void;
pub const PFNGLVERTEXARRAYATTRIBLFORMATPROC = ?extern fn (GLuint, GLuint, GLint, GLenum, GLuint) void;
pub const PFNGLVERTEXARRAYBINDINGDIVISORPROC = ?extern fn (GLuint, GLuint, GLuint) void;
pub const PFNGLGETVERTEXARRAYIVPROC = ?extern fn (GLuint, GLenum, [*c]GLint) void;
pub const PFNGLGETVERTEXARRAYINDEXEDIVPROC = ?extern fn (GLuint, GLuint, GLenum, [*c]GLint) void;
pub const PFNGLGETVERTEXARRAYINDEXED64IVPROC = ?extern fn (GLuint, GLuint, GLenum, [*c]GLint64) void;
pub const PFNGLCREATESAMPLERSPROC = ?extern fn (GLsizei, [*c]GLuint) void;
pub const PFNGLCREATEPROGRAMPIPELINESPROC = ?extern fn (GLsizei, [*c]GLuint) void;
pub const PFNGLCREATEQUERIESPROC = ?extern fn (GLenum, GLsizei, [*c]GLuint) void;
pub const PFNGLGETQUERYBUFFEROBJECTI64VPROC = ?extern fn (GLuint, GLuint, GLenum, GLintptr) void;
pub const PFNGLGETQUERYBUFFEROBJECTIVPROC = ?extern fn (GLuint, GLuint, GLenum, GLintptr) void;
pub const PFNGLGETQUERYBUFFEROBJECTUI64VPROC = ?extern fn (GLuint, GLuint, GLenum, GLintptr) void;
pub const PFNGLGETQUERYBUFFEROBJECTUIVPROC = ?extern fn (GLuint, GLuint, GLenum, GLintptr) void;
pub const PFNGLMEMORYBARRIERBYREGIONPROC = ?extern fn (GLbitfield) void;
pub const PFNGLGETTEXTURESUBIMAGEPROC = ?extern fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, GLsizei, ?*c_void) void;
pub const PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC = ?extern fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, ?*c_void) void;
pub const PFNGLGETGRAPHICSRESETSTATUSPROC = ?extern fn () GLenum;
pub const PFNGLGETNCOMPRESSEDTEXIMAGEPROC = ?extern fn (GLenum, GLint, GLsizei, ?*c_void) void;
pub const PFNGLGETNTEXIMAGEPROC = ?extern fn (GLenum, GLint, GLenum, GLenum, GLsizei, ?*c_void) void;
pub const PFNGLGETNUNIFORMDVPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]GLdouble) void;
pub const PFNGLGETNUNIFORMFVPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]GLfloat) void;
pub const PFNGLGETNUNIFORMIVPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]GLint) void;
pub const PFNGLGETNUNIFORMUIVPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]GLuint) void;
pub const PFNGLREADNPIXELSPROC = ?extern fn (GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, ?*c_void) void;
pub const PFNGLGETNMAPDVPROC = ?extern fn (GLenum, GLenum, GLsizei, [*c]GLdouble) void;
pub const PFNGLGETNMAPFVPROC = ?extern fn (GLenum, GLenum, GLsizei, [*c]GLfloat) void;
pub const PFNGLGETNMAPIVPROC = ?extern fn (GLenum, GLenum, GLsizei, [*c]GLint) void;
pub const PFNGLGETNPIXELMAPFVPROC = ?extern fn (GLenum, GLsizei, [*c]GLfloat) void;
pub const PFNGLGETNPIXELMAPUIVPROC = ?extern fn (GLenum, GLsizei, [*c]GLuint) void;
pub const PFNGLGETNPIXELMAPUSVPROC = ?extern fn (GLenum, GLsizei, [*c]GLushort) void;
pub const PFNGLGETNPOLYGONSTIPPLEPROC = ?extern fn (GLsizei, [*c]GLubyte) void;
pub const PFNGLGETNCOLORTABLEPROC = ?extern fn (GLenum, GLenum, GLenum, GLsizei, ?*c_void) void;
pub const PFNGLGETNCONVOLUTIONFILTERPROC = ?extern fn (GLenum, GLenum, GLenum, GLsizei, ?*c_void) void;
pub const PFNGLGETNSEPARABLEFILTERPROC = ?extern fn (GLenum, GLenum, GLenum, GLsizei, ?*c_void, GLsizei, ?*c_void, ?*c_void) void;
pub const PFNGLGETNHISTOGRAMPROC = ?extern fn (GLenum, GLboolean, GLenum, GLenum, GLsizei, ?*c_void) void;
pub const PFNGLGETNMINMAXPROC = ?extern fn (GLenum, GLboolean, GLenum, GLenum, GLsizei, ?*c_void) void;
pub const PFNGLTEXTUREBARRIERPROC = ?extern fn () void;
pub const PFNGLSPECIALIZESHADERPROC = ?extern fn (GLuint, [*c]const GLchar, GLuint, [*c]const GLuint, [*c]const GLuint) void;
pub const PFNGLMULTIDRAWARRAYSINDIRECTCOUNTPROC = ?extern fn (GLenum, ?*const c_void, GLintptr, GLsizei, GLsizei) void;
pub const PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTPROC = ?extern fn (GLenum, GLenum, ?*const c_void, GLintptr, GLsizei, GLsizei) void;
pub const PFNGLPOLYGONOFFSETCLAMPPROC = ?extern fn (GLfloat, GLfloat, GLfloat) void;
pub const PFNGLPRIMITIVEBOUNDINGBOXARBPROC = ?extern fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) void;
pub const GLuint64EXT = u64;
pub const PFNGLGETTEXTUREHANDLEARBPROC = ?extern fn (GLuint) GLuint64;
pub const PFNGLGETTEXTURESAMPLERHANDLEARBPROC = ?extern fn (GLuint, GLuint) GLuint64;
pub const PFNGLMAKETEXTUREHANDLERESIDENTARBPROC = ?extern fn (GLuint64) void;
pub const PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC = ?extern fn (GLuint64) void;
pub const PFNGLGETIMAGEHANDLEARBPROC = ?extern fn (GLuint, GLint, GLboolean, GLint, GLenum) GLuint64;
pub const PFNGLMAKEIMAGEHANDLERESIDENTARBPROC = ?extern fn (GLuint64, GLenum) void;
pub const PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC = ?extern fn (GLuint64) void;
pub const PFNGLUNIFORMHANDLEUI64ARBPROC = ?extern fn (GLint, GLuint64) void;
pub const PFNGLUNIFORMHANDLEUI64VARBPROC = ?extern fn (GLint, GLsizei, [*c]const GLuint64) void;
pub const PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC = ?extern fn (GLuint, GLint, GLuint64) void;
pub const PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLuint64) void;
pub const PFNGLISTEXTUREHANDLERESIDENTARBPROC = ?extern fn (GLuint64) GLboolean;
pub const PFNGLISIMAGEHANDLERESIDENTARBPROC = ?extern fn (GLuint64) GLboolean;
pub const PFNGLVERTEXATTRIBL1UI64ARBPROC = ?extern fn (GLuint, GLuint64EXT) void;
pub const PFNGLVERTEXATTRIBL1UI64VARBPROC = ?extern fn (GLuint, [*c]const GLuint64EXT) void;
pub const PFNGLGETVERTEXATTRIBLUI64VARBPROC = ?extern fn (GLuint, GLenum, [*c]GLuint64EXT) void;
pub const struct__cl_context = @OpaqueType();
pub const struct__cl_event = @OpaqueType();
pub const PFNGLCREATESYNCFROMCLEVENTARBPROC = ?extern fn (?*struct__cl_context, ?*struct__cl_event, GLbitfield) GLsync;
pub const PFNGLCLAMPCOLORARBPROC = ?extern fn (GLenum, GLenum) void;
pub const PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC = ?extern fn (GLuint, GLuint, GLuint, GLuint, GLuint, GLuint) void;
pub const GLDEBUGPROCARB = ?extern fn (GLenum, GLenum, GLuint, GLenum, GLsizei, [*c]const GLchar, ?*const c_void) void;
pub const PFNGLDEBUGMESSAGECONTROLARBPROC = ?extern fn (GLenum, GLenum, GLenum, GLsizei, [*c]const GLuint, GLboolean) void;
pub const PFNGLDEBUGMESSAGEINSERTARBPROC = ?extern fn (GLenum, GLenum, GLuint, GLenum, GLsizei, [*c]const GLchar) void;
pub const PFNGLDEBUGMESSAGECALLBACKARBPROC = ?extern fn (GLDEBUGPROCARB, ?*const c_void) void;
pub const PFNGLGETDEBUGMESSAGELOGARBPROC = ?extern fn (GLuint, GLsizei, [*c]GLenum, [*c]GLenum, [*c]GLuint, [*c]GLenum, [*c]GLsizei, [*c]GLchar) GLuint;
pub const PFNGLDRAWBUFFERSARBPROC = ?extern fn (GLsizei, [*c]const GLenum) void;
pub const PFNGLBLENDEQUATIONIARBPROC = ?extern fn (GLuint, GLenum) void;
pub const PFNGLBLENDEQUATIONSEPARATEIARBPROC = ?extern fn (GLuint, GLenum, GLenum) void;
pub const PFNGLBLENDFUNCIARBPROC = ?extern fn (GLuint, GLenum, GLenum) void;
pub const PFNGLBLENDFUNCSEPARATEIARBPROC = ?extern fn (GLuint, GLenum, GLenum, GLenum, GLenum) void;
pub const PFNGLDRAWARRAYSINSTANCEDARBPROC = ?extern fn (GLenum, GLint, GLsizei, GLsizei) void;
pub const PFNGLDRAWELEMENTSINSTANCEDARBPROC = ?extern fn (GLenum, GLsizei, GLenum, ?*const c_void, GLsizei) void;
pub const PFNGLPROGRAMSTRINGARBPROC = ?extern fn (GLenum, GLenum, GLsizei, ?*const c_void) void;
pub const PFNGLBINDPROGRAMARBPROC = ?extern fn (GLenum, GLuint) void;
pub const PFNGLDELETEPROGRAMSARBPROC = ?extern fn (GLsizei, [*c]const GLuint) void;
pub const PFNGLGENPROGRAMSARBPROC = ?extern fn (GLsizei, [*c]GLuint) void;
pub const PFNGLPROGRAMENVPARAMETER4DARBPROC = ?extern fn (GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble) void;
pub const PFNGLPROGRAMENVPARAMETER4DVARBPROC = ?extern fn (GLenum, GLuint, [*c]const GLdouble) void;
pub const PFNGLPROGRAMENVPARAMETER4FARBPROC = ?extern fn (GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat) void;
pub const PFNGLPROGRAMENVPARAMETER4FVARBPROC = ?extern fn (GLenum, GLuint, [*c]const GLfloat) void;
pub const PFNGLPROGRAMLOCALPARAMETER4DARBPROC = ?extern fn (GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble) void;
pub const PFNGLPROGRAMLOCALPARAMETER4DVARBPROC = ?extern fn (GLenum, GLuint, [*c]const GLdouble) void;
pub const PFNGLPROGRAMLOCALPARAMETER4FARBPROC = ?extern fn (GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat) void;
pub const PFNGLPROGRAMLOCALPARAMETER4FVARBPROC = ?extern fn (GLenum, GLuint, [*c]const GLfloat) void;
pub const PFNGLGETPROGRAMENVPARAMETERDVARBPROC = ?extern fn (GLenum, GLuint, [*c]GLdouble) void;
pub const PFNGLGETPROGRAMENVPARAMETERFVARBPROC = ?extern fn (GLenum, GLuint, [*c]GLfloat) void;
pub const PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC = ?extern fn (GLenum, GLuint, [*c]GLdouble) void;
pub const PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC = ?extern fn (GLenum, GLuint, [*c]GLfloat) void;
pub const PFNGLGETPROGRAMIVARBPROC = ?extern fn (GLenum, GLenum, [*c]GLint) void;
pub const PFNGLGETPROGRAMSTRINGARBPROC = ?extern fn (GLenum, GLenum, ?*c_void) void;
pub const PFNGLISPROGRAMARBPROC = ?extern fn (GLuint) GLboolean;
pub const PFNGLPROGRAMPARAMETERIARBPROC = ?extern fn (GLuint, GLenum, GLint) void;
pub const PFNGLFRAMEBUFFERTEXTUREARBPROC = ?extern fn (GLenum, GLenum, GLuint, GLint) void;
pub const PFNGLFRAMEBUFFERTEXTURELAYERARBPROC = ?extern fn (GLenum, GLenum, GLuint, GLint, GLint) void;
pub const PFNGLFRAMEBUFFERTEXTUREFACEARBPROC = ?extern fn (GLenum, GLenum, GLuint, GLint, GLenum) void;
pub const PFNGLSPECIALIZESHADERARBPROC = ?extern fn (GLuint, [*c]const GLchar, GLuint, [*c]const GLuint, [*c]const GLuint) void;
pub const PFNGLUNIFORM1I64ARBPROC = ?extern fn (GLint, GLint64) void;
pub const PFNGLUNIFORM2I64ARBPROC = ?extern fn (GLint, GLint64, GLint64) void;
pub const PFNGLUNIFORM3I64ARBPROC = ?extern fn (GLint, GLint64, GLint64, GLint64) void;
pub const PFNGLUNIFORM4I64ARBPROC = ?extern fn (GLint, GLint64, GLint64, GLint64, GLint64) void;
pub const PFNGLUNIFORM1I64VARBPROC = ?extern fn (GLint, GLsizei, [*c]const GLint64) void;
pub const PFNGLUNIFORM2I64VARBPROC = ?extern fn (GLint, GLsizei, [*c]const GLint64) void;
pub const PFNGLUNIFORM3I64VARBPROC = ?extern fn (GLint, GLsizei, [*c]const GLint64) void;
pub const PFNGLUNIFORM4I64VARBPROC = ?extern fn (GLint, GLsizei, [*c]const GLint64) void;
pub const PFNGLUNIFORM1UI64ARBPROC = ?extern fn (GLint, GLuint64) void;
pub const PFNGLUNIFORM2UI64ARBPROC = ?extern fn (GLint, GLuint64, GLuint64) void;
pub const PFNGLUNIFORM3UI64ARBPROC = ?extern fn (GLint, GLuint64, GLuint64, GLuint64) void;
pub const PFNGLUNIFORM4UI64ARBPROC = ?extern fn (GLint, GLuint64, GLuint64, GLuint64, GLuint64) void;
pub const PFNGLUNIFORM1UI64VARBPROC = ?extern fn (GLint, GLsizei, [*c]const GLuint64) void;
pub const PFNGLUNIFORM2UI64VARBPROC = ?extern fn (GLint, GLsizei, [*c]const GLuint64) void;
pub const PFNGLUNIFORM3UI64VARBPROC = ?extern fn (GLint, GLsizei, [*c]const GLuint64) void;
pub const PFNGLUNIFORM4UI64VARBPROC = ?extern fn (GLint, GLsizei, [*c]const GLuint64) void;
pub const PFNGLGETUNIFORMI64VARBPROC = ?extern fn (GLuint, GLint, [*c]GLint64) void;
pub const PFNGLGETUNIFORMUI64VARBPROC = ?extern fn (GLuint, GLint, [*c]GLuint64) void;
pub const PFNGLGETNUNIFORMI64VARBPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]GLint64) void;
pub const PFNGLGETNUNIFORMUI64VARBPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]GLuint64) void;
pub const PFNGLPROGRAMUNIFORM1I64ARBPROC = ?extern fn (GLuint, GLint, GLint64) void;
pub const PFNGLPROGRAMUNIFORM2I64ARBPROC = ?extern fn (GLuint, GLint, GLint64, GLint64) void;
pub const PFNGLPROGRAMUNIFORM3I64ARBPROC = ?extern fn (GLuint, GLint, GLint64, GLint64, GLint64) void;
pub const PFNGLPROGRAMUNIFORM4I64ARBPROC = ?extern fn (GLuint, GLint, GLint64, GLint64, GLint64, GLint64) void;
pub const PFNGLPROGRAMUNIFORM1I64VARBPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLint64) void;
pub const PFNGLPROGRAMUNIFORM2I64VARBPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLint64) void;
pub const PFNGLPROGRAMUNIFORM3I64VARBPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLint64) void;
pub const PFNGLPROGRAMUNIFORM4I64VARBPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLint64) void;
pub const PFNGLPROGRAMUNIFORM1UI64ARBPROC = ?extern fn (GLuint, GLint, GLuint64) void;
pub const PFNGLPROGRAMUNIFORM2UI64ARBPROC = ?extern fn (GLuint, GLint, GLuint64, GLuint64) void;
pub const PFNGLPROGRAMUNIFORM3UI64ARBPROC = ?extern fn (GLuint, GLint, GLuint64, GLuint64, GLuint64) void;
pub const PFNGLPROGRAMUNIFORM4UI64ARBPROC = ?extern fn (GLuint, GLint, GLuint64, GLuint64, GLuint64, GLuint64) void;
pub const PFNGLPROGRAMUNIFORM1UI64VARBPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLuint64) void;
pub const PFNGLPROGRAMUNIFORM2UI64VARBPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLuint64) void;
pub const PFNGLPROGRAMUNIFORM3UI64VARBPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLuint64) void;
pub const PFNGLPROGRAMUNIFORM4UI64VARBPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLuint64) void;
pub const GLhalfARB = c_ushort;
pub const PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC = ?extern fn (GLenum, ?*const c_void, GLintptr, GLsizei, GLsizei) void;
pub const PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC = ?extern fn (GLenum, GLenum, ?*const c_void, GLintptr, GLsizei, GLsizei) void;
pub const PFNGLVERTEXATTRIBDIVISORARBPROC = ?extern fn (GLuint, GLuint) void;
pub const PFNGLCURRENTPALETTEMATRIXARBPROC = ?extern fn (GLint) void;
pub const PFNGLMATRIXINDEXUBVARBPROC = ?extern fn (GLint, [*c]const GLubyte) void;
pub const PFNGLMATRIXINDEXUSVARBPROC = ?extern fn (GLint, [*c]const GLushort) void;
pub const PFNGLMATRIXINDEXUIVARBPROC = ?extern fn (GLint, [*c]const GLuint) void;
pub const PFNGLMATRIXINDEXPOINTERARBPROC = ?extern fn (GLint, GLenum, GLsizei, ?*const c_void) void;
pub const PFNGLSAMPLECOVERAGEARBPROC = ?extern fn (GLfloat, GLboolean) void;
pub const PFNGLGENQUERIESARBPROC = ?extern fn (GLsizei, [*c]GLuint) void;
pub const PFNGLDELETEQUERIESARBPROC = ?extern fn (GLsizei, [*c]const GLuint) void;
pub const PFNGLISQUERYARBPROC = ?extern fn (GLuint) GLboolean;
pub const PFNGLBEGINQUERYARBPROC = ?extern fn (GLenum, GLuint) void;
pub const PFNGLENDQUERYARBPROC = ?extern fn (GLenum) void;
pub const PFNGLGETQUERYIVARBPROC = ?extern fn (GLenum, GLenum, [*c]GLint) void;
pub const PFNGLGETQUERYOBJECTIVARBPROC = ?extern fn (GLuint, GLenum, [*c]GLint) void;
pub const PFNGLGETQUERYOBJECTUIVARBPROC = ?extern fn (GLuint, GLenum, [*c]GLuint) void;
pub const PFNGLMAXSHADERCOMPILERTHREADSARBPROC = ?extern fn (GLuint) void;
pub const PFNGLPOINTPARAMETERFARBPROC = ?extern fn (GLenum, GLfloat) void;
pub const PFNGLPOINTPARAMETERFVARBPROC = ?extern fn (GLenum, [*c]const GLfloat) void;
pub const PFNGLGETGRAPHICSRESETSTATUSARBPROC = ?extern fn () GLenum;
pub const PFNGLGETNTEXIMAGEARBPROC = ?extern fn (GLenum, GLint, GLenum, GLenum, GLsizei, ?*c_void) void;
pub const PFNGLREADNPIXELSARBPROC = ?extern fn (GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, ?*c_void) void;
pub const PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC = ?extern fn (GLenum, GLint, GLsizei, ?*c_void) void;
pub const PFNGLGETNUNIFORMFVARBPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]GLfloat) void;
pub const PFNGLGETNUNIFORMIVARBPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]GLint) void;
pub const PFNGLGETNUNIFORMUIVARBPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]GLuint) void;
pub const PFNGLGETNUNIFORMDVARBPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]GLdouble) void;
pub const PFNGLGETNMAPDVARBPROC = ?extern fn (GLenum, GLenum, GLsizei, [*c]GLdouble) void;
pub const PFNGLGETNMAPFVARBPROC = ?extern fn (GLenum, GLenum, GLsizei, [*c]GLfloat) void;
pub const PFNGLGETNMAPIVARBPROC = ?extern fn (GLenum, GLenum, GLsizei, [*c]GLint) void;
pub const PFNGLGETNPIXELMAPFVARBPROC = ?extern fn (GLenum, GLsizei, [*c]GLfloat) void;
pub const PFNGLGETNPIXELMAPUIVARBPROC = ?extern fn (GLenum, GLsizei, [*c]GLuint) void;
pub const PFNGLGETNPIXELMAPUSVARBPROC = ?extern fn (GLenum, GLsizei, [*c]GLushort) void;
pub const PFNGLGETNPOLYGONSTIPPLEARBPROC = ?extern fn (GLsizei, [*c]GLubyte) void;
pub const PFNGLGETNCOLORTABLEARBPROC = ?extern fn (GLenum, GLenum, GLenum, GLsizei, ?*c_void) void;
pub const PFNGLGETNCONVOLUTIONFILTERARBPROC = ?extern fn (GLenum, GLenum, GLenum, GLsizei, ?*c_void) void;
pub const PFNGLGETNSEPARABLEFILTERARBPROC = ?extern fn (GLenum, GLenum, GLenum, GLsizei, ?*c_void, GLsizei, ?*c_void, ?*c_void) void;
pub const PFNGLGETNHISTOGRAMARBPROC = ?extern fn (GLenum, GLboolean, GLenum, GLenum, GLsizei, ?*c_void) void;
pub const PFNGLGETNMINMAXARBPROC = ?extern fn (GLenum, GLboolean, GLenum, GLenum, GLsizei, ?*c_void) void;
pub const PFNGLFRAMEBUFFERSAMPLELOCATIONSFVARBPROC = ?extern fn (GLenum, GLuint, GLsizei, [*c]const GLfloat) void;
pub const PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVARBPROC = ?extern fn (GLuint, GLuint, GLsizei, [*c]const GLfloat) void;
pub const PFNGLEVALUATEDEPTHVALUESARBPROC = ?extern fn () void;
pub const PFNGLMINSAMPLESHADINGARBPROC = ?extern fn (GLfloat) void;
pub const GLhandleARB = c_uint;
pub const GLcharARB = u8;
pub const PFNGLDELETEOBJECTARBPROC = ?extern fn (GLhandleARB) void;
pub const PFNGLGETHANDLEARBPROC = ?extern fn (GLenum) GLhandleARB;
pub const PFNGLDETACHOBJECTARBPROC = ?extern fn (GLhandleARB, GLhandleARB) void;
pub const PFNGLCREATESHADEROBJECTARBPROC = ?extern fn (GLenum) GLhandleARB;
pub const PFNGLSHADERSOURCEARBPROC = ?extern fn (GLhandleARB, GLsizei, [*c]([*c]const GLcharARB), [*c]const GLint) void;
pub const PFNGLCOMPILESHADERARBPROC = ?extern fn (GLhandleARB) void;
pub const PFNGLCREATEPROGRAMOBJECTARBPROC = ?extern fn () GLhandleARB;
pub const PFNGLATTACHOBJECTARBPROC = ?extern fn (GLhandleARB, GLhandleARB) void;
pub const PFNGLLINKPROGRAMARBPROC = ?extern fn (GLhandleARB) void;
pub const PFNGLUSEPROGRAMOBJECTARBPROC = ?extern fn (GLhandleARB) void;
pub const PFNGLVALIDATEPROGRAMARBPROC = ?extern fn (GLhandleARB) void;
pub const PFNGLUNIFORM1FARBPROC = ?extern fn (GLint, GLfloat) void;
pub const PFNGLUNIFORM2FARBPROC = ?extern fn (GLint, GLfloat, GLfloat) void;
pub const PFNGLUNIFORM3FARBPROC = ?extern fn (GLint, GLfloat, GLfloat, GLfloat) void;
pub const PFNGLUNIFORM4FARBPROC = ?extern fn (GLint, GLfloat, GLfloat, GLfloat, GLfloat) void;
pub const PFNGLUNIFORM1IARBPROC = ?extern fn (GLint, GLint) void;
pub const PFNGLUNIFORM2IARBPROC = ?extern fn (GLint, GLint, GLint) void;
pub const PFNGLUNIFORM3IARBPROC = ?extern fn (GLint, GLint, GLint, GLint) void;
pub const PFNGLUNIFORM4IARBPROC = ?extern fn (GLint, GLint, GLint, GLint, GLint) void;
pub const PFNGLUNIFORM1FVARBPROC = ?extern fn (GLint, GLsizei, [*c]const GLfloat) void;
pub const PFNGLUNIFORM2FVARBPROC = ?extern fn (GLint, GLsizei, [*c]const GLfloat) void;
pub const PFNGLUNIFORM3FVARBPROC = ?extern fn (GLint, GLsizei, [*c]const GLfloat) void;
pub const PFNGLUNIFORM4FVARBPROC = ?extern fn (GLint, GLsizei, [*c]const GLfloat) void;
pub const PFNGLUNIFORM1IVARBPROC = ?extern fn (GLint, GLsizei, [*c]const GLint) void;
pub const PFNGLUNIFORM2IVARBPROC = ?extern fn (GLint, GLsizei, [*c]const GLint) void;
pub const PFNGLUNIFORM3IVARBPROC = ?extern fn (GLint, GLsizei, [*c]const GLint) void;
pub const PFNGLUNIFORM4IVARBPROC = ?extern fn (GLint, GLsizei, [*c]const GLint) void;
pub const PFNGLUNIFORMMATRIX2FVARBPROC = ?extern fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) void;
pub const PFNGLUNIFORMMATRIX3FVARBPROC = ?extern fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) void;
pub const PFNGLUNIFORMMATRIX4FVARBPROC = ?extern fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) void;
pub const PFNGLGETOBJECTPARAMETERFVARBPROC = ?extern fn (GLhandleARB, GLenum, [*c]GLfloat) void;
pub const PFNGLGETOBJECTPARAMETERIVARBPROC = ?extern fn (GLhandleARB, GLenum, [*c]GLint) void;
pub const PFNGLGETINFOLOGARBPROC = ?extern fn (GLhandleARB, GLsizei, [*c]GLsizei, [*c]GLcharARB) void;
pub const PFNGLGETATTACHEDOBJECTSARBPROC = ?extern fn (GLhandleARB, GLsizei, [*c]GLsizei, [*c]GLhandleARB) void;
pub const PFNGLGETUNIFORMLOCATIONARBPROC = ?extern fn (GLhandleARB, [*c]const GLcharARB) GLint;
pub const PFNGLGETACTIVEUNIFORMARBPROC = ?extern fn (GLhandleARB, GLuint, GLsizei, [*c]GLsizei, [*c]GLint, [*c]GLenum, [*c]GLcharARB) void;
pub const PFNGLGETUNIFORMFVARBPROC = ?extern fn (GLhandleARB, GLint, [*c]GLfloat) void;
pub const PFNGLGETUNIFORMIVARBPROC = ?extern fn (GLhandleARB, GLint, [*c]GLint) void;
pub const PFNGLGETSHADERSOURCEARBPROC = ?extern fn (GLhandleARB, GLsizei, [*c]GLsizei, [*c]GLcharARB) void;
pub const PFNGLNAMEDSTRINGARBPROC = ?extern fn (GLenum, GLint, [*c]const GLchar, GLint, [*c]const GLchar) void;
pub const PFNGLDELETENAMEDSTRINGARBPROC = ?extern fn (GLint, [*c]const GLchar) void;
pub const PFNGLCOMPILESHADERINCLUDEARBPROC = ?extern fn (GLuint, GLsizei, [*c]const ([*c]const GLchar), [*c]const GLint) void;
pub const PFNGLISNAMEDSTRINGARBPROC = ?extern fn (GLint, [*c]const GLchar) GLboolean;
pub const PFNGLGETNAMEDSTRINGARBPROC = ?extern fn (GLint, [*c]const GLchar, GLsizei, [*c]GLint, [*c]GLchar) void;
pub const PFNGLGETNAMEDSTRINGIVARBPROC = ?extern fn (GLint, [*c]const GLchar, GLenum, [*c]GLint) void;
pub const PFNGLBUFFERPAGECOMMITMENTARBPROC = ?extern fn (GLenum, GLintptr, GLsizeiptr, GLboolean) void;
pub const PFNGLNAMEDBUFFERPAGECOMMITMENTEXTPROC = ?extern fn (GLuint, GLintptr, GLsizeiptr, GLboolean) void;
pub const PFNGLNAMEDBUFFERPAGECOMMITMENTARBPROC = ?extern fn (GLuint, GLintptr, GLsizeiptr, GLboolean) void;
pub const PFNGLTEXPAGECOMMITMENTARBPROC = ?extern fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLboolean) void;
pub const PFNGLTEXBUFFERARBPROC = ?extern fn (GLenum, GLenum, GLuint) void;
pub const PFNGLCOMPRESSEDTEXIMAGE3DARBPROC = ?extern fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, ?*const c_void) void;
pub const PFNGLCOMPRESSEDTEXIMAGE2DARBPROC = ?extern fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, ?*const c_void) void;
pub const PFNGLCOMPRESSEDTEXIMAGE1DARBPROC = ?extern fn (GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, ?*const c_void) void;
pub const PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC = ?extern fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, ?*const c_void) void;
pub const PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC = ?extern fn (GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, ?*const c_void) void;
pub const PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC = ?extern fn (GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, ?*const c_void) void;
pub const PFNGLGETCOMPRESSEDTEXIMAGEARBPROC = ?extern fn (GLenum, GLint, ?*c_void) void;
pub const PFNGLLOADTRANSPOSEMATRIXFARBPROC = ?extern fn ([*c]const GLfloat) void;
pub const PFNGLLOADTRANSPOSEMATRIXDARBPROC = ?extern fn ([*c]const GLdouble) void;
pub const PFNGLMULTTRANSPOSEMATRIXFARBPROC = ?extern fn ([*c]const GLfloat) void;
pub const PFNGLMULTTRANSPOSEMATRIXDARBPROC = ?extern fn ([*c]const GLdouble) void;
pub const PFNGLWEIGHTBVARBPROC = ?extern fn (GLint, [*c]const GLbyte) void;
pub const PFNGLWEIGHTSVARBPROC = ?extern fn (GLint, [*c]const GLshort) void;
pub const PFNGLWEIGHTIVARBPROC = ?extern fn (GLint, [*c]const GLint) void;
pub const PFNGLWEIGHTFVARBPROC = ?extern fn (GLint, [*c]const GLfloat) void;
pub const PFNGLWEIGHTDVARBPROC = ?extern fn (GLint, [*c]const GLdouble) void;
pub const PFNGLWEIGHTUBVARBPROC = ?extern fn (GLint, [*c]const GLubyte) void;
pub const PFNGLWEIGHTUSVARBPROC = ?extern fn (GLint, [*c]const GLushort) void;
pub const PFNGLWEIGHTUIVARBPROC = ?extern fn (GLint, [*c]const GLuint) void;
pub const PFNGLWEIGHTPOINTERARBPROC = ?extern fn (GLint, GLenum, GLsizei, ?*const c_void) void;
pub const PFNGLVERTEXBLENDARBPROC = ?extern fn (GLint) void;
pub const GLsizeiptrARB = ptrdiff_t;
pub const GLintptrARB = ptrdiff_t;
pub const PFNGLBINDBUFFERARBPROC = ?extern fn (GLenum, GLuint) void;
pub const PFNGLDELETEBUFFERSARBPROC = ?extern fn (GLsizei, [*c]const GLuint) void;
pub const PFNGLGENBUFFERSARBPROC = ?extern fn (GLsizei, [*c]GLuint) void;
pub const PFNGLISBUFFERARBPROC = ?extern fn (GLuint) GLboolean;
pub const PFNGLBUFFERDATAARBPROC = ?extern fn (GLenum, GLsizeiptrARB, ?*const c_void, GLenum) void;
pub const PFNGLBUFFERSUBDATAARBPROC = ?extern fn (GLenum, GLintptrARB, GLsizeiptrARB, ?*const c_void) void;
pub const PFNGLGETBUFFERSUBDATAARBPROC = ?extern fn (GLenum, GLintptrARB, GLsizeiptrARB, ?*c_void) void;
pub const PFNGLMAPBUFFERARBPROC = ?extern fn (GLenum, GLenum) ?*c_void;
pub const PFNGLUNMAPBUFFERARBPROC = ?extern fn (GLenum) GLboolean;
pub const PFNGLGETBUFFERPARAMETERIVARBPROC = ?extern fn (GLenum, GLenum, [*c]GLint) void;
pub const PFNGLGETBUFFERPOINTERVARBPROC = ?extern fn (GLenum, GLenum, [*c](?*c_void)) void;
pub const PFNGLVERTEXATTRIB1DARBPROC = ?extern fn (GLuint, GLdouble) void;
pub const PFNGLVERTEXATTRIB1DVARBPROC = ?extern fn (GLuint, [*c]const GLdouble) void;
pub const PFNGLVERTEXATTRIB1FARBPROC = ?extern fn (GLuint, GLfloat) void;
pub const PFNGLVERTEXATTRIB1FVARBPROC = ?extern fn (GLuint, [*c]const GLfloat) void;
pub const PFNGLVERTEXATTRIB1SARBPROC = ?extern fn (GLuint, GLshort) void;
pub const PFNGLVERTEXATTRIB1SVARBPROC = ?extern fn (GLuint, [*c]const GLshort) void;
pub const PFNGLVERTEXATTRIB2DARBPROC = ?extern fn (GLuint, GLdouble, GLdouble) void;
pub const PFNGLVERTEXATTRIB2DVARBPROC = ?extern fn (GLuint, [*c]const GLdouble) void;
pub const PFNGLVERTEXATTRIB2FARBPROC = ?extern fn (GLuint, GLfloat, GLfloat) void;
pub const PFNGLVERTEXATTRIB2FVARBPROC = ?extern fn (GLuint, [*c]const GLfloat) void;
pub const PFNGLVERTEXATTRIB2SARBPROC = ?extern fn (GLuint, GLshort, GLshort) void;
pub const PFNGLVERTEXATTRIB2SVARBPROC = ?extern fn (GLuint, [*c]const GLshort) void;
pub const PFNGLVERTEXATTRIB3DARBPROC = ?extern fn (GLuint, GLdouble, GLdouble, GLdouble) void;
pub const PFNGLVERTEXATTRIB3DVARBPROC = ?extern fn (GLuint, [*c]const GLdouble) void;
pub const PFNGLVERTEXATTRIB3FARBPROC = ?extern fn (GLuint, GLfloat, GLfloat, GLfloat) void;
pub const PFNGLVERTEXATTRIB3FVARBPROC = ?extern fn (GLuint, [*c]const GLfloat) void;
pub const PFNGLVERTEXATTRIB3SARBPROC = ?extern fn (GLuint, GLshort, GLshort, GLshort) void;
pub const PFNGLVERTEXATTRIB3SVARBPROC = ?extern fn (GLuint, [*c]const GLshort) void;
pub const PFNGLVERTEXATTRIB4NBVARBPROC = ?extern fn (GLuint, [*c]const GLbyte) void;
pub const PFNGLVERTEXATTRIB4NIVARBPROC = ?extern fn (GLuint, [*c]const GLint) void;
pub const PFNGLVERTEXATTRIB4NSVARBPROC = ?extern fn (GLuint, [*c]const GLshort) void;
pub const PFNGLVERTEXATTRIB4NUBARBPROC = ?extern fn (GLuint, GLubyte, GLubyte, GLubyte, GLubyte) void;
pub const PFNGLVERTEXATTRIB4NUBVARBPROC = ?extern fn (GLuint, [*c]const GLubyte) void;
pub const PFNGLVERTEXATTRIB4NUIVARBPROC = ?extern fn (GLuint, [*c]const GLuint) void;
pub const PFNGLVERTEXATTRIB4NUSVARBPROC = ?extern fn (GLuint, [*c]const GLushort) void;
pub const PFNGLVERTEXATTRIB4BVARBPROC = ?extern fn (GLuint, [*c]const GLbyte) void;
pub const PFNGLVERTEXATTRIB4DARBPROC = ?extern fn (GLuint, GLdouble, GLdouble, GLdouble, GLdouble) void;
pub const PFNGLVERTEXATTRIB4DVARBPROC = ?extern fn (GLuint, [*c]const GLdouble) void;
pub const PFNGLVERTEXATTRIB4FARBPROC = ?extern fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat) void;
pub const PFNGLVERTEXATTRIB4FVARBPROC = ?extern fn (GLuint, [*c]const GLfloat) void;
pub const PFNGLVERTEXATTRIB4IVARBPROC = ?extern fn (GLuint, [*c]const GLint) void;
pub const PFNGLVERTEXATTRIB4SARBPROC = ?extern fn (GLuint, GLshort, GLshort, GLshort, GLshort) void;
pub const PFNGLVERTEXATTRIB4SVARBPROC = ?extern fn (GLuint, [*c]const GLshort) void;
pub const PFNGLVERTEXATTRIB4UBVARBPROC = ?extern fn (GLuint, [*c]const GLubyte) void;
pub const PFNGLVERTEXATTRIB4UIVARBPROC = ?extern fn (GLuint, [*c]const GLuint) void;
pub const PFNGLVERTEXATTRIB4USVARBPROC = ?extern fn (GLuint, [*c]const GLushort) void;
pub const PFNGLVERTEXATTRIBPOINTERARBPROC = ?extern fn (GLuint, GLint, GLenum, GLboolean, GLsizei, ?*const c_void) void;
pub const PFNGLENABLEVERTEXATTRIBARRAYARBPROC = ?extern fn (GLuint) void;
pub const PFNGLDISABLEVERTEXATTRIBARRAYARBPROC = ?extern fn (GLuint) void;
pub const PFNGLGETVERTEXATTRIBDVARBPROC = ?extern fn (GLuint, GLenum, [*c]GLdouble) void;
pub const PFNGLGETVERTEXATTRIBFVARBPROC = ?extern fn (GLuint, GLenum, [*c]GLfloat) void;
pub const PFNGLGETVERTEXATTRIBIVARBPROC = ?extern fn (GLuint, GLenum, [*c]GLint) void;
pub const PFNGLGETVERTEXATTRIBPOINTERVARBPROC = ?extern fn (GLuint, GLenum, [*c](?*c_void)) void;
pub const PFNGLBINDATTRIBLOCATIONARBPROC = ?extern fn (GLhandleARB, GLuint, [*c]const GLcharARB) void;
pub const PFNGLGETACTIVEATTRIBARBPROC = ?extern fn (GLhandleARB, GLuint, GLsizei, [*c]GLsizei, [*c]GLint, [*c]GLenum, [*c]GLcharARB) void;
pub const PFNGLGETATTRIBLOCATIONARBPROC = ?extern fn (GLhandleARB, [*c]const GLcharARB) GLint;
pub const PFNGLWINDOWPOS2DARBPROC = ?extern fn (GLdouble, GLdouble) void;
pub const PFNGLWINDOWPOS2DVARBPROC = ?extern fn ([*c]const GLdouble) void;
pub const PFNGLWINDOWPOS2FARBPROC = ?extern fn (GLfloat, GLfloat) void;
pub const PFNGLWINDOWPOS2FVARBPROC = ?extern fn ([*c]const GLfloat) void;
pub const PFNGLWINDOWPOS2IARBPROC = ?extern fn (GLint, GLint) void;
pub const PFNGLWINDOWPOS2IVARBPROC = ?extern fn ([*c]const GLint) void;
pub const PFNGLWINDOWPOS2SARBPROC = ?extern fn (GLshort, GLshort) void;
pub const PFNGLWINDOWPOS2SVARBPROC = ?extern fn ([*c]const GLshort) void;
pub const PFNGLWINDOWPOS3DARBPROC = ?extern fn (GLdouble, GLdouble, GLdouble) void;
pub const PFNGLWINDOWPOS3DVARBPROC = ?extern fn ([*c]const GLdouble) void;
pub const PFNGLWINDOWPOS3FARBPROC = ?extern fn (GLfloat, GLfloat, GLfloat) void;
pub const PFNGLWINDOWPOS3FVARBPROC = ?extern fn ([*c]const GLfloat) void;
pub const PFNGLWINDOWPOS3IARBPROC = ?extern fn (GLint, GLint, GLint) void;
pub const PFNGLWINDOWPOS3IVARBPROC = ?extern fn ([*c]const GLint) void;
pub const PFNGLWINDOWPOS3SARBPROC = ?extern fn (GLshort, GLshort, GLshort) void;
pub const PFNGLWINDOWPOS3SVARBPROC = ?extern fn ([*c]const GLshort) void;
pub const PFNGLBLENDBARRIERKHRPROC = ?extern fn () void;
pub const PFNGLMAXSHADERCOMPILERTHREADSKHRPROC = ?extern fn (GLuint) void;
pub const PFNGLMULTITEXCOORD1BOESPROC = ?extern fn (GLenum, GLbyte) void;
pub const PFNGLMULTITEXCOORD1BVOESPROC = ?extern fn (GLenum, [*c]const GLbyte) void;
pub const PFNGLMULTITEXCOORD2BOESPROC = ?extern fn (GLenum, GLbyte, GLbyte) void;
pub const PFNGLMULTITEXCOORD2BVOESPROC = ?extern fn (GLenum, [*c]const GLbyte) void;
pub const PFNGLMULTITEXCOORD3BOESPROC = ?extern fn (GLenum, GLbyte, GLbyte, GLbyte) void;
pub const PFNGLMULTITEXCOORD3BVOESPROC = ?extern fn (GLenum, [*c]const GLbyte) void;
pub const PFNGLMULTITEXCOORD4BOESPROC = ?extern fn (GLenum, GLbyte, GLbyte, GLbyte, GLbyte) void;
pub const PFNGLMULTITEXCOORD4BVOESPROC = ?extern fn (GLenum, [*c]const GLbyte) void;
pub const PFNGLTEXCOORD1BOESPROC = ?extern fn (GLbyte) void;
pub const PFNGLTEXCOORD1BVOESPROC = ?extern fn ([*c]const GLbyte) void;
pub const PFNGLTEXCOORD2BOESPROC = ?extern fn (GLbyte, GLbyte) void;
pub const PFNGLTEXCOORD2BVOESPROC = ?extern fn ([*c]const GLbyte) void;
pub const PFNGLTEXCOORD3BOESPROC = ?extern fn (GLbyte, GLbyte, GLbyte) void;
pub const PFNGLTEXCOORD3BVOESPROC = ?extern fn ([*c]const GLbyte) void;
pub const PFNGLTEXCOORD4BOESPROC = ?extern fn (GLbyte, GLbyte, GLbyte, GLbyte) void;
pub const PFNGLTEXCOORD4BVOESPROC = ?extern fn ([*c]const GLbyte) void;
pub const PFNGLVERTEX2BOESPROC = ?extern fn (GLbyte, GLbyte) void;
pub const PFNGLVERTEX2BVOESPROC = ?extern fn ([*c]const GLbyte) void;
pub const PFNGLVERTEX3BOESPROC = ?extern fn (GLbyte, GLbyte, GLbyte) void;
pub const PFNGLVERTEX3BVOESPROC = ?extern fn ([*c]const GLbyte) void;
pub const PFNGLVERTEX4BOESPROC = ?extern fn (GLbyte, GLbyte, GLbyte, GLbyte) void;
pub const PFNGLVERTEX4BVOESPROC = ?extern fn ([*c]const GLbyte) void;
pub const GLfixed = GLint;
pub const PFNGLALPHAFUNCXOESPROC = ?extern fn (GLenum, GLfixed) void;
pub const PFNGLCLEARCOLORXOESPROC = ?extern fn (GLfixed, GLfixed, GLfixed, GLfixed) void;
pub const PFNGLCLEARDEPTHXOESPROC = ?extern fn (GLfixed) void;
pub const PFNGLCLIPPLANEXOESPROC = ?extern fn (GLenum, [*c]const GLfixed) void;
pub const PFNGLCOLOR4XOESPROC = ?extern fn (GLfixed, GLfixed, GLfixed, GLfixed) void;
pub const PFNGLDEPTHRANGEXOESPROC = ?extern fn (GLfixed, GLfixed) void;
pub const PFNGLFOGXOESPROC = ?extern fn (GLenum, GLfixed) void;
pub const PFNGLFOGXVOESPROC = ?extern fn (GLenum, [*c]const GLfixed) void;
pub const PFNGLFRUSTUMXOESPROC = ?extern fn (GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed) void;
pub const PFNGLGETCLIPPLANEXOESPROC = ?extern fn (GLenum, [*c]GLfixed) void;
pub const PFNGLGETFIXEDVOESPROC = ?extern fn (GLenum, [*c]GLfixed) void;
pub const PFNGLGETTEXENVXVOESPROC = ?extern fn (GLenum, GLenum, [*c]GLfixed) void;
pub const PFNGLGETTEXPARAMETERXVOESPROC = ?extern fn (GLenum, GLenum, [*c]GLfixed) void;
pub const PFNGLLIGHTMODELXOESPROC = ?extern fn (GLenum, GLfixed) void;
pub const PFNGLLIGHTMODELXVOESPROC = ?extern fn (GLenum, [*c]const GLfixed) void;
pub const PFNGLLIGHTXOESPROC = ?extern fn (GLenum, GLenum, GLfixed) void;
pub const PFNGLLIGHTXVOESPROC = ?extern fn (GLenum, GLenum, [*c]const GLfixed) void;
pub const PFNGLLINEWIDTHXOESPROC = ?extern fn (GLfixed) void;
pub const PFNGLLOADMATRIXXOESPROC = ?extern fn ([*c]const GLfixed) void;
pub const PFNGLMATERIALXOESPROC = ?extern fn (GLenum, GLenum, GLfixed) void;
pub const PFNGLMATERIALXVOESPROC = ?extern fn (GLenum, GLenum, [*c]const GLfixed) void;
pub const PFNGLMULTMATRIXXOESPROC = ?extern fn ([*c]const GLfixed) void;
pub const PFNGLMULTITEXCOORD4XOESPROC = ?extern fn (GLenum, GLfixed, GLfixed, GLfixed, GLfixed) void;
pub const PFNGLNORMAL3XOESPROC = ?extern fn (GLfixed, GLfixed, GLfixed) void;
pub const PFNGLORTHOXOESPROC = ?extern fn (GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed) void;
pub const PFNGLPOINTPARAMETERXVOESPROC = ?extern fn (GLenum, [*c]const GLfixed) void;
pub const PFNGLPOINTSIZEXOESPROC = ?extern fn (GLfixed) void;
pub const PFNGLPOLYGONOFFSETXOESPROC = ?extern fn (GLfixed, GLfixed) void;
pub const PFNGLROTATEXOESPROC = ?extern fn (GLfixed, GLfixed, GLfixed, GLfixed) void;
pub const PFNGLSCALEXOESPROC = ?extern fn (GLfixed, GLfixed, GLfixed) void;
pub const PFNGLTEXENVXOESPROC = ?extern fn (GLenum, GLenum, GLfixed) void;
pub const PFNGLTEXENVXVOESPROC = ?extern fn (GLenum, GLenum, [*c]const GLfixed) void;
pub const PFNGLTEXPARAMETERXOESPROC = ?extern fn (GLenum, GLenum, GLfixed) void;
pub const PFNGLTEXPARAMETERXVOESPROC = ?extern fn (GLenum, GLenum, [*c]const GLfixed) void;
pub const PFNGLTRANSLATEXOESPROC = ?extern fn (GLfixed, GLfixed, GLfixed) void;
pub const PFNGLACCUMXOESPROC = ?extern fn (GLenum, GLfixed) void;
pub const PFNGLBITMAPXOESPROC = ?extern fn (GLsizei, GLsizei, GLfixed, GLfixed, GLfixed, GLfixed, [*c]const GLubyte) void;
pub const PFNGLBLENDCOLORXOESPROC = ?extern fn (GLfixed, GLfixed, GLfixed, GLfixed) void;
pub const PFNGLCLEARACCUMXOESPROC = ?extern fn (GLfixed, GLfixed, GLfixed, GLfixed) void;
pub const PFNGLCOLOR3XOESPROC = ?extern fn (GLfixed, GLfixed, GLfixed) void;
pub const PFNGLCOLOR3XVOESPROC = ?extern fn ([*c]const GLfixed) void;
pub const PFNGLCOLOR4XVOESPROC = ?extern fn ([*c]const GLfixed) void;
pub const PFNGLCONVOLUTIONPARAMETERXOESPROC = ?extern fn (GLenum, GLenum, GLfixed) void;
pub const PFNGLCONVOLUTIONPARAMETERXVOESPROC = ?extern fn (GLenum, GLenum, [*c]const GLfixed) void;
pub const PFNGLEVALCOORD1XOESPROC = ?extern fn (GLfixed) void;
pub const PFNGLEVALCOORD1XVOESPROC = ?extern fn ([*c]const GLfixed) void;
pub const PFNGLEVALCOORD2XOESPROC = ?extern fn (GLfixed, GLfixed) void;
pub const PFNGLEVALCOORD2XVOESPROC = ?extern fn ([*c]const GLfixed) void;
pub const PFNGLFEEDBACKBUFFERXOESPROC = ?extern fn (GLsizei, GLenum, [*c]const GLfixed) void;
pub const PFNGLGETCONVOLUTIONPARAMETERXVOESPROC = ?extern fn (GLenum, GLenum, [*c]GLfixed) void;
pub const PFNGLGETHISTOGRAMPARAMETERXVOESPROC = ?extern fn (GLenum, GLenum, [*c]GLfixed) void;
pub const PFNGLGETLIGHTXOESPROC = ?extern fn (GLenum, GLenum, [*c]GLfixed) void;
pub const PFNGLGETMAPXVOESPROC = ?extern fn (GLenum, GLenum, [*c]GLfixed) void;
pub const PFNGLGETMATERIALXOESPROC = ?extern fn (GLenum, GLenum, GLfixed) void;
pub const PFNGLGETPIXELMAPXVPROC = ?extern fn (GLenum, GLint, [*c]GLfixed) void;
pub const PFNGLGETTEXGENXVOESPROC = ?extern fn (GLenum, GLenum, [*c]GLfixed) void;
pub const PFNGLGETTEXLEVELPARAMETERXVOESPROC = ?extern fn (GLenum, GLint, GLenum, [*c]GLfixed) void;
pub const PFNGLINDEXXOESPROC = ?extern fn (GLfixed) void;
pub const PFNGLINDEXXVOESPROC = ?extern fn ([*c]const GLfixed) void;
pub const PFNGLLOADTRANSPOSEMATRIXXOESPROC = ?extern fn ([*c]const GLfixed) void;
pub const PFNGLMAP1XOESPROC = ?extern fn (GLenum, GLfixed, GLfixed, GLint, GLint, GLfixed) void;
pub const PFNGLMAP2XOESPROC = ?extern fn (GLenum, GLfixed, GLfixed, GLint, GLint, GLfixed, GLfixed, GLint, GLint, GLfixed) void;
pub const PFNGLMAPGRID1XOESPROC = ?extern fn (GLint, GLfixed, GLfixed) void;
pub const PFNGLMAPGRID2XOESPROC = ?extern fn (GLint, GLfixed, GLfixed, GLfixed, GLfixed) void;
pub const PFNGLMULTTRANSPOSEMATRIXXOESPROC = ?extern fn ([*c]const GLfixed) void;
pub const PFNGLMULTITEXCOORD1XOESPROC = ?extern fn (GLenum, GLfixed) void;
pub const PFNGLMULTITEXCOORD1XVOESPROC = ?extern fn (GLenum, [*c]const GLfixed) void;
pub const PFNGLMULTITEXCOORD2XOESPROC = ?extern fn (GLenum, GLfixed, GLfixed) void;
pub const PFNGLMULTITEXCOORD2XVOESPROC = ?extern fn (GLenum, [*c]const GLfixed) void;
pub const PFNGLMULTITEXCOORD3XOESPROC = ?extern fn (GLenum, GLfixed, GLfixed, GLfixed) void;
pub const PFNGLMULTITEXCOORD3XVOESPROC = ?extern fn (GLenum, [*c]const GLfixed) void;
pub const PFNGLMULTITEXCOORD4XVOESPROC = ?extern fn (GLenum, [*c]const GLfixed) void;
pub const PFNGLNORMAL3XVOESPROC = ?extern fn ([*c]const GLfixed) void;
pub const PFNGLPASSTHROUGHXOESPROC = ?extern fn (GLfixed) void;
pub const PFNGLPIXELMAPXPROC = ?extern fn (GLenum, GLint, [*c]const GLfixed) void;
pub const PFNGLPIXELSTOREXPROC = ?extern fn (GLenum, GLfixed) void;
pub const PFNGLPIXELTRANSFERXOESPROC = ?extern fn (GLenum, GLfixed) void;
pub const PFNGLPIXELZOOMXOESPROC = ?extern fn (GLfixed, GLfixed) void;
pub const PFNGLPRIORITIZETEXTURESXOESPROC = ?extern fn (GLsizei, [*c]const GLuint, [*c]const GLfixed) void;
pub const PFNGLRASTERPOS2XOESPROC = ?extern fn (GLfixed, GLfixed) void;
pub const PFNGLRASTERPOS2XVOESPROC = ?extern fn ([*c]const GLfixed) void;
pub const PFNGLRASTERPOS3XOESPROC = ?extern fn (GLfixed, GLfixed, GLfixed) void;
pub const PFNGLRASTERPOS3XVOESPROC = ?extern fn ([*c]const GLfixed) void;
pub const PFNGLRASTERPOS4XOESPROC = ?extern fn (GLfixed, GLfixed, GLfixed, GLfixed) void;
pub const PFNGLRASTERPOS4XVOESPROC = ?extern fn ([*c]const GLfixed) void;
pub const PFNGLRECTXOESPROC = ?extern fn (GLfixed, GLfixed, GLfixed, GLfixed) void;
pub const PFNGLRECTXVOESPROC = ?extern fn ([*c]const GLfixed, [*c]const GLfixed) void;
pub const PFNGLTEXCOORD1XOESPROC = ?extern fn (GLfixed) void;
pub const PFNGLTEXCOORD1XVOESPROC = ?extern fn ([*c]const GLfixed) void;
pub const PFNGLTEXCOORD2XOESPROC = ?extern fn (GLfixed, GLfixed) void;
pub const PFNGLTEXCOORD2XVOESPROC = ?extern fn ([*c]const GLfixed) void;
pub const PFNGLTEXCOORD3XOESPROC = ?extern fn (GLfixed, GLfixed, GLfixed) void;
pub const PFNGLTEXCOORD3XVOESPROC = ?extern fn ([*c]const GLfixed) void;
pub const PFNGLTEXCOORD4XOESPROC = ?extern fn (GLfixed, GLfixed, GLfixed, GLfixed) void;
pub const PFNGLTEXCOORD4XVOESPROC = ?extern fn ([*c]const GLfixed) void;
pub const PFNGLTEXGENXOESPROC = ?extern fn (GLenum, GLenum, GLfixed) void;
pub const PFNGLTEXGENXVOESPROC = ?extern fn (GLenum, GLenum, [*c]const GLfixed) void;
pub const PFNGLVERTEX2XOESPROC = ?extern fn (GLfixed) void;
pub const PFNGLVERTEX2XVOESPROC = ?extern fn ([*c]const GLfixed) void;
pub const PFNGLVERTEX3XOESPROC = ?extern fn (GLfixed, GLfixed) void;
pub const PFNGLVERTEX3XVOESPROC = ?extern fn ([*c]const GLfixed) void;
pub const PFNGLVERTEX4XOESPROC = ?extern fn (GLfixed, GLfixed, GLfixed) void;
pub const PFNGLVERTEX4XVOESPROC = ?extern fn ([*c]const GLfixed) void;
pub const PFNGLQUERYMATRIXXOESPROC = ?extern fn ([*c]GLfixed, [*c]GLint) GLbitfield;
pub const PFNGLCLEARDEPTHFOESPROC = ?extern fn (GLclampf) void;
pub const PFNGLCLIPPLANEFOESPROC = ?extern fn (GLenum, [*c]const GLfloat) void;
pub const PFNGLDEPTHRANGEFOESPROC = ?extern fn (GLclampf, GLclampf) void;
pub const PFNGLFRUSTUMFOESPROC = ?extern fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) void;
pub const PFNGLGETCLIPPLANEFOESPROC = ?extern fn (GLenum, [*c]GLfloat) void;
pub const PFNGLORTHOFOESPROC = ?extern fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) void;
pub const PFNGLTBUFFERMASK3DFXPROC = ?extern fn (GLuint) void;
pub const GLDEBUGPROCAMD = ?extern fn (GLuint, GLenum, GLenum, GLsizei, [*c]const GLchar, ?*c_void) void;
pub const PFNGLDEBUGMESSAGEENABLEAMDPROC = ?extern fn (GLenum, GLenum, GLsizei, [*c]const GLuint, GLboolean) void;
pub const PFNGLDEBUGMESSAGEINSERTAMDPROC = ?extern fn (GLenum, GLenum, GLuint, GLsizei, [*c]const GLchar) void;
pub const PFNGLDEBUGMESSAGECALLBACKAMDPROC = ?extern fn (GLDEBUGPROCAMD, ?*c_void) void;
pub const PFNGLGETDEBUGMESSAGELOGAMDPROC = ?extern fn (GLuint, GLsizei, [*c]GLenum, [*c]GLuint, [*c]GLuint, [*c]GLsizei, [*c]GLchar) GLuint;
pub const PFNGLBLENDFUNCINDEXEDAMDPROC = ?extern fn (GLuint, GLenum, GLenum) void;
pub const PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC = ?extern fn (GLuint, GLenum, GLenum, GLenum, GLenum) void;
pub const PFNGLBLENDEQUATIONINDEXEDAMDPROC = ?extern fn (GLuint, GLenum) void;
pub const PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC = ?extern fn (GLuint, GLenum, GLenum) void;
pub const PFNGLRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMDPROC = ?extern fn (GLenum, GLsizei, GLsizei, GLenum, GLsizei, GLsizei) void;
pub const PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMDPROC = ?extern fn (GLuint, GLsizei, GLsizei, GLenum, GLsizei, GLsizei) void;
pub const PFNGLFRAMEBUFFERSAMPLEPOSITIONSFVAMDPROC = ?extern fn (GLenum, GLuint, GLuint, [*c]const GLfloat) void;
pub const PFNGLNAMEDFRAMEBUFFERSAMPLEPOSITIONSFVAMDPROC = ?extern fn (GLuint, GLuint, GLuint, [*c]const GLfloat) void;
pub const PFNGLGETFRAMEBUFFERPARAMETERFVAMDPROC = ?extern fn (GLenum, GLenum, GLuint, GLuint, GLsizei, [*c]GLfloat) void;
pub const PFNGLGETNAMEDFRAMEBUFFERPARAMETERFVAMDPROC = ?extern fn (GLuint, GLenum, GLuint, GLuint, GLsizei, [*c]GLfloat) void;
pub const GLint64EXT = i64;
pub const PFNGLUNIFORM1I64NVPROC = ?extern fn (GLint, GLint64EXT) void;
pub const PFNGLUNIFORM2I64NVPROC = ?extern fn (GLint, GLint64EXT, GLint64EXT) void;
pub const PFNGLUNIFORM3I64NVPROC = ?extern fn (GLint, GLint64EXT, GLint64EXT, GLint64EXT) void;
pub const PFNGLUNIFORM4I64NVPROC = ?extern fn (GLint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT) void;
pub const PFNGLUNIFORM1I64VNVPROC = ?extern fn (GLint, GLsizei, [*c]const GLint64EXT) void;
pub const PFNGLUNIFORM2I64VNVPROC = ?extern fn (GLint, GLsizei, [*c]const GLint64EXT) void;
pub const PFNGLUNIFORM3I64VNVPROC = ?extern fn (GLint, GLsizei, [*c]const GLint64EXT) void;
pub const PFNGLUNIFORM4I64VNVPROC = ?extern fn (GLint, GLsizei, [*c]const GLint64EXT) void;
pub const PFNGLUNIFORM1UI64NVPROC = ?extern fn (GLint, GLuint64EXT) void;
pub const PFNGLUNIFORM2UI64NVPROC = ?extern fn (GLint, GLuint64EXT, GLuint64EXT) void;
pub const PFNGLUNIFORM3UI64NVPROC = ?extern fn (GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT) void;
pub const PFNGLUNIFORM4UI64NVPROC = ?extern fn (GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT) void;
pub const PFNGLUNIFORM1UI64VNVPROC = ?extern fn (GLint, GLsizei, [*c]const GLuint64EXT) void;
pub const PFNGLUNIFORM2UI64VNVPROC = ?extern fn (GLint, GLsizei, [*c]const GLuint64EXT) void;
pub const PFNGLUNIFORM3UI64VNVPROC = ?extern fn (GLint, GLsizei, [*c]const GLuint64EXT) void;
pub const PFNGLUNIFORM4UI64VNVPROC = ?extern fn (GLint, GLsizei, [*c]const GLuint64EXT) void;
pub const PFNGLGETUNIFORMI64VNVPROC = ?extern fn (GLuint, GLint, [*c]GLint64EXT) void;
pub const PFNGLGETUNIFORMUI64VNVPROC = ?extern fn (GLuint, GLint, [*c]GLuint64EXT) void;
pub const PFNGLPROGRAMUNIFORM1I64NVPROC = ?extern fn (GLuint, GLint, GLint64EXT) void;
pub const PFNGLPROGRAMUNIFORM2I64NVPROC = ?extern fn (GLuint, GLint, GLint64EXT, GLint64EXT) void;
pub const PFNGLPROGRAMUNIFORM3I64NVPROC = ?extern fn (GLuint, GLint, GLint64EXT, GLint64EXT, GLint64EXT) void;
pub const PFNGLPROGRAMUNIFORM4I64NVPROC = ?extern fn (GLuint, GLint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT) void;
pub const PFNGLPROGRAMUNIFORM1I64VNVPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLint64EXT) void;
pub const PFNGLPROGRAMUNIFORM2I64VNVPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLint64EXT) void;
pub const PFNGLPROGRAMUNIFORM3I64VNVPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLint64EXT) void;
pub const PFNGLPROGRAMUNIFORM4I64VNVPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLint64EXT) void;
pub const PFNGLPROGRAMUNIFORM1UI64NVPROC = ?extern fn (GLuint, GLint, GLuint64EXT) void;
pub const PFNGLPROGRAMUNIFORM2UI64NVPROC = ?extern fn (GLuint, GLint, GLuint64EXT, GLuint64EXT) void;
pub const PFNGLPROGRAMUNIFORM3UI64NVPROC = ?extern fn (GLuint, GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT) void;
pub const PFNGLPROGRAMUNIFORM4UI64NVPROC = ?extern fn (GLuint, GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT) void;
pub const PFNGLPROGRAMUNIFORM1UI64VNVPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLuint64EXT) void;
pub const PFNGLPROGRAMUNIFORM2UI64VNVPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLuint64EXT) void;
pub const PFNGLPROGRAMUNIFORM3UI64VNVPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLuint64EXT) void;
pub const PFNGLPROGRAMUNIFORM4UI64VNVPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLuint64EXT) void;
pub const PFNGLVERTEXATTRIBPARAMETERIAMDPROC = ?extern fn (GLuint, GLenum, GLint) void;
pub const PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC = ?extern fn (GLenum, ?*const c_void, GLsizei, GLsizei) void;
pub const PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC = ?extern fn (GLenum, GLenum, ?*const c_void, GLsizei, GLsizei) void;
pub const PFNGLGENNAMESAMDPROC = ?extern fn (GLenum, GLuint, [*c]GLuint) void;
pub const PFNGLDELETENAMESAMDPROC = ?extern fn (GLenum, GLuint, [*c]const GLuint) void;
pub const PFNGLISNAMEAMDPROC = ?extern fn (GLenum, GLuint) GLboolean;
pub const PFNGLQUERYOBJECTPARAMETERUIAMDPROC = ?extern fn (GLenum, GLuint, GLenum, GLuint) void;
pub const PFNGLGETPERFMONITORGROUPSAMDPROC = ?extern fn ([*c]GLint, GLsizei, [*c]GLuint) void;
pub const PFNGLGETPERFMONITORCOUNTERSAMDPROC = ?extern fn (GLuint, [*c]GLint, [*c]GLint, GLsizei, [*c]GLuint) void;
pub const PFNGLGETPERFMONITORGROUPSTRINGAMDPROC = ?extern fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) void;
pub const PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC = ?extern fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) void;
pub const PFNGLGETPERFMONITORCOUNTERINFOAMDPROC = ?extern fn (GLuint, GLuint, GLenum, ?*c_void) void;
pub const PFNGLGENPERFMONITORSAMDPROC = ?extern fn (GLsizei, [*c]GLuint) void;
pub const PFNGLDELETEPERFMONITORSAMDPROC = ?extern fn (GLsizei, [*c]GLuint) void;
pub const PFNGLSELECTPERFMONITORCOUNTERSAMDPROC = ?extern fn (GLuint, GLboolean, GLuint, GLint, [*c]GLuint) void;
pub const PFNGLBEGINPERFMONITORAMDPROC = ?extern fn (GLuint) void;
pub const PFNGLENDPERFMONITORAMDPROC = ?extern fn (GLuint) void;
pub const PFNGLGETPERFMONITORCOUNTERDATAAMDPROC = ?extern fn (GLuint, GLenum, GLsizei, [*c]GLuint, [*c]GLint) void;
pub const PFNGLSETMULTISAMPLEFVAMDPROC = ?extern fn (GLenum, GLuint, [*c]const GLfloat) void;
pub const PFNGLTEXSTORAGESPARSEAMDPROC = ?extern fn (GLenum, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLbitfield) void;
pub const PFNGLTEXTURESTORAGESPARSEAMDPROC = ?extern fn (GLuint, GLenum, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLbitfield) void;
pub const PFNGLSTENCILOPVALUEAMDPROC = ?extern fn (GLenum, GLuint) void;
pub const PFNGLTESSELLATIONFACTORAMDPROC = ?extern fn (GLfloat) void;
pub const PFNGLTESSELLATIONMODEAMDPROC = ?extern fn (GLenum) void;
pub const PFNGLELEMENTPOINTERAPPLEPROC = ?extern fn (GLenum, ?*const c_void) void;
pub const PFNGLDRAWELEMENTARRAYAPPLEPROC = ?extern fn (GLenum, GLint, GLsizei) void;
pub const PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC = ?extern fn (GLenum, GLuint, GLuint, GLint, GLsizei) void;
pub const PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC = ?extern fn (GLenum, [*c]const GLint, [*c]const GLsizei, GLsizei) void;
pub const PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC = ?extern fn (GLenum, GLuint, GLuint, [*c]const GLint, [*c]const GLsizei, GLsizei) void;
pub const PFNGLGENFENCESAPPLEPROC = ?extern fn (GLsizei, [*c]GLuint) void;
pub const PFNGLDELETEFENCESAPPLEPROC = ?extern fn (GLsizei, [*c]const GLuint) void;
pub const PFNGLSETFENCEAPPLEPROC = ?extern fn (GLuint) void;
pub const PFNGLISFENCEAPPLEPROC = ?extern fn (GLuint) GLboolean;
pub const PFNGLTESTFENCEAPPLEPROC = ?extern fn (GLuint) GLboolean;
pub const PFNGLFINISHFENCEAPPLEPROC = ?extern fn (GLuint) void;
pub const PFNGLTESTOBJECTAPPLEPROC = ?extern fn (GLenum, GLuint) GLboolean;
pub const PFNGLFINISHOBJECTAPPLEPROC = ?extern fn (GLenum, GLint) void;
pub const PFNGLBUFFERPARAMETERIAPPLEPROC = ?extern fn (GLenum, GLenum, GLint) void;
pub const PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC = ?extern fn (GLenum, GLintptr, GLsizeiptr) void;
pub const PFNGLOBJECTPURGEABLEAPPLEPROC = ?extern fn (GLenum, GLuint, GLenum) GLenum;
pub const PFNGLOBJECTUNPURGEABLEAPPLEPROC = ?extern fn (GLenum, GLuint, GLenum) GLenum;
pub const PFNGLGETOBJECTPARAMETERIVAPPLEPROC = ?extern fn (GLenum, GLuint, GLenum, [*c]GLint) void;
pub const PFNGLTEXTURERANGEAPPLEPROC = ?extern fn (GLenum, GLsizei, ?*const c_void) void;
pub const PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC = ?extern fn (GLenum, GLenum, [*c](?*c_void)) void;
pub const PFNGLBINDVERTEXARRAYAPPLEPROC = ?extern fn (GLuint) void;
pub const PFNGLDELETEVERTEXARRAYSAPPLEPROC = ?extern fn (GLsizei, [*c]const GLuint) void;
pub const PFNGLGENVERTEXARRAYSAPPLEPROC = ?extern fn (GLsizei, [*c]GLuint) void;
pub const PFNGLISVERTEXARRAYAPPLEPROC = ?extern fn (GLuint) GLboolean;
pub const PFNGLVERTEXARRAYRANGEAPPLEPROC = ?extern fn (GLsizei, ?*c_void) void;
pub const PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC = ?extern fn (GLsizei, ?*c_void) void;
pub const PFNGLVERTEXARRAYPARAMETERIAPPLEPROC = ?extern fn (GLenum, GLint) void;
pub const PFNGLENABLEVERTEXATTRIBAPPLEPROC = ?extern fn (GLuint, GLenum) void;
pub const PFNGLDISABLEVERTEXATTRIBAPPLEPROC = ?extern fn (GLuint, GLenum) void;
pub const PFNGLISVERTEXATTRIBENABLEDAPPLEPROC = ?extern fn (GLuint, GLenum) GLboolean;
pub const PFNGLMAPVERTEXATTRIB1DAPPLEPROC = ?extern fn (GLuint, GLuint, GLdouble, GLdouble, GLint, GLint, [*c]const GLdouble) void;
pub const PFNGLMAPVERTEXATTRIB1FAPPLEPROC = ?extern fn (GLuint, GLuint, GLfloat, GLfloat, GLint, GLint, [*c]const GLfloat) void;
pub const PFNGLMAPVERTEXATTRIB2DAPPLEPROC = ?extern fn (GLuint, GLuint, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, [*c]const GLdouble) void;
pub const PFNGLMAPVERTEXATTRIB2FAPPLEPROC = ?extern fn (GLuint, GLuint, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, [*c]const GLfloat) void;
pub const PFNGLDRAWBUFFERSATIPROC = ?extern fn (GLsizei, [*c]const GLenum) void;
pub const PFNGLELEMENTPOINTERATIPROC = ?extern fn (GLenum, ?*const c_void) void;
pub const PFNGLDRAWELEMENTARRAYATIPROC = ?extern fn (GLenum, GLsizei) void;
pub const PFNGLDRAWRANGEELEMENTARRAYATIPROC = ?extern fn (GLenum, GLuint, GLuint, GLsizei) void;
pub const PFNGLTEXBUMPPARAMETERIVATIPROC = ?extern fn (GLenum, [*c]const GLint) void;
pub const PFNGLTEXBUMPPARAMETERFVATIPROC = ?extern fn (GLenum, [*c]const GLfloat) void;
pub const PFNGLGETTEXBUMPPARAMETERIVATIPROC = ?extern fn (GLenum, [*c]GLint) void;
pub const PFNGLGETTEXBUMPPARAMETERFVATIPROC = ?extern fn (GLenum, [*c]GLfloat) void;
pub const PFNGLGENFRAGMENTSHADERSATIPROC = ?extern fn (GLuint) GLuint;
pub const PFNGLBINDFRAGMENTSHADERATIPROC = ?extern fn (GLuint) void;
pub const PFNGLDELETEFRAGMENTSHADERATIPROC = ?extern fn (GLuint) void;
pub const PFNGLBEGINFRAGMENTSHADERATIPROC = ?extern fn () void;
pub const PFNGLENDFRAGMENTSHADERATIPROC = ?extern fn () void;
pub const PFNGLPASSTEXCOORDATIPROC = ?extern fn (GLuint, GLuint, GLenum) void;
pub const PFNGLSAMPLEMAPATIPROC = ?extern fn (GLuint, GLuint, GLenum) void;
pub const PFNGLCOLORFRAGMENTOP1ATIPROC = ?extern fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint) void;
pub const PFNGLCOLORFRAGMENTOP2ATIPROC = ?extern fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint) void;
pub const PFNGLCOLORFRAGMENTOP3ATIPROC = ?extern fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint) void;
pub const PFNGLALPHAFRAGMENTOP1ATIPROC = ?extern fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint) void;
pub const PFNGLALPHAFRAGMENTOP2ATIPROC = ?extern fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint) void;
pub const PFNGLALPHAFRAGMENTOP3ATIPROC = ?extern fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint) void;
pub const PFNGLSETFRAGMENTSHADERCONSTANTATIPROC = ?extern fn (GLuint, [*c]const GLfloat) void;
pub const PFNGLMAPOBJECTBUFFERATIPROC = ?extern fn (GLuint) ?*c_void;
pub const PFNGLUNMAPOBJECTBUFFERATIPROC = ?extern fn (GLuint) void;
pub const PFNGLPNTRIANGLESIATIPROC = ?extern fn (GLenum, GLint) void;
pub const PFNGLPNTRIANGLESFATIPROC = ?extern fn (GLenum, GLfloat) void;
pub const PFNGLSTENCILOPSEPARATEATIPROC = ?extern fn (GLenum, GLenum, GLenum, GLenum) void;
pub const PFNGLSTENCILFUNCSEPARATEATIPROC = ?extern fn (GLenum, GLenum, GLint, GLuint) void;
pub const PFNGLNEWOBJECTBUFFERATIPROC = ?extern fn (GLsizei, ?*const c_void, GLenum) GLuint;
pub const PFNGLISOBJECTBUFFERATIPROC = ?extern fn (GLuint) GLboolean;
pub const PFNGLUPDATEOBJECTBUFFERATIPROC = ?extern fn (GLuint, GLuint, GLsizei, ?*const c_void, GLenum) void;
pub const PFNGLGETOBJECTBUFFERFVATIPROC = ?extern fn (GLuint, GLenum, [*c]GLfloat) void;
pub const PFNGLGETOBJECTBUFFERIVATIPROC = ?extern fn (GLuint, GLenum, [*c]GLint) void;
pub const PFNGLFREEOBJECTBUFFERATIPROC = ?extern fn (GLuint) void;
pub const PFNGLARRAYOBJECTATIPROC = ?extern fn (GLenum, GLint, GLenum, GLsizei, GLuint, GLuint) void;
pub const PFNGLGETARRAYOBJECTFVATIPROC = ?extern fn (GLenum, GLenum, [*c]GLfloat) void;
pub const PFNGLGETARRAYOBJECTIVATIPROC = ?extern fn (GLenum, GLenum, [*c]GLint) void;
pub const PFNGLVARIANTARRAYOBJECTATIPROC = ?extern fn (GLuint, GLenum, GLsizei, GLuint, GLuint) void;
pub const PFNGLGETVARIANTARRAYOBJECTFVATIPROC = ?extern fn (GLuint, GLenum, [*c]GLfloat) void;
pub const PFNGLGETVARIANTARRAYOBJECTIVATIPROC = ?extern fn (GLuint, GLenum, [*c]GLint) void;
pub const PFNGLVERTEXATTRIBARRAYOBJECTATIPROC = ?extern fn (GLuint, GLint, GLenum, GLboolean, GLsizei, GLuint, GLuint) void;
pub const PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC = ?extern fn (GLuint, GLenum, [*c]GLfloat) void;
pub const PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC = ?extern fn (GLuint, GLenum, [*c]GLint) void;
pub const PFNGLVERTEXSTREAM1SATIPROC = ?extern fn (GLenum, GLshort) void;
pub const PFNGLVERTEXSTREAM1SVATIPROC = ?extern fn (GLenum, [*c]const GLshort) void;
pub const PFNGLVERTEXSTREAM1IATIPROC = ?extern fn (GLenum, GLint) void;
pub const PFNGLVERTEXSTREAM1IVATIPROC = ?extern fn (GLenum, [*c]const GLint) void;
pub const PFNGLVERTEXSTREAM1FATIPROC = ?extern fn (GLenum, GLfloat) void;
pub const PFNGLVERTEXSTREAM1FVATIPROC = ?extern fn (GLenum, [*c]const GLfloat) void;
pub const PFNGLVERTEXSTREAM1DATIPROC = ?extern fn (GLenum, GLdouble) void;
pub const PFNGLVERTEXSTREAM1DVATIPROC = ?extern fn (GLenum, [*c]const GLdouble) void;
pub const PFNGLVERTEXSTREAM2SATIPROC = ?extern fn (GLenum, GLshort, GLshort) void;
pub const PFNGLVERTEXSTREAM2SVATIPROC = ?extern fn (GLenum, [*c]const GLshort) void;
pub const PFNGLVERTEXSTREAM2IATIPROC = ?extern fn (GLenum, GLint, GLint) void;
pub const PFNGLVERTEXSTREAM2IVATIPROC = ?extern fn (GLenum, [*c]const GLint) void;
pub const PFNGLVERTEXSTREAM2FATIPROC = ?extern fn (GLenum, GLfloat, GLfloat) void;
pub const PFNGLVERTEXSTREAM2FVATIPROC = ?extern fn (GLenum, [*c]const GLfloat) void;
pub const PFNGLVERTEXSTREAM2DATIPROC = ?extern fn (GLenum, GLdouble, GLdouble) void;
pub const PFNGLVERTEXSTREAM2DVATIPROC = ?extern fn (GLenum, [*c]const GLdouble) void;
pub const PFNGLVERTEXSTREAM3SATIPROC = ?extern fn (GLenum, GLshort, GLshort, GLshort) void;
pub const PFNGLVERTEXSTREAM3SVATIPROC = ?extern fn (GLenum, [*c]const GLshort) void;
pub const PFNGLVERTEXSTREAM3IATIPROC = ?extern fn (GLenum, GLint, GLint, GLint) void;
pub const PFNGLVERTEXSTREAM3IVATIPROC = ?extern fn (GLenum, [*c]const GLint) void;
pub const PFNGLVERTEXSTREAM3FATIPROC = ?extern fn (GLenum, GLfloat, GLfloat, GLfloat) void;
pub const PFNGLVERTEXSTREAM3FVATIPROC = ?extern fn (GLenum, [*c]const GLfloat) void;
pub const PFNGLVERTEXSTREAM3DATIPROC = ?extern fn (GLenum, GLdouble, GLdouble, GLdouble) void;
pub const PFNGLVERTEXSTREAM3DVATIPROC = ?extern fn (GLenum, [*c]const GLdouble) void;
pub const PFNGLVERTEXSTREAM4SATIPROC = ?extern fn (GLenum, GLshort, GLshort, GLshort, GLshort) void;
pub const PFNGLVERTEXSTREAM4SVATIPROC = ?extern fn (GLenum, [*c]const GLshort) void;
pub const PFNGLVERTEXSTREAM4IATIPROC = ?extern fn (GLenum, GLint, GLint, GLint, GLint) void;
pub const PFNGLVERTEXSTREAM4IVATIPROC = ?extern fn (GLenum, [*c]const GLint) void;
pub const PFNGLVERTEXSTREAM4FATIPROC = ?extern fn (GLenum, GLfloat, GLfloat, GLfloat, GLfloat) void;
pub const PFNGLVERTEXSTREAM4FVATIPROC = ?extern fn (GLenum, [*c]const GLfloat) void;
pub const PFNGLVERTEXSTREAM4DATIPROC = ?extern fn (GLenum, GLdouble, GLdouble, GLdouble, GLdouble) void;
pub const PFNGLVERTEXSTREAM4DVATIPROC = ?extern fn (GLenum, [*c]const GLdouble) void;
pub const PFNGLNORMALSTREAM3BATIPROC = ?extern fn (GLenum, GLbyte, GLbyte, GLbyte) void;
pub const PFNGLNORMALSTREAM3BVATIPROC = ?extern fn (GLenum, [*c]const GLbyte) void;
pub const PFNGLNORMALSTREAM3SATIPROC = ?extern fn (GLenum, GLshort, GLshort, GLshort) void;
pub const PFNGLNORMALSTREAM3SVATIPROC = ?extern fn (GLenum, [*c]const GLshort) void;
pub const PFNGLNORMALSTREAM3IATIPROC = ?extern fn (GLenum, GLint, GLint, GLint) void;
pub const PFNGLNORMALSTREAM3IVATIPROC = ?extern fn (GLenum, [*c]const GLint) void;
pub const PFNGLNORMALSTREAM3FATIPROC = ?extern fn (GLenum, GLfloat, GLfloat, GLfloat) void;
pub const PFNGLNORMALSTREAM3FVATIPROC = ?extern fn (GLenum, [*c]const GLfloat) void;
pub const PFNGLNORMALSTREAM3DATIPROC = ?extern fn (GLenum, GLdouble, GLdouble, GLdouble) void;
pub const PFNGLNORMALSTREAM3DVATIPROC = ?extern fn (GLenum, [*c]const GLdouble) void;
pub const PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC = ?extern fn (GLenum) void;
pub const PFNGLVERTEXBLENDENVIATIPROC = ?extern fn (GLenum, GLint) void;
pub const PFNGLVERTEXBLENDENVFATIPROC = ?extern fn (GLenum, GLfloat) void;
pub const GLeglImageOES = ?*c_void;
pub const PFNGLEGLIMAGETARGETTEXSTORAGEEXTPROC = ?extern fn (GLenum, GLeglImageOES, [*c]const GLint) void;
pub const PFNGLEGLIMAGETARGETTEXTURESTORAGEEXTPROC = ?extern fn (GLuint, GLeglImageOES, [*c]const GLint) void;
pub const PFNGLUNIFORMBUFFEREXTPROC = ?extern fn (GLuint, GLint, GLuint) void;
pub const PFNGLGETUNIFORMBUFFERSIZEEXTPROC = ?extern fn (GLuint, GLint) GLint;
pub const PFNGLGETUNIFORMOFFSETEXTPROC = ?extern fn (GLuint, GLint) GLintptr;
pub const PFNGLBLENDCOLOREXTPROC = ?extern fn (GLfloat, GLfloat, GLfloat, GLfloat) void;
pub const PFNGLBLENDEQUATIONSEPARATEEXTPROC = ?extern fn (GLenum, GLenum) void;
pub const PFNGLBLENDFUNCSEPARATEEXTPROC = ?extern fn (GLenum, GLenum, GLenum, GLenum) void;
pub const PFNGLBLENDEQUATIONEXTPROC = ?extern fn (GLenum) void;
pub const PFNGLCOLORSUBTABLEEXTPROC = ?extern fn (GLenum, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void) void;
pub const PFNGLCOPYCOLORSUBTABLEEXTPROC = ?extern fn (GLenum, GLsizei, GLint, GLint, GLsizei) void;
pub const PFNGLLOCKARRAYSEXTPROC = ?extern fn (GLint, GLsizei) void;
pub const PFNGLUNLOCKARRAYSEXTPROC = ?extern fn () void;
pub const PFNGLCONVOLUTIONFILTER1DEXTPROC = ?extern fn (GLenum, GLenum, GLsizei, GLenum, GLenum, ?*const c_void) void;
pub const PFNGLCONVOLUTIONFILTER2DEXTPROC = ?extern fn (GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void) void;
pub const PFNGLCONVOLUTIONPARAMETERFEXTPROC = ?extern fn (GLenum, GLenum, GLfloat) void;
pub const PFNGLCONVOLUTIONPARAMETERFVEXTPROC = ?extern fn (GLenum, GLenum, [*c]const GLfloat) void;
pub const PFNGLCONVOLUTIONPARAMETERIEXTPROC = ?extern fn (GLenum, GLenum, GLint) void;
pub const PFNGLCONVOLUTIONPARAMETERIVEXTPROC = ?extern fn (GLenum, GLenum, [*c]const GLint) void;
pub const PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC = ?extern fn (GLenum, GLenum, GLint, GLint, GLsizei) void;
pub const PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC = ?extern fn (GLenum, GLenum, GLint, GLint, GLsizei, GLsizei) void;
pub const PFNGLGETCONVOLUTIONFILTEREXTPROC = ?extern fn (GLenum, GLenum, GLenum, ?*c_void) void;
pub const PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC = ?extern fn (GLenum, GLenum, [*c]GLfloat) void;
pub const PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC = ?extern fn (GLenum, GLenum, [*c]GLint) void;
pub const PFNGLGETSEPARABLEFILTEREXTPROC = ?extern fn (GLenum, GLenum, GLenum, ?*c_void, ?*c_void, ?*c_void) void;
pub const PFNGLSEPARABLEFILTER2DEXTPROC = ?extern fn (GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void, ?*const c_void) void;
pub const PFNGLTANGENT3BEXTPROC = ?extern fn (GLbyte, GLbyte, GLbyte) void;
pub const PFNGLTANGENT3BVEXTPROC = ?extern fn ([*c]const GLbyte) void;
pub const PFNGLTANGENT3DEXTPROC = ?extern fn (GLdouble, GLdouble, GLdouble) void;
pub const PFNGLTANGENT3DVEXTPROC = ?extern fn ([*c]const GLdouble) void;
pub const PFNGLTANGENT3FEXTPROC = ?extern fn (GLfloat, GLfloat, GLfloat) void;
pub const PFNGLTANGENT3FVEXTPROC = ?extern fn ([*c]const GLfloat) void;
pub const PFNGLTANGENT3IEXTPROC = ?extern fn (GLint, GLint, GLint) void;
pub const PFNGLTANGENT3IVEXTPROC = ?extern fn ([*c]const GLint) void;
pub const PFNGLTANGENT3SEXTPROC = ?extern fn (GLshort, GLshort, GLshort) void;
pub const PFNGLTANGENT3SVEXTPROC = ?extern fn ([*c]const GLshort) void;
pub const PFNGLBINORMAL3BEXTPROC = ?extern fn (GLbyte, GLbyte, GLbyte) void;
pub const PFNGLBINORMAL3BVEXTPROC = ?extern fn ([*c]const GLbyte) void;
pub const PFNGLBINORMAL3DEXTPROC = ?extern fn (GLdouble, GLdouble, GLdouble) void;
pub const PFNGLBINORMAL3DVEXTPROC = ?extern fn ([*c]const GLdouble) void;
pub const PFNGLBINORMAL3FEXTPROC = ?extern fn (GLfloat, GLfloat, GLfloat) void;
pub const PFNGLBINORMAL3FVEXTPROC = ?extern fn ([*c]const GLfloat) void;
pub const PFNGLBINORMAL3IEXTPROC = ?extern fn (GLint, GLint, GLint) void;
pub const PFNGLBINORMAL3IVEXTPROC = ?extern fn ([*c]const GLint) void;
pub const PFNGLBINORMAL3SEXTPROC = ?extern fn (GLshort, GLshort, GLshort) void;
pub const PFNGLBINORMAL3SVEXTPROC = ?extern fn ([*c]const GLshort) void;
pub const PFNGLTANGENTPOINTEREXTPROC = ?extern fn (GLenum, GLsizei, ?*const c_void) void;
pub const PFNGLBINORMALPOINTEREXTPROC = ?extern fn (GLenum, GLsizei, ?*const c_void) void;
pub const PFNGLCOPYTEXIMAGE1DEXTPROC = ?extern fn (GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint) void;
pub const PFNGLCOPYTEXIMAGE2DEXTPROC = ?extern fn (GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint) void;
pub const PFNGLCOPYTEXSUBIMAGE1DEXTPROC = ?extern fn (GLenum, GLint, GLint, GLint, GLint, GLsizei) void;
pub const PFNGLCOPYTEXSUBIMAGE2DEXTPROC = ?extern fn (GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) void;
pub const PFNGLCOPYTEXSUBIMAGE3DEXTPROC = ?extern fn (GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) void;
pub const PFNGLCULLPARAMETERDVEXTPROC = ?extern fn (GLenum, [*c]GLdouble) void;
pub const PFNGLCULLPARAMETERFVEXTPROC = ?extern fn (GLenum, [*c]GLfloat) void;
pub const PFNGLLABELOBJECTEXTPROC = ?extern fn (GLenum, GLuint, GLsizei, [*c]const GLchar) void;
pub const PFNGLGETOBJECTLABELEXTPROC = ?extern fn (GLenum, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) void;
pub const PFNGLINSERTEVENTMARKEREXTPROC = ?extern fn (GLsizei, [*c]const GLchar) void;
pub const PFNGLPUSHGROUPMARKEREXTPROC = ?extern fn (GLsizei, [*c]const GLchar) void;
pub const PFNGLPOPGROUPMARKEREXTPROC = ?extern fn () void;
pub const PFNGLDEPTHBOUNDSEXTPROC = ?extern fn (GLclampd, GLclampd) void;
pub const PFNGLMATRIXLOADFEXTPROC = ?extern fn (GLenum, [*c]const GLfloat) void;
pub const PFNGLMATRIXLOADDEXTPROC = ?extern fn (GLenum, [*c]const GLdouble) void;
pub const PFNGLMATRIXMULTFEXTPROC = ?extern fn (GLenum, [*c]const GLfloat) void;
pub const PFNGLMATRIXMULTDEXTPROC = ?extern fn (GLenum, [*c]const GLdouble) void;
pub const PFNGLMATRIXLOADIDENTITYEXTPROC = ?extern fn (GLenum) void;
pub const PFNGLMATRIXROTATEFEXTPROC = ?extern fn (GLenum, GLfloat, GLfloat, GLfloat, GLfloat) void;
pub const PFNGLMATRIXROTATEDEXTPROC = ?extern fn (GLenum, GLdouble, GLdouble, GLdouble, GLdouble) void;
pub const PFNGLMATRIXSCALEFEXTPROC = ?extern fn (GLenum, GLfloat, GLfloat, GLfloat) void;
pub const PFNGLMATRIXSCALEDEXTPROC = ?extern fn (GLenum, GLdouble, GLdouble, GLdouble) void;
pub const PFNGLMATRIXTRANSLATEFEXTPROC = ?extern fn (GLenum, GLfloat, GLfloat, GLfloat) void;
pub const PFNGLMATRIXTRANSLATEDEXTPROC = ?extern fn (GLenum, GLdouble, GLdouble, GLdouble) void;
pub const PFNGLMATRIXFRUSTUMEXTPROC = ?extern fn (GLenum, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble) void;
pub const PFNGLMATRIXORTHOEXTPROC = ?extern fn (GLenum, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble) void;
pub const PFNGLMATRIXPOPEXTPROC = ?extern fn (GLenum) void;
pub const PFNGLMATRIXPUSHEXTPROC = ?extern fn (GLenum) void;
pub const PFNGLCLIENTATTRIBDEFAULTEXTPROC = ?extern fn (GLbitfield) void;
pub const PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC = ?extern fn (GLbitfield) void;
pub const PFNGLTEXTUREPARAMETERFEXTPROC = ?extern fn (GLuint, GLenum, GLenum, GLfloat) void;
pub const PFNGLTEXTUREPARAMETERFVEXTPROC = ?extern fn (GLuint, GLenum, GLenum, [*c]const GLfloat) void;
pub const PFNGLTEXTUREPARAMETERIEXTPROC = ?extern fn (GLuint, GLenum, GLenum, GLint) void;
pub const PFNGLTEXTUREPARAMETERIVEXTPROC = ?extern fn (GLuint, GLenum, GLenum, [*c]const GLint) void;
pub const PFNGLTEXTUREIMAGE1DEXTPROC = ?extern fn (GLuint, GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, ?*const c_void) void;
pub const PFNGLTEXTUREIMAGE2DEXTPROC = ?extern fn (GLuint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const c_void) void;
pub const PFNGLTEXTURESUBIMAGE1DEXTPROC = ?extern fn (GLuint, GLenum, GLint, GLint, GLsizei, GLenum, GLenum, ?*const c_void) void;
pub const PFNGLTEXTURESUBIMAGE2DEXTPROC = ?extern fn (GLuint, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void) void;
pub const PFNGLCOPYTEXTUREIMAGE1DEXTPROC = ?extern fn (GLuint, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint) void;
pub const PFNGLCOPYTEXTUREIMAGE2DEXTPROC = ?extern fn (GLuint, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint) void;
pub const PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC = ?extern fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei) void;
pub const PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC = ?extern fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) void;
pub const PFNGLGETTEXTUREIMAGEEXTPROC = ?extern fn (GLuint, GLenum, GLint, GLenum, GLenum, ?*c_void) void;
pub const PFNGLGETTEXTUREPARAMETERFVEXTPROC = ?extern fn (GLuint, GLenum, GLenum, [*c]GLfloat) void;
pub const PFNGLGETTEXTUREPARAMETERIVEXTPROC = ?extern fn (GLuint, GLenum, GLenum, [*c]GLint) void;
pub const PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC = ?extern fn (GLuint, GLenum, GLint, GLenum, [*c]GLfloat) void;
pub const PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC = ?extern fn (GLuint, GLenum, GLint, GLenum, [*c]GLint) void;
pub const PFNGLTEXTUREIMAGE3DEXTPROC = ?extern fn (GLuint, GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const c_void) void;
pub const PFNGLTEXTURESUBIMAGE3DEXTPROC = ?extern fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void) void;
pub const PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC = ?extern fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) void;
pub const PFNGLBINDMULTITEXTUREEXTPROC = ?extern fn (GLenum, GLenum, GLuint) void;
pub const PFNGLMULTITEXCOORDPOINTEREXTPROC = ?extern fn (GLenum, GLint, GLenum, GLsizei, ?*const c_void) void;
pub const PFNGLMULTITEXENVFEXTPROC = ?extern fn (GLenum, GLenum, GLenum, GLfloat) void;
pub const PFNGLMULTITEXENVFVEXTPROC = ?extern fn (GLenum, GLenum, GLenum, [*c]const GLfloat) void;
pub const PFNGLMULTITEXENVIEXTPROC = ?extern fn (GLenum, GLenum, GLenum, GLint) void;
pub const PFNGLMULTITEXENVIVEXTPROC = ?extern fn (GLenum, GLenum, GLenum, [*c]const GLint) void;
pub const PFNGLMULTITEXGENDEXTPROC = ?extern fn (GLenum, GLenum, GLenum, GLdouble) void;
pub const PFNGLMULTITEXGENDVEXTPROC = ?extern fn (GLenum, GLenum, GLenum, [*c]const GLdouble) void;
pub const PFNGLMULTITEXGENFEXTPROC = ?extern fn (GLenum, GLenum, GLenum, GLfloat) void;
pub const PFNGLMULTITEXGENFVEXTPROC = ?extern fn (GLenum, GLenum, GLenum, [*c]const GLfloat) void;
pub const PFNGLMULTITEXGENIEXTPROC = ?extern fn (GLenum, GLenum, GLenum, GLint) void;
pub const PFNGLMULTITEXGENIVEXTPROC = ?extern fn (GLenum, GLenum, GLenum, [*c]const GLint) void;
pub const PFNGLGETMULTITEXENVFVEXTPROC = ?extern fn (GLenum, GLenum, GLenum, [*c]GLfloat) void;
pub const PFNGLGETMULTITEXENVIVEXTPROC = ?extern fn (GLenum, GLenum, GLenum, [*c]GLint) void;
pub const PFNGLGETMULTITEXGENDVEXTPROC = ?extern fn (GLenum, GLenum, GLenum, [*c]GLdouble) void;
pub const PFNGLGETMULTITEXGENFVEXTPROC = ?extern fn (GLenum, GLenum, GLenum, [*c]GLfloat) void;
pub const PFNGLGETMULTITEXGENIVEXTPROC = ?extern fn (GLenum, GLenum, GLenum, [*c]GLint) void;
pub const PFNGLMULTITEXPARAMETERIEXTPROC = ?extern fn (GLenum, GLenum, GLenum, GLint) void;
pub const PFNGLMULTITEXPARAMETERIVEXTPROC = ?extern fn (GLenum, GLenum, GLenum, [*c]const GLint) void;
pub const PFNGLMULTITEXPARAMETERFEXTPROC = ?extern fn (GLenum, GLenum, GLenum, GLfloat) void;
pub const PFNGLMULTITEXPARAMETERFVEXTPROC = ?extern fn (GLenum, GLenum, GLenum, [*c]const GLfloat) void;
pub const PFNGLMULTITEXIMAGE1DEXTPROC = ?extern fn (GLenum, GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, ?*const c_void) void;
pub const PFNGLMULTITEXIMAGE2DEXTPROC = ?extern fn (GLenum, GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const c_void) void;
pub const PFNGLMULTITEXSUBIMAGE1DEXTPROC = ?extern fn (GLenum, GLenum, GLint, GLint, GLsizei, GLenum, GLenum, ?*const c_void) void;
pub const PFNGLMULTITEXSUBIMAGE2DEXTPROC = ?extern fn (GLenum, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void) void;
pub const PFNGLCOPYMULTITEXIMAGE1DEXTPROC = ?extern fn (GLenum, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint) void;
pub const PFNGLCOPYMULTITEXIMAGE2DEXTPROC = ?extern fn (GLenum, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint) void;
pub const PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC = ?extern fn (GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei) void;
pub const PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC = ?extern fn (GLenum, GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) void;
pub const PFNGLGETMULTITEXIMAGEEXTPROC = ?extern fn (GLenum, GLenum, GLint, GLenum, GLenum, ?*c_void) void;
pub const PFNGLGETMULTITEXPARAMETERFVEXTPROC = ?extern fn (GLenum, GLenum, GLenum, [*c]GLfloat) void;
pub const PFNGLGETMULTITEXPARAMETERIVEXTPROC = ?extern fn (GLenum, GLenum, GLenum, [*c]GLint) void;
pub const PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC = ?extern fn (GLenum, GLenum, GLint, GLenum, [*c]GLfloat) void;
pub const PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC = ?extern fn (GLenum, GLenum, GLint, GLenum, [*c]GLint) void;
pub const PFNGLMULTITEXIMAGE3DEXTPROC = ?extern fn (GLenum, GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const c_void) void;
pub const PFNGLMULTITEXSUBIMAGE3DEXTPROC = ?extern fn (GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void) void;
pub const PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC = ?extern fn (GLenum, GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) void;
pub const PFNGLENABLECLIENTSTATEINDEXEDEXTPROC = ?extern fn (GLenum, GLuint) void;
pub const PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC = ?extern fn (GLenum, GLuint) void;
pub const PFNGLGETFLOATINDEXEDVEXTPROC = ?extern fn (GLenum, GLuint, [*c]GLfloat) void;
pub const PFNGLGETDOUBLEINDEXEDVEXTPROC = ?extern fn (GLenum, GLuint, [*c]GLdouble) void;
pub const PFNGLGETPOINTERINDEXEDVEXTPROC = ?extern fn (GLenum, GLuint, [*c](?*c_void)) void;
pub const PFNGLENABLEINDEXEDEXTPROC = ?extern fn (GLenum, GLuint) void;
pub const PFNGLDISABLEINDEXEDEXTPROC = ?extern fn (GLenum, GLuint) void;
pub const PFNGLISENABLEDINDEXEDEXTPROC = ?extern fn (GLenum, GLuint) GLboolean;
pub const PFNGLGETINTEGERINDEXEDVEXTPROC = ?extern fn (GLenum, GLuint, [*c]GLint) void;
pub const PFNGLGETBOOLEANINDEXEDVEXTPROC = ?extern fn (GLenum, GLuint, [*c]GLboolean) void;
pub const PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC = ?extern fn (GLuint, GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, ?*const c_void) void;
pub const PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC = ?extern fn (GLuint, GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, ?*const c_void) void;
pub const PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC = ?extern fn (GLuint, GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, ?*const c_void) void;
pub const PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC = ?extern fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, ?*const c_void) void;
pub const PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC = ?extern fn (GLuint, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, ?*const c_void) void;
pub const PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC = ?extern fn (GLuint, GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, ?*const c_void) void;
pub const PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC = ?extern fn (GLuint, GLenum, GLint, ?*c_void) void;
pub const PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC = ?extern fn (GLenum, GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, ?*const c_void) void;
pub const PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC = ?extern fn (GLenum, GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, ?*const c_void) void;
pub const PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC = ?extern fn (GLenum, GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, ?*const c_void) void;
pub const PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC = ?extern fn (GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, ?*const c_void) void;
pub const PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC = ?extern fn (GLenum, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, ?*const c_void) void;
pub const PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC = ?extern fn (GLenum, GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, ?*const c_void) void;
pub const PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC = ?extern fn (GLenum, GLenum, GLint, ?*c_void) void;
pub const PFNGLMATRIXLOADTRANSPOSEFEXTPROC = ?extern fn (GLenum, [*c]const GLfloat) void;
pub const PFNGLMATRIXLOADTRANSPOSEDEXTPROC = ?extern fn (GLenum, [*c]const GLdouble) void;
pub const PFNGLMATRIXMULTTRANSPOSEFEXTPROC = ?extern fn (GLenum, [*c]const GLfloat) void;
pub const PFNGLMATRIXMULTTRANSPOSEDEXTPROC = ?extern fn (GLenum, [*c]const GLdouble) void;
pub const PFNGLNAMEDBUFFERDATAEXTPROC = ?extern fn (GLuint, GLsizeiptr, ?*const c_void, GLenum) void;
pub const PFNGLNAMEDBUFFERSUBDATAEXTPROC = ?extern fn (GLuint, GLintptr, GLsizeiptr, ?*const c_void) void;
pub const PFNGLMAPNAMEDBUFFEREXTPROC = ?extern fn (GLuint, GLenum) ?*c_void;
pub const PFNGLUNMAPNAMEDBUFFEREXTPROC = ?extern fn (GLuint) GLboolean;
pub const PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC = ?extern fn (GLuint, GLenum, [*c]GLint) void;
pub const PFNGLGETNAMEDBUFFERPOINTERVEXTPROC = ?extern fn (GLuint, GLenum, [*c](?*c_void)) void;
pub const PFNGLGETNAMEDBUFFERSUBDATAEXTPROC = ?extern fn (GLuint, GLintptr, GLsizeiptr, ?*c_void) void;
pub const PFNGLPROGRAMUNIFORM1FEXTPROC = ?extern fn (GLuint, GLint, GLfloat) void;
pub const PFNGLPROGRAMUNIFORM2FEXTPROC = ?extern fn (GLuint, GLint, GLfloat, GLfloat) void;
pub const PFNGLPROGRAMUNIFORM3FEXTPROC = ?extern fn (GLuint, GLint, GLfloat, GLfloat, GLfloat) void;
pub const PFNGLPROGRAMUNIFORM4FEXTPROC = ?extern fn (GLuint, GLint, GLfloat, GLfloat, GLfloat, GLfloat) void;
pub const PFNGLPROGRAMUNIFORM1IEXTPROC = ?extern fn (GLuint, GLint, GLint) void;
pub const PFNGLPROGRAMUNIFORM2IEXTPROC = ?extern fn (GLuint, GLint, GLint, GLint) void;
pub const PFNGLPROGRAMUNIFORM3IEXTPROC = ?extern fn (GLuint, GLint, GLint, GLint, GLint) void;
pub const PFNGLPROGRAMUNIFORM4IEXTPROC = ?extern fn (GLuint, GLint, GLint, GLint, GLint, GLint) void;
pub const PFNGLPROGRAMUNIFORM1FVEXTPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLfloat) void;
pub const PFNGLPROGRAMUNIFORM2FVEXTPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLfloat) void;
pub const PFNGLPROGRAMUNIFORM3FVEXTPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLfloat) void;
pub const PFNGLPROGRAMUNIFORM4FVEXTPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLfloat) void;
pub const PFNGLPROGRAMUNIFORM1IVEXTPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLint) void;
pub const PFNGLPROGRAMUNIFORM2IVEXTPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLint) void;
pub const PFNGLPROGRAMUNIFORM3IVEXTPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLint) void;
pub const PFNGLPROGRAMUNIFORM4IVEXTPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLint) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC = ?extern fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC = ?extern fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC = ?extern fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC = ?extern fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC = ?extern fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC = ?extern fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC = ?extern fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC = ?extern fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC = ?extern fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) void;
pub const PFNGLTEXTUREBUFFEREXTPROC = ?extern fn (GLuint, GLenum, GLenum, GLuint) void;
pub const PFNGLMULTITEXBUFFEREXTPROC = ?extern fn (GLenum, GLenum, GLenum, GLuint) void;
pub const PFNGLTEXTUREPARAMETERIIVEXTPROC = ?extern fn (GLuint, GLenum, GLenum, [*c]const GLint) void;
pub const PFNGLTEXTUREPARAMETERIUIVEXTPROC = ?extern fn (GLuint, GLenum, GLenum, [*c]const GLuint) void;
pub const PFNGLGETTEXTUREPARAMETERIIVEXTPROC = ?extern fn (GLuint, GLenum, GLenum, [*c]GLint) void;
pub const PFNGLGETTEXTUREPARAMETERIUIVEXTPROC = ?extern fn (GLuint, GLenum, GLenum, [*c]GLuint) void;
pub const PFNGLMULTITEXPARAMETERIIVEXTPROC = ?extern fn (GLenum, GLenum, GLenum, [*c]const GLint) void;
pub const PFNGLMULTITEXPARAMETERIUIVEXTPROC = ?extern fn (GLenum, GLenum, GLenum, [*c]const GLuint) void;
pub const PFNGLGETMULTITEXPARAMETERIIVEXTPROC = ?extern fn (GLenum, GLenum, GLenum, [*c]GLint) void;
pub const PFNGLGETMULTITEXPARAMETERIUIVEXTPROC = ?extern fn (GLenum, GLenum, GLenum, [*c]GLuint) void;
pub const PFNGLPROGRAMUNIFORM1UIEXTPROC = ?extern fn (GLuint, GLint, GLuint) void;
pub const PFNGLPROGRAMUNIFORM2UIEXTPROC = ?extern fn (GLuint, GLint, GLuint, GLuint) void;
pub const PFNGLPROGRAMUNIFORM3UIEXTPROC = ?extern fn (GLuint, GLint, GLuint, GLuint, GLuint) void;
pub const PFNGLPROGRAMUNIFORM4UIEXTPROC = ?extern fn (GLuint, GLint, GLuint, GLuint, GLuint, GLuint) void;
pub const PFNGLPROGRAMUNIFORM1UIVEXTPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLuint) void;
pub const PFNGLPROGRAMUNIFORM2UIVEXTPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLuint) void;
pub const PFNGLPROGRAMUNIFORM3UIVEXTPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLuint) void;
pub const PFNGLPROGRAMUNIFORM4UIVEXTPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLuint) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC = ?extern fn (GLuint, GLenum, GLuint, GLsizei, [*c]const GLfloat) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC = ?extern fn (GLuint, GLenum, GLuint, GLint, GLint, GLint, GLint) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC = ?extern fn (GLuint, GLenum, GLuint, [*c]const GLint) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC = ?extern fn (GLuint, GLenum, GLuint, GLsizei, [*c]const GLint) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC = ?extern fn (GLuint, GLenum, GLuint, GLuint, GLuint, GLuint, GLuint) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC = ?extern fn (GLuint, GLenum, GLuint, [*c]const GLuint) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC = ?extern fn (GLuint, GLenum, GLuint, GLsizei, [*c]const GLuint) void;
pub const PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC = ?extern fn (GLuint, GLenum, GLuint, [*c]GLint) void;
pub const PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC = ?extern fn (GLuint, GLenum, GLuint, [*c]GLuint) void;
pub const PFNGLENABLECLIENTSTATEIEXTPROC = ?extern fn (GLenum, GLuint) void;
pub const PFNGLDISABLECLIENTSTATEIEXTPROC = ?extern fn (GLenum, GLuint) void;
pub const PFNGLGETFLOATI_VEXTPROC = ?extern fn (GLenum, GLuint, [*c]GLfloat) void;
pub const PFNGLGETDOUBLEI_VEXTPROC = ?extern fn (GLenum, GLuint, [*c]GLdouble) void;
pub const PFNGLGETPOINTERI_VEXTPROC = ?extern fn (GLenum, GLuint, [*c](?*c_void)) void;
pub const PFNGLNAMEDPROGRAMSTRINGEXTPROC = ?extern fn (GLuint, GLenum, GLenum, GLsizei, ?*const c_void) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC = ?extern fn (GLuint, GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC = ?extern fn (GLuint, GLenum, GLuint, [*c]const GLdouble) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC = ?extern fn (GLuint, GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC = ?extern fn (GLuint, GLenum, GLuint, [*c]const GLfloat) void;
pub const PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC = ?extern fn (GLuint, GLenum, GLuint, [*c]GLdouble) void;
pub const PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC = ?extern fn (GLuint, GLenum, GLuint, [*c]GLfloat) void;
pub const PFNGLGETNAMEDPROGRAMIVEXTPROC = ?extern fn (GLuint, GLenum, GLenum, [*c]GLint) void;
pub const PFNGLGETNAMEDPROGRAMSTRINGEXTPROC = ?extern fn (GLuint, GLenum, GLenum, ?*c_void) void;
pub const PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC = ?extern fn (GLuint, GLenum, GLsizei, GLsizei) void;
pub const PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC = ?extern fn (GLuint, GLenum, [*c]GLint) void;
pub const PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC = ?extern fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei) void;
pub const PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC = ?extern fn (GLuint, GLsizei, GLsizei, GLenum, GLsizei, GLsizei) void;
pub const PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC = ?extern fn (GLuint, GLenum) GLenum;
pub const PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC = ?extern fn (GLuint, GLenum, GLenum, GLuint, GLint) void;
pub const PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC = ?extern fn (GLuint, GLenum, GLenum, GLuint, GLint) void;
pub const PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC = ?extern fn (GLuint, GLenum, GLenum, GLuint, GLint, GLint) void;
pub const PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC = ?extern fn (GLuint, GLenum, GLenum, GLuint) void;
pub const PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC = ?extern fn (GLuint, GLenum, GLenum, [*c]GLint) void;
pub const PFNGLGENERATETEXTUREMIPMAPEXTPROC = ?extern fn (GLuint, GLenum) void;
pub const PFNGLGENERATEMULTITEXMIPMAPEXTPROC = ?extern fn (GLenum, GLenum) void;
pub const PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC = ?extern fn (GLuint, GLenum) void;
pub const PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC = ?extern fn (GLuint, GLsizei, [*c]const GLenum) void;
pub const PFNGLFRAMEBUFFERREADBUFFEREXTPROC = ?extern fn (GLuint, GLenum) void;
pub const PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC = ?extern fn (GLuint, GLenum, [*c]GLint) void;
pub const PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC = ?extern fn (GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr) void;
pub const PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC = ?extern fn (GLuint, GLenum, GLuint, GLint) void;
pub const PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC = ?extern fn (GLuint, GLenum, GLuint, GLint, GLint) void;
pub const PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC = ?extern fn (GLuint, GLenum, GLuint, GLint, GLenum) void;
pub const PFNGLTEXTURERENDERBUFFEREXTPROC = ?extern fn (GLuint, GLenum, GLuint) void;
pub const PFNGLMULTITEXRENDERBUFFEREXTPROC = ?extern fn (GLenum, GLenum, GLuint) void;
pub const PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC = ?extern fn (GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr) void;
pub const PFNGLVERTEXARRAYCOLOROFFSETEXTPROC = ?extern fn (GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr) void;
pub const PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC = ?extern fn (GLuint, GLuint, GLsizei, GLintptr) void;
pub const PFNGLVERTEXARRAYINDEXOFFSETEXTPROC = ?extern fn (GLuint, GLuint, GLenum, GLsizei, GLintptr) void;
pub const PFNGLVERTEXARRAYNORMALOFFSETEXTPROC = ?extern fn (GLuint, GLuint, GLenum, GLsizei, GLintptr) void;
pub const PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC = ?extern fn (GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr) void;
pub const PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC = ?extern fn (GLuint, GLuint, GLenum, GLint, GLenum, GLsizei, GLintptr) void;
pub const PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC = ?extern fn (GLuint, GLuint, GLenum, GLsizei, GLintptr) void;
pub const PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC = ?extern fn (GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr) void;
pub const PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC = ?extern fn (GLuint, GLuint, GLuint, GLint, GLenum, GLboolean, GLsizei, GLintptr) void;
pub const PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC = ?extern fn (GLuint, GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr) void;
pub const PFNGLENABLEVERTEXARRAYEXTPROC = ?extern fn (GLuint, GLenum) void;
pub const PFNGLDISABLEVERTEXARRAYEXTPROC = ?extern fn (GLuint, GLenum) void;
pub const PFNGLENABLEVERTEXARRAYATTRIBEXTPROC = ?extern fn (GLuint, GLuint) void;
pub const PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC = ?extern fn (GLuint, GLuint) void;
pub const PFNGLGETVERTEXARRAYINTEGERVEXTPROC = ?extern fn (GLuint, GLenum, [*c]GLint) void;
pub const PFNGLGETVERTEXARRAYPOINTERVEXTPROC = ?extern fn (GLuint, GLenum, [*c](?*c_void)) void;
pub const PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC = ?extern fn (GLuint, GLuint, GLenum, [*c]GLint) void;
pub const PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC = ?extern fn (GLuint, GLuint, GLenum, [*c](?*c_void)) void;
pub const PFNGLMAPNAMEDBUFFERRANGEEXTPROC = ?extern fn (GLuint, GLintptr, GLsizeiptr, GLbitfield) ?*c_void;
pub const PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC = ?extern fn (GLuint, GLintptr, GLsizeiptr) void;
pub const PFNGLNAMEDBUFFERSTORAGEEXTPROC = ?extern fn (GLuint, GLsizeiptr, ?*const c_void, GLbitfield) void;
pub const PFNGLCLEARNAMEDBUFFERDATAEXTPROC = ?extern fn (GLuint, GLenum, GLenum, GLenum, ?*const c_void) void;
pub const PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC = ?extern fn (GLuint, GLenum, GLsizeiptr, GLsizeiptr, GLenum, GLenum, ?*const c_void) void;
pub const PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC = ?extern fn (GLuint, GLenum, GLint) void;
pub const PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC = ?extern fn (GLuint, GLenum, [*c]GLint) void;
pub const PFNGLPROGRAMUNIFORM1DEXTPROC = ?extern fn (GLuint, GLint, GLdouble) void;
pub const PFNGLPROGRAMUNIFORM2DEXTPROC = ?extern fn (GLuint, GLint, GLdouble, GLdouble) void;
pub const PFNGLPROGRAMUNIFORM3DEXTPROC = ?extern fn (GLuint, GLint, GLdouble, GLdouble, GLdouble) void;
pub const PFNGLPROGRAMUNIFORM4DEXTPROC = ?extern fn (GLuint, GLint, GLdouble, GLdouble, GLdouble, GLdouble) void;
pub const PFNGLPROGRAMUNIFORM1DVEXTPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLdouble) void;
pub const PFNGLPROGRAMUNIFORM2DVEXTPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLdouble) void;
pub const PFNGLPROGRAMUNIFORM3DVEXTPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLdouble) void;
pub const PFNGLPROGRAMUNIFORM4DVEXTPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLdouble) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC = ?extern fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC = ?extern fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC = ?extern fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC = ?extern fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC = ?extern fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC = ?extern fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC = ?extern fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC = ?extern fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC = ?extern fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) void;
pub const PFNGLTEXTUREBUFFERRANGEEXTPROC = ?extern fn (GLuint, GLenum, GLenum, GLuint, GLintptr, GLsizeiptr) void;
pub const PFNGLTEXTURESTORAGE1DEXTPROC = ?extern fn (GLuint, GLenum, GLsizei, GLenum, GLsizei) void;
pub const PFNGLTEXTURESTORAGE2DEXTPROC = ?extern fn (GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei) void;
pub const PFNGLTEXTURESTORAGE3DEXTPROC = ?extern fn (GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei) void;
pub const PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC = ?extern fn (GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean) void;
pub const PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC = ?extern fn (GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean) void;
pub const PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC = ?extern fn (GLuint, GLuint, GLuint, GLintptr, GLsizei) void;
pub const PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC = ?extern fn (GLuint, GLuint, GLint, GLenum, GLboolean, GLuint) void;
pub const PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC = ?extern fn (GLuint, GLuint, GLint, GLenum, GLuint) void;
pub const PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC = ?extern fn (GLuint, GLuint, GLint, GLenum, GLuint) void;
pub const PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC = ?extern fn (GLuint, GLuint, GLuint) void;
pub const PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC = ?extern fn (GLuint, GLuint, GLuint) void;
pub const PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC = ?extern fn (GLuint, GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr) void;
pub const PFNGLTEXTUREPAGECOMMITMENTEXTPROC = ?extern fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLboolean) void;
pub const PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC = ?extern fn (GLuint, GLuint, GLuint) void;
pub const PFNGLCOLORMASKINDEXEDEXTPROC = ?extern fn (GLuint, GLboolean, GLboolean, GLboolean, GLboolean) void;
pub const PFNGLDRAWARRAYSINSTANCEDEXTPROC = ?extern fn (GLenum, GLint, GLsizei, GLsizei) void;
pub const PFNGLDRAWELEMENTSINSTANCEDEXTPROC = ?extern fn (GLenum, GLsizei, GLenum, ?*const c_void, GLsizei) void;
pub const PFNGLDRAWRANGEELEMENTSEXTPROC = ?extern fn (GLenum, GLuint, GLuint, GLsizei, GLenum, ?*const c_void) void;
pub const GLeglClientBufferEXT = ?*c_void;
pub const PFNGLBUFFERSTORAGEEXTERNALEXTPROC = ?extern fn (GLenum, GLintptr, GLsizeiptr, GLeglClientBufferEXT, GLbitfield) void;
pub const PFNGLNAMEDBUFFERSTORAGEEXTERNALEXTPROC = ?extern fn (GLuint, GLintptr, GLsizeiptr, GLeglClientBufferEXT, GLbitfield) void;
pub const PFNGLFOGCOORDFEXTPROC = ?extern fn (GLfloat) void;
pub const PFNGLFOGCOORDFVEXTPROC = ?extern fn ([*c]const GLfloat) void;
pub const PFNGLFOGCOORDDEXTPROC = ?extern fn (GLdouble) void;
pub const PFNGLFOGCOORDDVEXTPROC = ?extern fn ([*c]const GLdouble) void;
pub const PFNGLFOGCOORDPOINTEREXTPROC = ?extern fn (GLenum, GLsizei, ?*const c_void) void;
pub const PFNGLBLITFRAMEBUFFEREXTPROC = ?extern fn (GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) void;
pub const PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC = ?extern fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) void;
pub const PFNGLISRENDERBUFFEREXTPROC = ?extern fn (GLuint) GLboolean;
pub const PFNGLBINDRENDERBUFFEREXTPROC = ?extern fn (GLenum, GLuint) void;
pub const PFNGLDELETERENDERBUFFERSEXTPROC = ?extern fn (GLsizei, [*c]const GLuint) void;
pub const PFNGLGENRENDERBUFFERSEXTPROC = ?extern fn (GLsizei, [*c]GLuint) void;
pub const PFNGLRENDERBUFFERSTORAGEEXTPROC = ?extern fn (GLenum, GLenum, GLsizei, GLsizei) void;
pub const PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC = ?extern fn (GLenum, GLenum, [*c]GLint) void;
pub const PFNGLISFRAMEBUFFEREXTPROC = ?extern fn (GLuint) GLboolean;
pub const PFNGLBINDFRAMEBUFFEREXTPROC = ?extern fn (GLenum, GLuint) void;
pub const PFNGLDELETEFRAMEBUFFERSEXTPROC = ?extern fn (GLsizei, [*c]const GLuint) void;
pub const PFNGLGENFRAMEBUFFERSEXTPROC = ?extern fn (GLsizei, [*c]GLuint) void;
pub const PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC = ?extern fn (GLenum) GLenum;
pub const PFNGLFRAMEBUFFERTEXTURE1DEXTPROC = ?extern fn (GLenum, GLenum, GLenum, GLuint, GLint) void;
pub const PFNGLFRAMEBUFFERTEXTURE2DEXTPROC = ?extern fn (GLenum, GLenum, GLenum, GLuint, GLint) void;
pub const PFNGLFRAMEBUFFERTEXTURE3DEXTPROC = ?extern fn (GLenum, GLenum, GLenum, GLuint, GLint, GLint) void;
pub const PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC = ?extern fn (GLenum, GLenum, GLenum, GLuint) void;
pub const PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC = ?extern fn (GLenum, GLenum, GLenum, [*c]GLint) void;
pub const PFNGLGENERATEMIPMAPEXTPROC = ?extern fn (GLenum) void;
pub const PFNGLPROGRAMPARAMETERIEXTPROC = ?extern fn (GLuint, GLenum, GLint) void;
pub const PFNGLPROGRAMENVPARAMETERS4FVEXTPROC = ?extern fn (GLenum, GLuint, GLsizei, [*c]const GLfloat) void;
pub const PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC = ?extern fn (GLenum, GLuint, GLsizei, [*c]const GLfloat) void;
pub const PFNGLGETUNIFORMUIVEXTPROC = ?extern fn (GLuint, GLint, [*c]GLuint) void;
pub const PFNGLBINDFRAGDATALOCATIONEXTPROC = ?extern fn (GLuint, GLuint, [*c]const GLchar) void;
pub const PFNGLGETFRAGDATALOCATIONEXTPROC = ?extern fn (GLuint, [*c]const GLchar) GLint;
pub const PFNGLUNIFORM1UIEXTPROC = ?extern fn (GLint, GLuint) void;
pub const PFNGLUNIFORM2UIEXTPROC = ?extern fn (GLint, GLuint, GLuint) void;
pub const PFNGLUNIFORM3UIEXTPROC = ?extern fn (GLint, GLuint, GLuint, GLuint) void;
pub const PFNGLUNIFORM4UIEXTPROC = ?extern fn (GLint, GLuint, GLuint, GLuint, GLuint) void;
pub const PFNGLUNIFORM1UIVEXTPROC = ?extern fn (GLint, GLsizei, [*c]const GLuint) void;
pub const PFNGLUNIFORM2UIVEXTPROC = ?extern fn (GLint, GLsizei, [*c]const GLuint) void;
pub const PFNGLUNIFORM3UIVEXTPROC = ?extern fn (GLint, GLsizei, [*c]const GLuint) void;
pub const PFNGLUNIFORM4UIVEXTPROC = ?extern fn (GLint, GLsizei, [*c]const GLuint) void;
pub const PFNGLGETHISTOGRAMEXTPROC = ?extern fn (GLenum, GLboolean, GLenum, GLenum, ?*c_void) void;
pub const PFNGLGETHISTOGRAMPARAMETERFVEXTPROC = ?extern fn (GLenum, GLenum, [*c]GLfloat) void;
pub const PFNGLGETHISTOGRAMPARAMETERIVEXTPROC = ?extern fn (GLenum, GLenum, [*c]GLint) void;
pub const PFNGLGETMINMAXEXTPROC = ?extern fn (GLenum, GLboolean, GLenum, GLenum, ?*c_void) void;
pub const PFNGLGETMINMAXPARAMETERFVEXTPROC = ?extern fn (GLenum, GLenum, [*c]GLfloat) void;
pub const PFNGLGETMINMAXPARAMETERIVEXTPROC = ?extern fn (GLenum, GLenum, [*c]GLint) void;
pub const PFNGLHISTOGRAMEXTPROC = ?extern fn (GLenum, GLsizei, GLenum, GLboolean) void;
pub const PFNGLMINMAXEXTPROC = ?extern fn (GLenum, GLenum, GLboolean) void;
pub const PFNGLRESETHISTOGRAMEXTPROC = ?extern fn (GLenum) void;
pub const PFNGLRESETMINMAXEXTPROC = ?extern fn (GLenum) void;
pub const PFNGLINDEXFUNCEXTPROC = ?extern fn (GLenum, GLclampf) void;
pub const PFNGLINDEXMATERIALEXTPROC = ?extern fn (GLenum, GLenum) void;
pub const PFNGLAPPLYTEXTUREEXTPROC = ?extern fn (GLenum) void;
pub const PFNGLTEXTURELIGHTEXTPROC = ?extern fn (GLenum) void;
pub const PFNGLTEXTUREMATERIALEXTPROC = ?extern fn (GLenum, GLenum) void;
pub const PFNGLGETUNSIGNEDBYTEVEXTPROC = ?extern fn (GLenum, [*c]GLubyte) void;
pub const PFNGLGETUNSIGNEDBYTEI_VEXTPROC = ?extern fn (GLenum, GLuint, [*c]GLubyte) void;
pub const PFNGLDELETEMEMORYOBJECTSEXTPROC = ?extern fn (GLsizei, [*c]const GLuint) void;
pub const PFNGLISMEMORYOBJECTEXTPROC = ?extern fn (GLuint) GLboolean;
pub const PFNGLCREATEMEMORYOBJECTSEXTPROC = ?extern fn (GLsizei, [*c]GLuint) void;
pub const PFNGLMEMORYOBJECTPARAMETERIVEXTPROC = ?extern fn (GLuint, GLenum, [*c]const GLint) void;
pub const PFNGLGETMEMORYOBJECTPARAMETERIVEXTPROC = ?extern fn (GLuint, GLenum, [*c]GLint) void;
pub const PFNGLTEXSTORAGEMEM2DEXTPROC = ?extern fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLuint, GLuint64) void;
pub const PFNGLTEXSTORAGEMEM2DMULTISAMPLEEXTPROC = ?extern fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean, GLuint, GLuint64) void;
pub const PFNGLTEXSTORAGEMEM3DEXTPROC = ?extern fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLuint, GLuint64) void;
pub const PFNGLTEXSTORAGEMEM3DMULTISAMPLEEXTPROC = ?extern fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean, GLuint, GLuint64) void;
pub const PFNGLBUFFERSTORAGEMEMEXTPROC = ?extern fn (GLenum, GLsizeiptr, GLuint, GLuint64) void;
pub const PFNGLTEXTURESTORAGEMEM2DEXTPROC = ?extern fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLuint, GLuint64) void;
pub const PFNGLTEXTURESTORAGEMEM2DMULTISAMPLEEXTPROC = ?extern fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLboolean, GLuint, GLuint64) void;
pub const PFNGLTEXTURESTORAGEMEM3DEXTPROC = ?extern fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLuint, GLuint64) void;
pub const PFNGLTEXTURESTORAGEMEM3DMULTISAMPLEEXTPROC = ?extern fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean, GLuint, GLuint64) void;
pub const PFNGLNAMEDBUFFERSTORAGEMEMEXTPROC = ?extern fn (GLuint, GLsizeiptr, GLuint, GLuint64) void;
pub const PFNGLTEXSTORAGEMEM1DEXTPROC = ?extern fn (GLenum, GLsizei, GLenum, GLsizei, GLuint, GLuint64) void;
pub const PFNGLTEXTURESTORAGEMEM1DEXTPROC = ?extern fn (GLuint, GLsizei, GLenum, GLsizei, GLuint, GLuint64) void;
pub const PFNGLIMPORTMEMORYFDEXTPROC = ?extern fn (GLuint, GLuint64, GLenum, GLint) void;
pub const PFNGLIMPORTMEMORYWIN32HANDLEEXTPROC = ?extern fn (GLuint, GLuint64, GLenum, ?*c_void) void;
pub const PFNGLIMPORTMEMORYWIN32NAMEEXTPROC = ?extern fn (GLuint, GLuint64, GLenum, ?*const c_void) void;
pub const PFNGLMULTIDRAWARRAYSEXTPROC = ?extern fn (GLenum, [*c]const GLint, [*c]const GLsizei, GLsizei) void;
pub const PFNGLMULTIDRAWELEMENTSEXTPROC = ?extern fn (GLenum, [*c]const GLsizei, GLenum, [*c]const (?*const c_void), GLsizei) void;
pub const PFNGLSAMPLEMASKEXTPROC = ?extern fn (GLclampf, GLboolean) void;
pub const PFNGLSAMPLEPATTERNEXTPROC = ?extern fn (GLenum) void;
pub const PFNGLCOLORTABLEEXTPROC = ?extern fn (GLenum, GLenum, GLsizei, GLenum, GLenum, ?*const c_void) void;
pub const PFNGLGETCOLORTABLEEXTPROC = ?extern fn (GLenum, GLenum, GLenum, ?*c_void) void;
pub const PFNGLGETCOLORTABLEPARAMETERIVEXTPROC = ?extern fn (GLenum, GLenum, [*c]GLint) void;
pub const PFNGLGETCOLORTABLEPARAMETERFVEXTPROC = ?extern fn (GLenum, GLenum, [*c]GLfloat) void;
pub const PFNGLPIXELTRANSFORMPARAMETERIEXTPROC = ?extern fn (GLenum, GLenum, GLint) void;
pub const PFNGLPIXELTRANSFORMPARAMETERFEXTPROC = ?extern fn (GLenum, GLenum, GLfloat) void;
pub const PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC = ?extern fn (GLenum, GLenum, [*c]const GLint) void;
pub const PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC = ?extern fn (GLenum, GLenum, [*c]const GLfloat) void;
pub const PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC = ?extern fn (GLenum, GLenum, [*c]GLint) void;
pub const PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC = ?extern fn (GLenum, GLenum, [*c]GLfloat) void;
pub const PFNGLPOINTPARAMETERFEXTPROC = ?extern fn (GLenum, GLfloat) void;
pub const PFNGLPOINTPARAMETERFVEXTPROC = ?extern fn (GLenum, [*c]const GLfloat) void;
pub const PFNGLPOLYGONOFFSETEXTPROC = ?extern fn (GLfloat, GLfloat) void;
pub const PFNGLPOLYGONOFFSETCLAMPEXTPROC = ?extern fn (GLfloat, GLfloat, GLfloat) void;
pub const PFNGLPROVOKINGVERTEXEXTPROC = ?extern fn (GLenum) void;
pub const PFNGLRASTERSAMPLESEXTPROC = ?extern fn (GLuint, GLboolean) void;
pub const PFNGLSECONDARYCOLOR3BEXTPROC = ?extern fn (GLbyte, GLbyte, GLbyte) void;
pub const PFNGLSECONDARYCOLOR3BVEXTPROC = ?extern fn ([*c]const GLbyte) void;
pub const PFNGLSECONDARYCOLOR3DEXTPROC = ?extern fn (GLdouble, GLdouble, GLdouble) void;
pub const PFNGLSECONDARYCOLOR3DVEXTPROC = ?extern fn ([*c]const GLdouble) void;
pub const PFNGLSECONDARYCOLOR3FEXTPROC = ?extern fn (GLfloat, GLfloat, GLfloat) void;
pub const PFNGLSECONDARYCOLOR3FVEXTPROC = ?extern fn ([*c]const GLfloat) void;
pub const PFNGLSECONDARYCOLOR3IEXTPROC = ?extern fn (GLint, GLint, GLint) void;
pub const PFNGLSECONDARYCOLOR3IVEXTPROC = ?extern fn ([*c]const GLint) void;
pub const PFNGLSECONDARYCOLOR3SEXTPROC = ?extern fn (GLshort, GLshort, GLshort) void;
pub const PFNGLSECONDARYCOLOR3SVEXTPROC = ?extern fn ([*c]const GLshort) void;
pub const PFNGLSECONDARYCOLOR3UBEXTPROC = ?extern fn (GLubyte, GLubyte, GLubyte) void;
pub const PFNGLSECONDARYCOLOR3UBVEXTPROC = ?extern fn ([*c]const GLubyte) void;
pub const PFNGLSECONDARYCOLOR3UIEXTPROC = ?extern fn (GLuint, GLuint, GLuint) void;
pub const PFNGLSECONDARYCOLOR3UIVEXTPROC = ?extern fn ([*c]const GLuint) void;
pub const PFNGLSECONDARYCOLOR3USEXTPROC = ?extern fn (GLushort, GLushort, GLushort) void;
pub const PFNGLSECONDARYCOLOR3USVEXTPROC = ?extern fn ([*c]const GLushort) void;
pub const PFNGLSECONDARYCOLORPOINTEREXTPROC = ?extern fn (GLint, GLenum, GLsizei, ?*const c_void) void;
pub const PFNGLGENSEMAPHORESEXTPROC = ?extern fn (GLsizei, [*c]GLuint) void;
pub const PFNGLDELETESEMAPHORESEXTPROC = ?extern fn (GLsizei, [*c]const GLuint) void;
pub const PFNGLISSEMAPHOREEXTPROC = ?extern fn (GLuint) GLboolean;
pub const PFNGLSEMAPHOREPARAMETERUI64VEXTPROC = ?extern fn (GLuint, GLenum, [*c]const GLuint64) void;
pub const PFNGLGETSEMAPHOREPARAMETERUI64VEXTPROC = ?extern fn (GLuint, GLenum, [*c]GLuint64) void;
pub const PFNGLWAITSEMAPHOREEXTPROC = ?extern fn (GLuint, GLuint, [*c]const GLuint, GLuint, [*c]const GLuint, [*c]const GLenum) void;
pub const PFNGLSIGNALSEMAPHOREEXTPROC = ?extern fn (GLuint, GLuint, [*c]const GLuint, GLuint, [*c]const GLuint, [*c]const GLenum) void;
pub const PFNGLIMPORTSEMAPHOREFDEXTPROC = ?extern fn (GLuint, GLenum, GLint) void;
pub const PFNGLIMPORTSEMAPHOREWIN32HANDLEEXTPROC = ?extern fn (GLuint, GLenum, ?*c_void) void;
pub const PFNGLIMPORTSEMAPHOREWIN32NAMEEXTPROC = ?extern fn (GLuint, GLenum, ?*const c_void) void;
pub const PFNGLUSESHADERPROGRAMEXTPROC = ?extern fn (GLenum, GLuint) void;
pub const PFNGLACTIVEPROGRAMEXTPROC = ?extern fn (GLuint) void;
pub const PFNGLCREATESHADERPROGRAMEXTPROC = ?extern fn (GLenum, [*c]const GLchar) GLuint;
pub const PFNGLFRAMEBUFFERFETCHBARRIEREXTPROC = ?extern fn () void;
pub const PFNGLBINDIMAGETEXTUREEXTPROC = ?extern fn (GLuint, GLuint, GLint, GLboolean, GLint, GLenum, GLint) void;
pub const PFNGLMEMORYBARRIEREXTPROC = ?extern fn (GLbitfield) void;
pub const PFNGLSTENCILCLEARTAGEXTPROC = ?extern fn (GLsizei, GLuint) void;
pub const PFNGLACTIVESTENCILFACEEXTPROC = ?extern fn (GLenum) void;
pub const PFNGLTEXSUBIMAGE1DEXTPROC = ?extern fn (GLenum, GLint, GLint, GLsizei, GLenum, GLenum, ?*const c_void) void;
pub const PFNGLTEXSUBIMAGE2DEXTPROC = ?extern fn (GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void) void;
pub const PFNGLTEXIMAGE3DEXTPROC = ?extern fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const c_void) void;
pub const PFNGLTEXSUBIMAGE3DEXTPROC = ?extern fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void) void;
pub const PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC = ?extern fn (GLenum, GLenum, GLuint, GLint, GLint) void;
pub const PFNGLTEXBUFFEREXTPROC = ?extern fn (GLenum, GLenum, GLuint) void;
pub const PFNGLTEXPARAMETERIIVEXTPROC = ?extern fn (GLenum, GLenum, [*c]const GLint) void;
pub const PFNGLTEXPARAMETERIUIVEXTPROC = ?extern fn (GLenum, GLenum, [*c]const GLuint) void;
pub const PFNGLGETTEXPARAMETERIIVEXTPROC = ?extern fn (GLenum, GLenum, [*c]GLint) void;
pub const PFNGLGETTEXPARAMETERIUIVEXTPROC = ?extern fn (GLenum, GLenum, [*c]GLuint) void;
pub const PFNGLCLEARCOLORIIEXTPROC = ?extern fn (GLint, GLint, GLint, GLint) void;
pub const PFNGLCLEARCOLORIUIEXTPROC = ?extern fn (GLuint, GLuint, GLuint, GLuint) void;
pub const PFNGLARETEXTURESRESIDENTEXTPROC = ?extern fn (GLsizei, [*c]const GLuint, [*c]GLboolean) GLboolean;
pub const PFNGLBINDTEXTUREEXTPROC = ?extern fn (GLenum, GLuint) void;
pub const PFNGLDELETETEXTURESEXTPROC = ?extern fn (GLsizei, [*c]const GLuint) void;
pub const PFNGLGENTEXTURESEXTPROC = ?extern fn (GLsizei, [*c]GLuint) void;
pub const PFNGLISTEXTUREEXTPROC = ?extern fn (GLuint) GLboolean;
pub const PFNGLPRIORITIZETEXTURESEXTPROC = ?extern fn (GLsizei, [*c]const GLuint, [*c]const GLclampf) void;
pub const PFNGLTEXTURENORMALEXTPROC = ?extern fn (GLenum) void;
pub const PFNGLGETQUERYOBJECTI64VEXTPROC = ?extern fn (GLuint, GLenum, [*c]GLint64) void;
pub const PFNGLGETQUERYOBJECTUI64VEXTPROC = ?extern fn (GLuint, GLenum, [*c]GLuint64) void;
pub const PFNGLBEGINTRANSFORMFEEDBACKEXTPROC = ?extern fn (GLenum) void;
pub const PFNGLENDTRANSFORMFEEDBACKEXTPROC = ?extern fn () void;
pub const PFNGLBINDBUFFERRANGEEXTPROC = ?extern fn (GLenum, GLuint, GLuint, GLintptr, GLsizeiptr) void;
pub const PFNGLBINDBUFFEROFFSETEXTPROC = ?extern fn (GLenum, GLuint, GLuint, GLintptr) void;
pub const PFNGLBINDBUFFERBASEEXTPROC = ?extern fn (GLenum, GLuint, GLuint) void;
pub const PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC = ?extern fn (GLuint, GLsizei, [*c]const ([*c]const GLchar), GLenum) void;
pub const PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC = ?extern fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLsizei, [*c]GLenum, [*c]GLchar) void;
pub const PFNGLARRAYELEMENTEXTPROC = ?extern fn (GLint) void;
pub const PFNGLCOLORPOINTEREXTPROC = ?extern fn (GLint, GLenum, GLsizei, GLsizei, ?*const c_void) void;
pub const PFNGLDRAWARRAYSEXTPROC = ?extern fn (GLenum, GLint, GLsizei) void;
pub const PFNGLEDGEFLAGPOINTEREXTPROC = ?extern fn (GLsizei, GLsizei, [*c]const GLboolean) void;
pub const PFNGLGETPOINTERVEXTPROC = ?extern fn (GLenum, [*c](?*c_void)) void;
pub const PFNGLINDEXPOINTEREXTPROC = ?extern fn (GLenum, GLsizei, GLsizei, ?*const c_void) void;
pub const PFNGLNORMALPOINTEREXTPROC = ?extern fn (GLenum, GLsizei, GLsizei, ?*const c_void) void;
pub const PFNGLTEXCOORDPOINTEREXTPROC = ?extern fn (GLint, GLenum, GLsizei, GLsizei, ?*const c_void) void;
pub const PFNGLVERTEXPOINTEREXTPROC = ?extern fn (GLint, GLenum, GLsizei, GLsizei, ?*const c_void) void;
pub const PFNGLVERTEXATTRIBL1DEXTPROC = ?extern fn (GLuint, GLdouble) void;
pub const PFNGLVERTEXATTRIBL2DEXTPROC = ?extern fn (GLuint, GLdouble, GLdouble) void;
pub const PFNGLVERTEXATTRIBL3DEXTPROC = ?extern fn (GLuint, GLdouble, GLdouble, GLdouble) void;
pub const PFNGLVERTEXATTRIBL4DEXTPROC = ?extern fn (GLuint, GLdouble, GLdouble, GLdouble, GLdouble) void;
pub const PFNGLVERTEXATTRIBL1DVEXTPROC = ?extern fn (GLuint, [*c]const GLdouble) void;
pub const PFNGLVERTEXATTRIBL2DVEXTPROC = ?extern fn (GLuint, [*c]const GLdouble) void;
pub const PFNGLVERTEXATTRIBL3DVEXTPROC = ?extern fn (GLuint, [*c]const GLdouble) void;
pub const PFNGLVERTEXATTRIBL4DVEXTPROC = ?extern fn (GLuint, [*c]const GLdouble) void;
pub const PFNGLVERTEXATTRIBLPOINTEREXTPROC = ?extern fn (GLuint, GLint, GLenum, GLsizei, ?*const c_void) void;
pub const PFNGLGETVERTEXATTRIBLDVEXTPROC = ?extern fn (GLuint, GLenum, [*c]GLdouble) void;
pub const PFNGLBEGINVERTEXSHADEREXTPROC = ?extern fn () void;
pub const PFNGLENDVERTEXSHADEREXTPROC = ?extern fn () void;
pub const PFNGLBINDVERTEXSHADEREXTPROC = ?extern fn (GLuint) void;
pub const PFNGLGENVERTEXSHADERSEXTPROC = ?extern fn (GLuint) GLuint;
pub const PFNGLDELETEVERTEXSHADEREXTPROC = ?extern fn (GLuint) void;
pub const PFNGLSHADEROP1EXTPROC = ?extern fn (GLenum, GLuint, GLuint) void;
pub const PFNGLSHADEROP2EXTPROC = ?extern fn (GLenum, GLuint, GLuint, GLuint) void;
pub const PFNGLSHADEROP3EXTPROC = ?extern fn (GLenum, GLuint, GLuint, GLuint, GLuint) void;
pub const PFNGLSWIZZLEEXTPROC = ?extern fn (GLuint, GLuint, GLenum, GLenum, GLenum, GLenum) void;
pub const PFNGLWRITEMASKEXTPROC = ?extern fn (GLuint, GLuint, GLenum, GLenum, GLenum, GLenum) void;
pub const PFNGLINSERTCOMPONENTEXTPROC = ?extern fn (GLuint, GLuint, GLuint) void;
pub const PFNGLEXTRACTCOMPONENTEXTPROC = ?extern fn (GLuint, GLuint, GLuint) void;
pub const PFNGLGENSYMBOLSEXTPROC = ?extern fn (GLenum, GLenum, GLenum, GLuint) GLuint;
pub const PFNGLSETINVARIANTEXTPROC = ?extern fn (GLuint, GLenum, ?*const c_void) void;
pub const PFNGLSETLOCALCONSTANTEXTPROC = ?extern fn (GLuint, GLenum, ?*const c_void) void;
pub const PFNGLVARIANTBVEXTPROC = ?extern fn (GLuint, [*c]const GLbyte) void;
pub const PFNGLVARIANTSVEXTPROC = ?extern fn (GLuint, [*c]const GLshort) void;
pub const PFNGLVARIANTIVEXTPROC = ?extern fn (GLuint, [*c]const GLint) void;
pub const PFNGLVARIANTFVEXTPROC = ?extern fn (GLuint, [*c]const GLfloat) void;
pub const PFNGLVARIANTDVEXTPROC = ?extern fn (GLuint, [*c]const GLdouble) void;
pub const PFNGLVARIANTUBVEXTPROC = ?extern fn (GLuint, [*c]const GLubyte) void;
pub const PFNGLVARIANTUSVEXTPROC = ?extern fn (GLuint, [*c]const GLushort) void;
pub const PFNGLVARIANTUIVEXTPROC = ?extern fn (GLuint, [*c]const GLuint) void;
pub const PFNGLVARIANTPOINTEREXTPROC = ?extern fn (GLuint, GLenum, GLuint, ?*const c_void) void;
pub const PFNGLENABLEVARIANTCLIENTSTATEEXTPROC = ?extern fn (GLuint) void;
pub const PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC = ?extern fn (GLuint) void;
pub const PFNGLBINDLIGHTPARAMETEREXTPROC = ?extern fn (GLenum, GLenum) GLuint;
pub const PFNGLBINDMATERIALPARAMETEREXTPROC = ?extern fn (GLenum, GLenum) GLuint;
pub const PFNGLBINDTEXGENPARAMETEREXTPROC = ?extern fn (GLenum, GLenum, GLenum) GLuint;
pub const PFNGLBINDTEXTUREUNITPARAMETEREXTPROC = ?extern fn (GLenum, GLenum) GLuint;
pub const PFNGLBINDPARAMETEREXTPROC = ?extern fn (GLenum) GLuint;
pub const PFNGLISVARIANTENABLEDEXTPROC = ?extern fn (GLuint, GLenum) GLboolean;
pub const PFNGLGETVARIANTBOOLEANVEXTPROC = ?extern fn (GLuint, GLenum, [*c]GLboolean) void;
pub const PFNGLGETVARIANTINTEGERVEXTPROC = ?extern fn (GLuint, GLenum, [*c]GLint) void;
pub const PFNGLGETVARIANTFLOATVEXTPROC = ?extern fn (GLuint, GLenum, [*c]GLfloat) void;
pub const PFNGLGETVARIANTPOINTERVEXTPROC = ?extern fn (GLuint, GLenum, [*c](?*c_void)) void;
pub const PFNGLGETINVARIANTBOOLEANVEXTPROC = ?extern fn (GLuint, GLenum, [*c]GLboolean) void;
pub const PFNGLGETINVARIANTINTEGERVEXTPROC = ?extern fn (GLuint, GLenum, [*c]GLint) void;
pub const PFNGLGETINVARIANTFLOATVEXTPROC = ?extern fn (GLuint, GLenum, [*c]GLfloat) void;
pub const PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC = ?extern fn (GLuint, GLenum, [*c]GLboolean) void;
pub const PFNGLGETLOCALCONSTANTINTEGERVEXTPROC = ?extern fn (GLuint, GLenum, [*c]GLint) void;
pub const PFNGLGETLOCALCONSTANTFLOATVEXTPROC = ?extern fn (GLuint, GLenum, [*c]GLfloat) void;
pub const PFNGLVERTEXWEIGHTFEXTPROC = ?extern fn (GLfloat) void;
pub const PFNGLVERTEXWEIGHTFVEXTPROC = ?extern fn ([*c]const GLfloat) void;
pub const PFNGLVERTEXWEIGHTPOINTEREXTPROC = ?extern fn (GLint, GLenum, GLsizei, ?*const c_void) void;
pub const PFNGLACQUIREKEYEDMUTEXWIN32EXTPROC = ?extern fn (GLuint, GLuint64, GLuint) GLboolean;
pub const PFNGLRELEASEKEYEDMUTEXWIN32EXTPROC = ?extern fn (GLuint, GLuint64) GLboolean;
pub const PFNGLWINDOWRECTANGLESEXTPROC = ?extern fn (GLenum, GLsizei, [*c]const GLint) void;
pub const PFNGLIMPORTSYNCEXTPROC = ?extern fn (GLenum, GLintptr, GLbitfield) GLsync;
pub const PFNGLFRAMETERMINATORGREMEDYPROC = ?extern fn () void;
pub const PFNGLSTRINGMARKERGREMEDYPROC = ?extern fn (GLsizei, ?*const c_void) void;
pub const PFNGLIMAGETRANSFORMPARAMETERIHPPROC = ?extern fn (GLenum, GLenum, GLint) void;
pub const PFNGLIMAGETRANSFORMPARAMETERFHPPROC = ?extern fn (GLenum, GLenum, GLfloat) void;
pub const PFNGLIMAGETRANSFORMPARAMETERIVHPPROC = ?extern fn (GLenum, GLenum, [*c]const GLint) void;
pub const PFNGLIMAGETRANSFORMPARAMETERFVHPPROC = ?extern fn (GLenum, GLenum, [*c]const GLfloat) void;
pub const PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC = ?extern fn (GLenum, GLenum, [*c]GLint) void;
pub const PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC = ?extern fn (GLenum, GLenum, [*c]GLfloat) void;
pub const PFNGLMULTIMODEDRAWARRAYSIBMPROC = ?extern fn ([*c]const GLenum, [*c]const GLint, [*c]const GLsizei, GLsizei, GLint) void;
pub const PFNGLMULTIMODEDRAWELEMENTSIBMPROC = ?extern fn ([*c]const GLenum, [*c]const GLsizei, GLenum, [*c]const (?*const c_void), GLsizei, GLint) void;
pub const PFNGLFLUSHSTATICDATAIBMPROC = ?extern fn (GLenum) void;
pub const PFNGLCOLORPOINTERLISTIBMPROC = ?extern fn (GLint, GLenum, GLint, [*c](?*const c_void), GLint) void;
pub const PFNGLSECONDARYCOLORPOINTERLISTIBMPROC = ?extern fn (GLint, GLenum, GLint, [*c](?*const c_void), GLint) void;
pub const PFNGLEDGEFLAGPOINTERLISTIBMPROC = ?extern fn (GLint, [*c]([*c]const GLboolean), GLint) void;
pub const PFNGLFOGCOORDPOINTERLISTIBMPROC = ?extern fn (GLenum, GLint, [*c](?*const c_void), GLint) void;
pub const PFNGLINDEXPOINTERLISTIBMPROC = ?extern fn (GLenum, GLint, [*c](?*const c_void), GLint) void;
pub const PFNGLNORMALPOINTERLISTIBMPROC = ?extern fn (GLenum, GLint, [*c](?*const c_void), GLint) void;
pub const PFNGLTEXCOORDPOINTERLISTIBMPROC = ?extern fn (GLint, GLenum, GLint, [*c](?*const c_void), GLint) void;
pub const PFNGLVERTEXPOINTERLISTIBMPROC = ?extern fn (GLint, GLenum, GLint, [*c](?*const c_void), GLint) void;
pub const PFNGLBLENDFUNCSEPARATEINGRPROC = ?extern fn (GLenum, GLenum, GLenum, GLenum) void;
pub const PFNGLAPPLYFRAMEBUFFERATTACHMENTCMAAINTELPROC = ?extern fn () void;
pub const PFNGLSYNCTEXTUREINTELPROC = ?extern fn (GLuint) void;
pub const PFNGLUNMAPTEXTURE2DINTELPROC = ?extern fn (GLuint, GLint) void;
pub const PFNGLMAPTEXTURE2DINTELPROC = ?extern fn (GLuint, GLint, GLbitfield, [*c]GLint, [*c]GLenum) ?*c_void;
pub const PFNGLVERTEXPOINTERVINTELPROC = ?extern fn (GLint, GLenum, [*c](?*const c_void)) void;
pub const PFNGLNORMALPOINTERVINTELPROC = ?extern fn (GLenum, [*c](?*const c_void)) void;
pub const PFNGLCOLORPOINTERVINTELPROC = ?extern fn (GLint, GLenum, [*c](?*const c_void)) void;
pub const PFNGLTEXCOORDPOINTERVINTELPROC = ?extern fn (GLint, GLenum, [*c](?*const c_void)) void;
pub const PFNGLBEGINPERFQUERYINTELPROC = ?extern fn (GLuint) void;
pub const PFNGLCREATEPERFQUERYINTELPROC = ?extern fn (GLuint, [*c]GLuint) void;
pub const PFNGLDELETEPERFQUERYINTELPROC = ?extern fn (GLuint) void;
pub const PFNGLENDPERFQUERYINTELPROC = ?extern fn (GLuint) void;
pub const PFNGLGETFIRSTPERFQUERYIDINTELPROC = ?extern fn ([*c]GLuint) void;
pub const PFNGLGETNEXTPERFQUERYIDINTELPROC = ?extern fn (GLuint, [*c]GLuint) void;
pub const PFNGLGETPERFCOUNTERINFOINTELPROC = ?extern fn (GLuint, GLuint, GLuint, [*c]GLchar, GLuint, [*c]GLchar, [*c]GLuint, [*c]GLuint, [*c]GLuint, [*c]GLuint, [*c]GLuint64) void;
pub const PFNGLGETPERFQUERYDATAINTELPROC = ?extern fn (GLuint, GLuint, GLsizei, ?*c_void, [*c]GLuint) void;
pub const PFNGLGETPERFQUERYIDBYNAMEINTELPROC = ?extern fn ([*c]GLchar, [*c]GLuint) void;
pub const PFNGLGETPERFQUERYINFOINTELPROC = ?extern fn (GLuint, GLuint, [*c]GLchar, [*c]GLuint, [*c]GLuint, [*c]GLuint, [*c]GLuint) void;
pub const PFNGLRESIZEBUFFERSMESAPROC = ?extern fn () void;
pub const PFNGLWINDOWPOS2DMESAPROC = ?extern fn (GLdouble, GLdouble) void;
pub const PFNGLWINDOWPOS2DVMESAPROC = ?extern fn ([*c]const GLdouble) void;
pub const PFNGLWINDOWPOS2FMESAPROC = ?extern fn (GLfloat, GLfloat) void;
pub const PFNGLWINDOWPOS2FVMESAPROC = ?extern fn ([*c]const GLfloat) void;
pub const PFNGLWINDOWPOS2IMESAPROC = ?extern fn (GLint, GLint) void;
pub const PFNGLWINDOWPOS2IVMESAPROC = ?extern fn ([*c]const GLint) void;
pub const PFNGLWINDOWPOS2SMESAPROC = ?extern fn (GLshort, GLshort) void;
pub const PFNGLWINDOWPOS2SVMESAPROC = ?extern fn ([*c]const GLshort) void;
pub const PFNGLWINDOWPOS3DMESAPROC = ?extern fn (GLdouble, GLdouble, GLdouble) void;
pub const PFNGLWINDOWPOS3DVMESAPROC = ?extern fn ([*c]const GLdouble) void;
pub const PFNGLWINDOWPOS3FMESAPROC = ?extern fn (GLfloat, GLfloat, GLfloat) void;
pub const PFNGLWINDOWPOS3FVMESAPROC = ?extern fn ([*c]const GLfloat) void;
pub const PFNGLWINDOWPOS3IMESAPROC = ?extern fn (GLint, GLint, GLint) void;
pub const PFNGLWINDOWPOS3IVMESAPROC = ?extern fn ([*c]const GLint) void;
pub const PFNGLWINDOWPOS3SMESAPROC = ?extern fn (GLshort, GLshort, GLshort) void;
pub const PFNGLWINDOWPOS3SVMESAPROC = ?extern fn ([*c]const GLshort) void;
pub const PFNGLWINDOWPOS4DMESAPROC = ?extern fn (GLdouble, GLdouble, GLdouble, GLdouble) void;
pub const PFNGLWINDOWPOS4DVMESAPROC = ?extern fn ([*c]const GLdouble) void;
pub const PFNGLWINDOWPOS4FMESAPROC = ?extern fn (GLfloat, GLfloat, GLfloat, GLfloat) void;
pub const PFNGLWINDOWPOS4FVMESAPROC = ?extern fn ([*c]const GLfloat) void;
pub const PFNGLWINDOWPOS4IMESAPROC = ?extern fn (GLint, GLint, GLint, GLint) void;
pub const PFNGLWINDOWPOS4IVMESAPROC = ?extern fn ([*c]const GLint) void;
pub const PFNGLWINDOWPOS4SMESAPROC = ?extern fn (GLshort, GLshort, GLshort, GLshort) void;
pub const PFNGLWINDOWPOS4SVMESAPROC = ?extern fn ([*c]const GLshort) void;
pub const PFNGLBEGINCONDITIONALRENDERNVXPROC = ?extern fn (GLuint) void;
pub const PFNGLENDCONDITIONALRENDERNVXPROC = ?extern fn () void;
pub const PFNGLLGPUNAMEDBUFFERSUBDATANVXPROC = ?extern fn (GLbitfield, GLuint, GLintptr, GLsizeiptr, ?*const c_void) void;
pub const PFNGLLGPUCOPYIMAGESUBDATANVXPROC = ?extern fn (GLuint, GLbitfield, GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) void;
pub const PFNGLLGPUINTERLOCKNVXPROC = ?extern fn () void;
pub const PFNGLALPHATOCOVERAGEDITHERCONTROLNVPROC = ?extern fn (GLenum) void;
pub const PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC = ?extern fn (GLenum, ?*const c_void, GLsizei, GLsizei, GLint) void;
pub const PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC = ?extern fn (GLenum, GLenum, ?*const c_void, GLsizei, GLsizei, GLint) void;
pub const PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSCOUNTNVPROC = ?extern fn (GLenum, ?*const c_void, GLsizei, GLsizei, GLsizei, GLint) void;
pub const PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSCOUNTNVPROC = ?extern fn (GLenum, GLenum, ?*const c_void, GLsizei, GLsizei, GLsizei, GLint) void;
pub const PFNGLGETTEXTUREHANDLENVPROC = ?extern fn (GLuint) GLuint64;
pub const PFNGLGETTEXTURESAMPLERHANDLENVPROC = ?extern fn (GLuint, GLuint) GLuint64;
pub const PFNGLMAKETEXTUREHANDLERESIDENTNVPROC = ?extern fn (GLuint64) void;
pub const PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC = ?extern fn (GLuint64) void;
pub const PFNGLGETIMAGEHANDLENVPROC = ?extern fn (GLuint, GLint, GLboolean, GLint, GLenum) GLuint64;
pub const PFNGLMAKEIMAGEHANDLERESIDENTNVPROC = ?extern fn (GLuint64, GLenum) void;
pub const PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC = ?extern fn (GLuint64) void;
pub const PFNGLUNIFORMHANDLEUI64NVPROC = ?extern fn (GLint, GLuint64) void;
pub const PFNGLUNIFORMHANDLEUI64VNVPROC = ?extern fn (GLint, GLsizei, [*c]const GLuint64) void;
pub const PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC = ?extern fn (GLuint, GLint, GLuint64) void;
pub const PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLuint64) void;
pub const PFNGLISTEXTUREHANDLERESIDENTNVPROC = ?extern fn (GLuint64) GLboolean;
pub const PFNGLISIMAGEHANDLERESIDENTNVPROC = ?extern fn (GLuint64) GLboolean;
pub const PFNGLBLENDPARAMETERINVPROC = ?extern fn (GLenum, GLint) void;
pub const PFNGLBLENDBARRIERNVPROC = ?extern fn () void;
pub const PFNGLVIEWPORTPOSITIONWSCALENVPROC = ?extern fn (GLuint, GLfloat, GLfloat) void;
pub const PFNGLCREATESTATESNVPROC = ?extern fn (GLsizei, [*c]GLuint) void;
pub const PFNGLDELETESTATESNVPROC = ?extern fn (GLsizei, [*c]const GLuint) void;
pub const PFNGLISSTATENVPROC = ?extern fn (GLuint) GLboolean;
pub const PFNGLSTATECAPTURENVPROC = ?extern fn (GLuint, GLenum) void;
pub const PFNGLGETCOMMANDHEADERNVPROC = ?extern fn (GLenum, GLuint) GLuint;
pub const PFNGLGETSTAGEINDEXNVPROC = ?extern fn (GLenum) GLushort;
pub const PFNGLDRAWCOMMANDSNVPROC = ?extern fn (GLenum, GLuint, [*c]const GLintptr, [*c]const GLsizei, GLuint) void;
pub const PFNGLDRAWCOMMANDSADDRESSNVPROC = ?extern fn (GLenum, [*c]const GLuint64, [*c]const GLsizei, GLuint) void;
pub const PFNGLDRAWCOMMANDSSTATESNVPROC = ?extern fn (GLuint, [*c]const GLintptr, [*c]const GLsizei, [*c]const GLuint, [*c]const GLuint, GLuint) void;
pub const PFNGLDRAWCOMMANDSSTATESADDRESSNVPROC = ?extern fn ([*c]const GLuint64, [*c]const GLsizei, [*c]const GLuint, [*c]const GLuint, GLuint) void;
pub const PFNGLCREATECOMMANDLISTSNVPROC = ?extern fn (GLsizei, [*c]GLuint) void;
pub const PFNGLDELETECOMMANDLISTSNVPROC = ?extern fn (GLsizei, [*c]const GLuint) void;
pub const PFNGLISCOMMANDLISTNVPROC = ?extern fn (GLuint) GLboolean;
pub const PFNGLLISTDRAWCOMMANDSSTATESCLIENTNVPROC = ?extern fn (GLuint, GLuint, [*c](?*const c_void), [*c]const GLsizei, [*c]const GLuint, [*c]const GLuint, GLuint) void;
pub const PFNGLCOMMANDLISTSEGMENTSNVPROC = ?extern fn (GLuint, GLuint) void;
pub const PFNGLCOMPILECOMMANDLISTNVPROC = ?extern fn (GLuint) void;
pub const PFNGLCALLCOMMANDLISTNVPROC = ?extern fn (GLuint) void;
pub const PFNGLBEGINCONDITIONALRENDERNVPROC = ?extern fn (GLuint, GLenum) void;
pub const PFNGLENDCONDITIONALRENDERNVPROC = ?extern fn () void;
pub const PFNGLSUBPIXELPRECISIONBIASNVPROC = ?extern fn (GLuint, GLuint) void;
pub const PFNGLCONSERVATIVERASTERPARAMETERFNVPROC = ?extern fn (GLenum, GLfloat) void;
pub const PFNGLCONSERVATIVERASTERPARAMETERINVPROC = ?extern fn (GLenum, GLint) void;
pub const PFNGLCOPYIMAGESUBDATANVPROC = ?extern fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) void;
pub const PFNGLDEPTHRANGEDNVPROC = ?extern fn (GLdouble, GLdouble) void;
pub const PFNGLCLEARDEPTHDNVPROC = ?extern fn (GLdouble) void;
pub const PFNGLDEPTHBOUNDSDNVPROC = ?extern fn (GLdouble, GLdouble) void;
pub const PFNGLDRAWTEXTURENVPROC = ?extern fn (GLuint, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) void;
pub const GLVULKANPROCNV = ?extern fn () void;
pub const PFNGLDRAWVKIMAGENVPROC = ?extern fn (GLuint64, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) void;
pub const PFNGLGETVKPROCADDRNVPROC = ?extern fn ([*c]const GLchar) GLVULKANPROCNV;
pub const PFNGLWAITVKSEMAPHORENVPROC = ?extern fn (GLuint64) void;
pub const PFNGLSIGNALVKSEMAPHORENVPROC = ?extern fn (GLuint64) void;
pub const PFNGLSIGNALVKFENCENVPROC = ?extern fn (GLuint64) void;
pub const PFNGLMAPCONTROLPOINTSNVPROC = ?extern fn (GLenum, GLuint, GLenum, GLsizei, GLsizei, GLint, GLint, GLboolean, ?*const c_void) void;
pub const PFNGLMAPPARAMETERIVNVPROC = ?extern fn (GLenum, GLenum, [*c]const GLint) void;
pub const PFNGLMAPPARAMETERFVNVPROC = ?extern fn (GLenum, GLenum, [*c]const GLfloat) void;
pub const PFNGLGETMAPCONTROLPOINTSNVPROC = ?extern fn (GLenum, GLuint, GLenum, GLsizei, GLsizei, GLboolean, ?*c_void) void;
pub const PFNGLGETMAPPARAMETERIVNVPROC = ?extern fn (GLenum, GLenum, [*c]GLint) void;
pub const PFNGLGETMAPPARAMETERFVNVPROC = ?extern fn (GLenum, GLenum, [*c]GLfloat) void;
pub const PFNGLGETMAPATTRIBPARAMETERIVNVPROC = ?extern fn (GLenum, GLuint, GLenum, [*c]GLint) void;
pub const PFNGLGETMAPATTRIBPARAMETERFVNVPROC = ?extern fn (GLenum, GLuint, GLenum, [*c]GLfloat) void;
pub const PFNGLEVALMAPSNVPROC = ?extern fn (GLenum, GLenum) void;
pub const PFNGLGETMULTISAMPLEFVNVPROC = ?extern fn (GLenum, GLuint, [*c]GLfloat) void;
pub const PFNGLSAMPLEMASKINDEXEDNVPROC = ?extern fn (GLuint, GLbitfield) void;
pub const PFNGLTEXRENDERBUFFERNVPROC = ?extern fn (GLenum, GLuint) void;
pub const PFNGLDELETEFENCESNVPROC = ?extern fn (GLsizei, [*c]const GLuint) void;
pub const PFNGLGENFENCESNVPROC = ?extern fn (GLsizei, [*c]GLuint) void;
pub const PFNGLISFENCENVPROC = ?extern fn (GLuint) GLboolean;
pub const PFNGLTESTFENCENVPROC = ?extern fn (GLuint) GLboolean;
pub const PFNGLGETFENCEIVNVPROC = ?extern fn (GLuint, GLenum, [*c]GLint) void;
pub const PFNGLFINISHFENCENVPROC = ?extern fn (GLuint) void;
pub const PFNGLSETFENCENVPROC = ?extern fn (GLuint, GLenum) void;
pub const PFNGLFRAGMENTCOVERAGECOLORNVPROC = ?extern fn (GLuint) void;
pub const PFNGLPROGRAMNAMEDPARAMETER4FNVPROC = ?extern fn (GLuint, GLsizei, [*c]const GLubyte, GLfloat, GLfloat, GLfloat, GLfloat) void;
pub const PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC = ?extern fn (GLuint, GLsizei, [*c]const GLubyte, [*c]const GLfloat) void;
pub const PFNGLPROGRAMNAMEDPARAMETER4DNVPROC = ?extern fn (GLuint, GLsizei, [*c]const GLubyte, GLdouble, GLdouble, GLdouble, GLdouble) void;
pub const PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC = ?extern fn (GLuint, GLsizei, [*c]const GLubyte, [*c]const GLdouble) void;
pub const PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC = ?extern fn (GLuint, GLsizei, [*c]const GLubyte, [*c]GLfloat) void;
pub const PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC = ?extern fn (GLuint, GLsizei, [*c]const GLubyte, [*c]GLdouble) void;
pub const PFNGLCOVERAGEMODULATIONTABLENVPROC = ?extern fn (GLsizei, [*c]const GLfloat) void;
pub const PFNGLGETCOVERAGEMODULATIONTABLENVPROC = ?extern fn (GLsizei, [*c]GLfloat) void;
pub const PFNGLCOVERAGEMODULATIONNVPROC = ?extern fn (GLenum) void;
pub const PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC = ?extern fn (GLenum, GLsizei, GLsizei, GLenum, GLsizei, GLsizei) void;
pub const PFNGLPROGRAMVERTEXLIMITNVPROC = ?extern fn (GLenum, GLint) void;
pub const PFNGLFRAMEBUFFERTEXTUREEXTPROC = ?extern fn (GLenum, GLenum, GLuint, GLint) void;
pub const PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC = ?extern fn (GLenum, GLenum, GLuint, GLint, GLenum) void;
pub const PFNGLRENDERGPUMASKNVPROC = ?extern fn (GLbitfield) void;
pub const PFNGLMULTICASTBUFFERSUBDATANVPROC = ?extern fn (GLbitfield, GLuint, GLintptr, GLsizeiptr, ?*const c_void) void;
pub const PFNGLMULTICASTCOPYBUFFERSUBDATANVPROC = ?extern fn (GLuint, GLbitfield, GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr) void;
pub const PFNGLMULTICASTCOPYIMAGESUBDATANVPROC = ?extern fn (GLuint, GLbitfield, GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) void;
pub const PFNGLMULTICASTBLITFRAMEBUFFERNVPROC = ?extern fn (GLuint, GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) void;
pub const PFNGLMULTICASTFRAMEBUFFERSAMPLELOCATIONSFVNVPROC = ?extern fn (GLuint, GLuint, GLuint, GLsizei, [*c]const GLfloat) void;
pub const PFNGLMULTICASTBARRIERNVPROC = ?extern fn () void;
pub const PFNGLMULTICASTWAITSYNCNVPROC = ?extern fn (GLuint, GLbitfield) void;
pub const PFNGLMULTICASTGETQUERYOBJECTIVNVPROC = ?extern fn (GLuint, GLuint, GLenum, [*c]GLint) void;
pub const PFNGLMULTICASTGETQUERYOBJECTUIVNVPROC = ?extern fn (GLuint, GLuint, GLenum, [*c]GLuint) void;
pub const PFNGLMULTICASTGETQUERYOBJECTI64VNVPROC = ?extern fn (GLuint, GLuint, GLenum, [*c]GLint64) void;
pub const PFNGLMULTICASTGETQUERYOBJECTUI64VNVPROC = ?extern fn (GLuint, GLuint, GLenum, [*c]GLuint64) void;
pub const PFNGLPROGRAMLOCALPARAMETERI4INVPROC = ?extern fn (GLenum, GLuint, GLint, GLint, GLint, GLint) void;
pub const PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC = ?extern fn (GLenum, GLuint, [*c]const GLint) void;
pub const PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC = ?extern fn (GLenum, GLuint, GLsizei, [*c]const GLint) void;
pub const PFNGLPROGRAMLOCALPARAMETERI4UINVPROC = ?extern fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint) void;
pub const PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC = ?extern fn (GLenum, GLuint, [*c]const GLuint) void;
pub const PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC = ?extern fn (GLenum, GLuint, GLsizei, [*c]const GLuint) void;
pub const PFNGLPROGRAMENVPARAMETERI4INVPROC = ?extern fn (GLenum, GLuint, GLint, GLint, GLint, GLint) void;
pub const PFNGLPROGRAMENVPARAMETERI4IVNVPROC = ?extern fn (GLenum, GLuint, [*c]const GLint) void;
pub const PFNGLPROGRAMENVPARAMETERSI4IVNVPROC = ?extern fn (GLenum, GLuint, GLsizei, [*c]const GLint) void;
pub const PFNGLPROGRAMENVPARAMETERI4UINVPROC = ?extern fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint) void;
pub const PFNGLPROGRAMENVPARAMETERI4UIVNVPROC = ?extern fn (GLenum, GLuint, [*c]const GLuint) void;
pub const PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC = ?extern fn (GLenum, GLuint, GLsizei, [*c]const GLuint) void;
pub const PFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC = ?extern fn (GLenum, GLuint, [*c]GLint) void;
pub const PFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC = ?extern fn (GLenum, GLuint, [*c]GLuint) void;
pub const PFNGLGETPROGRAMENVPARAMETERIIVNVPROC = ?extern fn (GLenum, GLuint, [*c]GLint) void;
pub const PFNGLGETPROGRAMENVPARAMETERIUIVNVPROC = ?extern fn (GLenum, GLuint, [*c]GLuint) void;
pub const PFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROC = ?extern fn (GLenum, GLsizei, [*c]const GLuint) void;
pub const PFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROC = ?extern fn (GLenum, GLuint, [*c]GLuint) void;
pub const GLhalfNV = c_ushort;
pub const PFNGLVERTEX2HNVPROC = ?extern fn (GLhalfNV, GLhalfNV) void;
pub const PFNGLVERTEX2HVNVPROC = ?extern fn ([*c]const GLhalfNV) void;
pub const PFNGLVERTEX3HNVPROC = ?extern fn (GLhalfNV, GLhalfNV, GLhalfNV) void;
pub const PFNGLVERTEX3HVNVPROC = ?extern fn ([*c]const GLhalfNV) void;
pub const PFNGLVERTEX4HNVPROC = ?extern fn (GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV) void;
pub const PFNGLVERTEX4HVNVPROC = ?extern fn ([*c]const GLhalfNV) void;
pub const PFNGLNORMAL3HNVPROC = ?extern fn (GLhalfNV, GLhalfNV, GLhalfNV) void;
pub const PFNGLNORMAL3HVNVPROC = ?extern fn ([*c]const GLhalfNV) void;
pub const PFNGLCOLOR3HNVPROC = ?extern fn (GLhalfNV, GLhalfNV, GLhalfNV) void;
pub const PFNGLCOLOR3HVNVPROC = ?extern fn ([*c]const GLhalfNV) void;
pub const PFNGLCOLOR4HNVPROC = ?extern fn (GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV) void;
pub const PFNGLCOLOR4HVNVPROC = ?extern fn ([*c]const GLhalfNV) void;
pub const PFNGLTEXCOORD1HNVPROC = ?extern fn (GLhalfNV) void;
pub const PFNGLTEXCOORD1HVNVPROC = ?extern fn ([*c]const GLhalfNV) void;
pub const PFNGLTEXCOORD2HNVPROC = ?extern fn (GLhalfNV, GLhalfNV) void;
pub const PFNGLTEXCOORD2HVNVPROC = ?extern fn ([*c]const GLhalfNV) void;
pub const PFNGLTEXCOORD3HNVPROC = ?extern fn (GLhalfNV, GLhalfNV, GLhalfNV) void;
pub const PFNGLTEXCOORD3HVNVPROC = ?extern fn ([*c]const GLhalfNV) void;
pub const PFNGLTEXCOORD4HNVPROC = ?extern fn (GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV) void;
pub const PFNGLTEXCOORD4HVNVPROC = ?extern fn ([*c]const GLhalfNV) void;
pub const PFNGLMULTITEXCOORD1HNVPROC = ?extern fn (GLenum, GLhalfNV) void;
pub const PFNGLMULTITEXCOORD1HVNVPROC = ?extern fn (GLenum, [*c]const GLhalfNV) void;
pub const PFNGLMULTITEXCOORD2HNVPROC = ?extern fn (GLenum, GLhalfNV, GLhalfNV) void;
pub const PFNGLMULTITEXCOORD2HVNVPROC = ?extern fn (GLenum, [*c]const GLhalfNV) void;
pub const PFNGLMULTITEXCOORD3HNVPROC = ?extern fn (GLenum, GLhalfNV, GLhalfNV, GLhalfNV) void;
pub const PFNGLMULTITEXCOORD3HVNVPROC = ?extern fn (GLenum, [*c]const GLhalfNV) void;
pub const PFNGLMULTITEXCOORD4HNVPROC = ?extern fn (GLenum, GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV) void;
pub const PFNGLMULTITEXCOORD4HVNVPROC = ?extern fn (GLenum, [*c]const GLhalfNV) void;
pub const PFNGLFOGCOORDHNVPROC = ?extern fn (GLhalfNV) void;
pub const PFNGLFOGCOORDHVNVPROC = ?extern fn ([*c]const GLhalfNV) void;
pub const PFNGLSECONDARYCOLOR3HNVPROC = ?extern fn (GLhalfNV, GLhalfNV, GLhalfNV) void;
pub const PFNGLSECONDARYCOLOR3HVNVPROC = ?extern fn ([*c]const GLhalfNV) void;
pub const PFNGLVERTEXWEIGHTHNVPROC = ?extern fn (GLhalfNV) void;
pub const PFNGLVERTEXWEIGHTHVNVPROC = ?extern fn ([*c]const GLhalfNV) void;
pub const PFNGLVERTEXATTRIB1HNVPROC = ?extern fn (GLuint, GLhalfNV) void;
pub const PFNGLVERTEXATTRIB1HVNVPROC = ?extern fn (GLuint, [*c]const GLhalfNV) void;
pub const PFNGLVERTEXATTRIB2HNVPROC = ?extern fn (GLuint, GLhalfNV, GLhalfNV) void;
pub const PFNGLVERTEXATTRIB2HVNVPROC = ?extern fn (GLuint, [*c]const GLhalfNV) void;
pub const PFNGLVERTEXATTRIB3HNVPROC = ?extern fn (GLuint, GLhalfNV, GLhalfNV, GLhalfNV) void;
pub const PFNGLVERTEXATTRIB3HVNVPROC = ?extern fn (GLuint, [*c]const GLhalfNV) void;
pub const PFNGLVERTEXATTRIB4HNVPROC = ?extern fn (GLuint, GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV) void;
pub const PFNGLVERTEXATTRIB4HVNVPROC = ?extern fn (GLuint, [*c]const GLhalfNV) void;
pub const PFNGLVERTEXATTRIBS1HVNVPROC = ?extern fn (GLuint, GLsizei, [*c]const GLhalfNV) void;
pub const PFNGLVERTEXATTRIBS2HVNVPROC = ?extern fn (GLuint, GLsizei, [*c]const GLhalfNV) void;
pub const PFNGLVERTEXATTRIBS3HVNVPROC = ?extern fn (GLuint, GLsizei, [*c]const GLhalfNV) void;
pub const PFNGLVERTEXATTRIBS4HVNVPROC = ?extern fn (GLuint, GLsizei, [*c]const GLhalfNV) void;
pub const PFNGLGETINTERNALFORMATSAMPLEIVNVPROC = ?extern fn (GLenum, GLenum, GLsizei, GLenum, GLsizei, [*c]GLint) void;
pub const PFNGLGENOCCLUSIONQUERIESNVPROC = ?extern fn (GLsizei, [*c]GLuint) void;
pub const PFNGLDELETEOCCLUSIONQUERIESNVPROC = ?extern fn (GLsizei, [*c]const GLuint) void;
pub const PFNGLISOCCLUSIONQUERYNVPROC = ?extern fn (GLuint) GLboolean;
pub const PFNGLBEGINOCCLUSIONQUERYNVPROC = ?extern fn (GLuint) void;
pub const PFNGLENDOCCLUSIONQUERYNVPROC = ?extern fn () void;
pub const PFNGLGETOCCLUSIONQUERYIVNVPROC = ?extern fn (GLuint, GLenum, [*c]GLint) void;
pub const PFNGLGETOCCLUSIONQUERYUIVNVPROC = ?extern fn (GLuint, GLenum, [*c]GLuint) void;
pub const PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC = ?extern fn (GLenum, GLuint, GLuint, GLsizei, [*c]const GLfloat) void;
pub const PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC = ?extern fn (GLenum, GLuint, GLuint, GLsizei, [*c]const GLint) void;
pub const PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC = ?extern fn (GLenum, GLuint, GLuint, GLsizei, [*c]const GLuint) void;
pub const PFNGLGENPATHSNVPROC = ?extern fn (GLsizei) GLuint;
pub const PFNGLDELETEPATHSNVPROC = ?extern fn (GLuint, GLsizei) void;
pub const PFNGLISPATHNVPROC = ?extern fn (GLuint) GLboolean;
pub const PFNGLPATHCOMMANDSNVPROC = ?extern fn (GLuint, GLsizei, [*c]const GLubyte, GLsizei, GLenum, ?*const c_void) void;
pub const PFNGLPATHCOORDSNVPROC = ?extern fn (GLuint, GLsizei, GLenum, ?*const c_void) void;
pub const PFNGLPATHSUBCOMMANDSNVPROC = ?extern fn (GLuint, GLsizei, GLsizei, GLsizei, [*c]const GLubyte, GLsizei, GLenum, ?*const c_void) void;
pub const PFNGLPATHSUBCOORDSNVPROC = ?extern fn (GLuint, GLsizei, GLsizei, GLenum, ?*const c_void) void;
pub const PFNGLPATHSTRINGNVPROC = ?extern fn (GLuint, GLenum, GLsizei, ?*const c_void) void;
pub const PFNGLPATHGLYPHSNVPROC = ?extern fn (GLuint, GLenum, ?*const c_void, GLbitfield, GLsizei, GLenum, ?*const c_void, GLenum, GLuint, GLfloat) void;
pub const PFNGLPATHGLYPHRANGENVPROC = ?extern fn (GLuint, GLenum, ?*const c_void, GLbitfield, GLuint, GLsizei, GLenum, GLuint, GLfloat) void;
pub const PFNGLWEIGHTPATHSNVPROC = ?extern fn (GLuint, GLsizei, [*c]const GLuint, [*c]const GLfloat) void;
pub const PFNGLCOPYPATHNVPROC = ?extern fn (GLuint, GLuint) void;
pub const PFNGLINTERPOLATEPATHSNVPROC = ?extern fn (GLuint, GLuint, GLuint, GLfloat) void;
pub const PFNGLTRANSFORMPATHNVPROC = ?extern fn (GLuint, GLuint, GLenum, [*c]const GLfloat) void;
pub const PFNGLPATHPARAMETERIVNVPROC = ?extern fn (GLuint, GLenum, [*c]const GLint) void;
pub const PFNGLPATHPARAMETERINVPROC = ?extern fn (GLuint, GLenum, GLint) void;
pub const PFNGLPATHPARAMETERFVNVPROC = ?extern fn (GLuint, GLenum, [*c]const GLfloat) void;
pub const PFNGLPATHPARAMETERFNVPROC = ?extern fn (GLuint, GLenum, GLfloat) void;
pub const PFNGLPATHDASHARRAYNVPROC = ?extern fn (GLuint, GLsizei, [*c]const GLfloat) void;
pub const PFNGLPATHSTENCILFUNCNVPROC = ?extern fn (GLenum, GLint, GLuint) void;
pub const PFNGLPATHSTENCILDEPTHOFFSETNVPROC = ?extern fn (GLfloat, GLfloat) void;
pub const PFNGLSTENCILFILLPATHNVPROC = ?extern fn (GLuint, GLenum, GLuint) void;
pub const PFNGLSTENCILSTROKEPATHNVPROC = ?extern fn (GLuint, GLint, GLuint) void;
pub const PFNGLSTENCILFILLPATHINSTANCEDNVPROC = ?extern fn (GLsizei, GLenum, ?*const c_void, GLuint, GLenum, GLuint, GLenum, [*c]const GLfloat) void;
pub const PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC = ?extern fn (GLsizei, GLenum, ?*const c_void, GLuint, GLint, GLuint, GLenum, [*c]const GLfloat) void;
pub const PFNGLPATHCOVERDEPTHFUNCNVPROC = ?extern fn (GLenum) void;
pub const PFNGLCOVERFILLPATHNVPROC = ?extern fn (GLuint, GLenum) void;
pub const PFNGLCOVERSTROKEPATHNVPROC = ?extern fn (GLuint, GLenum) void;
pub const PFNGLCOVERFILLPATHINSTANCEDNVPROC = ?extern fn (GLsizei, GLenum, ?*const c_void, GLuint, GLenum, GLenum, [*c]const GLfloat) void;
pub const PFNGLCOVERSTROKEPATHINSTANCEDNVPROC = ?extern fn (GLsizei, GLenum, ?*const c_void, GLuint, GLenum, GLenum, [*c]const GLfloat) void;
pub const PFNGLGETPATHPARAMETERIVNVPROC = ?extern fn (GLuint, GLenum, [*c]GLint) void;
pub const PFNGLGETPATHPARAMETERFVNVPROC = ?extern fn (GLuint, GLenum, [*c]GLfloat) void;
pub const PFNGLGETPATHCOMMANDSNVPROC = ?extern fn (GLuint, [*c]GLubyte) void;
pub const PFNGLGETPATHCOORDSNVPROC = ?extern fn (GLuint, [*c]GLfloat) void;
pub const PFNGLGETPATHDASHARRAYNVPROC = ?extern fn (GLuint, [*c]GLfloat) void;
pub const PFNGLGETPATHMETRICSNVPROC = ?extern fn (GLbitfield, GLsizei, GLenum, ?*const c_void, GLuint, GLsizei, [*c]GLfloat) void;
pub const PFNGLGETPATHMETRICRANGENVPROC = ?extern fn (GLbitfield, GLuint, GLsizei, GLsizei, [*c]GLfloat) void;
pub const PFNGLGETPATHSPACINGNVPROC = ?extern fn (GLenum, GLsizei, GLenum, ?*const c_void, GLuint, GLfloat, GLfloat, GLenum, [*c]GLfloat) void;
pub const PFNGLISPOINTINFILLPATHNVPROC = ?extern fn (GLuint, GLuint, GLfloat, GLfloat) GLboolean;
pub const PFNGLISPOINTINSTROKEPATHNVPROC = ?extern fn (GLuint, GLfloat, GLfloat) GLboolean;
pub const PFNGLGETPATHLENGTHNVPROC = ?extern fn (GLuint, GLsizei, GLsizei) GLfloat;
pub const PFNGLPOINTALONGPATHNVPROC = ?extern fn (GLuint, GLsizei, GLsizei, GLfloat, [*c]GLfloat, [*c]GLfloat, [*c]GLfloat, [*c]GLfloat) GLboolean;
pub const PFNGLMATRIXLOAD3X2FNVPROC = ?extern fn (GLenum, [*c]const GLfloat) void;
pub const PFNGLMATRIXLOAD3X3FNVPROC = ?extern fn (GLenum, [*c]const GLfloat) void;
pub const PFNGLMATRIXLOADTRANSPOSE3X3FNVPROC = ?extern fn (GLenum, [*c]const GLfloat) void;
pub const PFNGLMATRIXMULT3X2FNVPROC = ?extern fn (GLenum, [*c]const GLfloat) void;
pub const PFNGLMATRIXMULT3X3FNVPROC = ?extern fn (GLenum, [*c]const GLfloat) void;
pub const PFNGLMATRIXMULTTRANSPOSE3X3FNVPROC = ?extern fn (GLenum, [*c]const GLfloat) void;
pub const PFNGLSTENCILTHENCOVERFILLPATHNVPROC = ?extern fn (GLuint, GLenum, GLuint, GLenum) void;
pub const PFNGLSTENCILTHENCOVERSTROKEPATHNVPROC = ?extern fn (GLuint, GLint, GLuint, GLenum) void;
pub const PFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC = ?extern fn (GLsizei, GLenum, ?*const c_void, GLuint, GLenum, GLuint, GLenum, GLenum, [*c]const GLfloat) void;
pub const PFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC = ?extern fn (GLsizei, GLenum, ?*const c_void, GLuint, GLint, GLuint, GLenum, GLenum, [*c]const GLfloat) void;
pub const PFNGLPATHGLYPHINDEXRANGENVPROC = ?extern fn (GLenum, ?*const c_void, GLbitfield, GLuint, GLfloat, [*c]GLuint) GLenum;
pub const PFNGLPATHGLYPHINDEXARRAYNVPROC = ?extern fn (GLuint, GLenum, ?*const c_void, GLbitfield, GLuint, GLsizei, GLuint, GLfloat) GLenum;
pub const PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC = ?extern fn (GLuint, GLenum, GLsizeiptr, ?*const c_void, GLsizei, GLuint, GLsizei, GLuint, GLfloat) GLenum;
pub const PFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC = ?extern fn (GLuint, GLint, GLenum, GLint, [*c]const GLfloat) void;
pub const PFNGLGETPROGRAMRESOURCEFVNVPROC = ?extern fn (GLuint, GLenum, GLuint, GLsizei, [*c]const GLenum, GLsizei, [*c]GLsizei, [*c]GLfloat) void;
pub const PFNGLPATHCOLORGENNVPROC = ?extern fn (GLenum, GLenum, GLenum, [*c]const GLfloat) void;
pub const PFNGLPATHTEXGENNVPROC = ?extern fn (GLenum, GLenum, GLint, [*c]const GLfloat) void;
pub const PFNGLPATHFOGGENNVPROC = ?extern fn (GLenum) void;
pub const PFNGLGETPATHCOLORGENIVNVPROC = ?extern fn (GLenum, GLenum, [*c]GLint) void;
pub const PFNGLGETPATHCOLORGENFVNVPROC = ?extern fn (GLenum, GLenum, [*c]GLfloat) void;
pub const PFNGLGETPATHTEXGENIVNVPROC = ?extern fn (GLenum, GLenum, [*c]GLint) void;
pub const PFNGLGETPATHTEXGENFVNVPROC = ?extern fn (GLenum, GLenum, [*c]GLfloat) void;
pub const PFNGLPIXELDATARANGENVPROC = ?extern fn (GLenum, GLsizei, ?*const c_void) void;
pub const PFNGLFLUSHPIXELDATARANGENVPROC = ?extern fn (GLenum) void;
pub const PFNGLPOINTPARAMETERINVPROC = ?extern fn (GLenum, GLint) void;
pub const PFNGLPOINTPARAMETERIVNVPROC = ?extern fn (GLenum, [*c]const GLint) void;
pub const PFNGLPRESENTFRAMEKEYEDNVPROC = ?extern fn (GLuint, GLuint64EXT, GLuint, GLuint, GLenum, GLenum, GLuint, GLuint, GLenum, GLuint, GLuint) void;
pub const PFNGLPRESENTFRAMEDUALFILLNVPROC = ?extern fn (GLuint, GLuint64EXT, GLuint, GLuint, GLenum, GLenum, GLuint, GLenum, GLuint, GLenum, GLuint, GLenum, GLuint) void;
pub const PFNGLGETVIDEOIVNVPROC = ?extern fn (GLuint, GLenum, [*c]GLint) void;
pub const PFNGLGETVIDEOUIVNVPROC = ?extern fn (GLuint, GLenum, [*c]GLuint) void;
pub const PFNGLGETVIDEOI64VNVPROC = ?extern fn (GLuint, GLenum, [*c]GLint64EXT) void;
pub const PFNGLGETVIDEOUI64VNVPROC = ?extern fn (GLuint, GLenum, [*c]GLuint64EXT) void;
pub const PFNGLPRIMITIVERESTARTNVPROC = ?extern fn () void;
pub const PFNGLPRIMITIVERESTARTINDEXNVPROC = ?extern fn (GLuint) void;
pub const PFNGLQUERYRESOURCENVPROC = ?extern fn (GLenum, GLint, GLuint, [*c]GLint) GLint;
pub const PFNGLGENQUERYRESOURCETAGNVPROC = ?extern fn (GLsizei, [*c]GLint) void;
pub const PFNGLDELETEQUERYRESOURCETAGNVPROC = ?extern fn (GLsizei, [*c]const GLint) void;
pub const PFNGLQUERYRESOURCETAGNVPROC = ?extern fn (GLint, [*c]const GLchar) void;
pub const PFNGLCOMBINERPARAMETERFVNVPROC = ?extern fn (GLenum, [*c]const GLfloat) void;
pub const PFNGLCOMBINERPARAMETERFNVPROC = ?extern fn (GLenum, GLfloat) void;
pub const PFNGLCOMBINERPARAMETERIVNVPROC = ?extern fn (GLenum, [*c]const GLint) void;
pub const PFNGLCOMBINERPARAMETERINVPROC = ?extern fn (GLenum, GLint) void;
pub const PFNGLCOMBINERINPUTNVPROC = ?extern fn (GLenum, GLenum, GLenum, GLenum, GLenum, GLenum) void;
pub const PFNGLCOMBINEROUTPUTNVPROC = ?extern fn (GLenum, GLenum, GLenum, GLenum, GLenum, GLenum, GLenum, GLboolean, GLboolean, GLboolean) void;
pub const PFNGLFINALCOMBINERINPUTNVPROC = ?extern fn (GLenum, GLenum, GLenum, GLenum) void;
pub const PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC = ?extern fn (GLenum, GLenum, GLenum, GLenum, [*c]GLfloat) void;
pub const PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC = ?extern fn (GLenum, GLenum, GLenum, GLenum, [*c]GLint) void;
pub const PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC = ?extern fn (GLenum, GLenum, GLenum, [*c]GLfloat) void;
pub const PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC = ?extern fn (GLenum, GLenum, GLenum, [*c]GLint) void;
pub const PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC = ?extern fn (GLenum, GLenum, [*c]GLfloat) void;
pub const PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC = ?extern fn (GLenum, GLenum, [*c]GLint) void;
pub const PFNGLCOMBINERSTAGEPARAMETERFVNVPROC = ?extern fn (GLenum, GLenum, [*c]const GLfloat) void;
pub const PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC = ?extern fn (GLenum, GLenum, [*c]GLfloat) void;
pub const PFNGLFRAMEBUFFERSAMPLELOCATIONSFVNVPROC = ?extern fn (GLenum, GLuint, GLsizei, [*c]const GLfloat) void;
pub const PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNVPROC = ?extern fn (GLuint, GLuint, GLsizei, [*c]const GLfloat) void;
pub const PFNGLRESOLVEDEPTHVALUESNVPROC = ?extern fn () void;
pub const PFNGLMAKEBUFFERRESIDENTNVPROC = ?extern fn (GLenum, GLenum) void;
pub const PFNGLMAKEBUFFERNONRESIDENTNVPROC = ?extern fn (GLenum) void;
pub const PFNGLISBUFFERRESIDENTNVPROC = ?extern fn (GLenum) GLboolean;
pub const PFNGLMAKENAMEDBUFFERRESIDENTNVPROC = ?extern fn (GLuint, GLenum) void;
pub const PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC = ?extern fn (GLuint) void;
pub const PFNGLISNAMEDBUFFERRESIDENTNVPROC = ?extern fn (GLuint) GLboolean;
pub const PFNGLGETBUFFERPARAMETERUI64VNVPROC = ?extern fn (GLenum, GLenum, [*c]GLuint64EXT) void;
pub const PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC = ?extern fn (GLuint, GLenum, [*c]GLuint64EXT) void;
pub const PFNGLGETINTEGERUI64VNVPROC = ?extern fn (GLenum, [*c]GLuint64EXT) void;
pub const PFNGLUNIFORMUI64NVPROC = ?extern fn (GLint, GLuint64EXT) void;
pub const PFNGLUNIFORMUI64VNVPROC = ?extern fn (GLint, GLsizei, [*c]const GLuint64EXT) void;
pub const PFNGLPROGRAMUNIFORMUI64NVPROC = ?extern fn (GLuint, GLint, GLuint64EXT) void;
pub const PFNGLPROGRAMUNIFORMUI64VNVPROC = ?extern fn (GLuint, GLint, GLsizei, [*c]const GLuint64EXT) void;
pub const PFNGLTEXTUREBARRIERNVPROC = ?extern fn () void;
pub const PFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC = ?extern fn (GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLboolean) void;
pub const PFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC = ?extern fn (GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean) void;
pub const PFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC = ?extern fn (GLuint, GLenum, GLsizei, GLint, GLsizei, GLsizei, GLboolean) void;
pub const PFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC = ?extern fn (GLuint, GLenum, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean) void;
pub const PFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC = ?extern fn (GLuint, GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLboolean) void;
pub const PFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC = ?extern fn (GLuint, GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean) void;
pub const PFNGLBEGINTRANSFORMFEEDBACKNVPROC = ?extern fn (GLenum) void;
pub const PFNGLENDTRANSFORMFEEDBACKNVPROC = ?extern fn () void;
pub const PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC = ?extern fn (GLsizei, [*c]const GLint, GLenum) void;
pub const PFNGLBINDBUFFERRANGENVPROC = ?extern fn (GLenum, GLuint, GLuint, GLintptr, GLsizeiptr) void;
pub const PFNGLBINDBUFFEROFFSETNVPROC = ?extern fn (GLenum, GLuint, GLuint, GLintptr) void;
pub const PFNGLBINDBUFFERBASENVPROC = ?extern fn (GLenum, GLuint, GLuint) void;
pub const PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC = ?extern fn (GLuint, GLsizei, [*c]const GLint, GLenum) void;
pub const PFNGLACTIVEVARYINGNVPROC = ?extern fn (GLuint, [*c]const GLchar) void;
pub const PFNGLGETVARYINGLOCATIONNVPROC = ?extern fn (GLuint, [*c]const GLchar) GLint;
pub const PFNGLGETACTIVEVARYINGNVPROC = ?extern fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLsizei, [*c]GLenum, [*c]GLchar) void;
pub const PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC = ?extern fn (GLuint, GLuint, [*c]GLint) void;
pub const PFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC = ?extern fn (GLsizei, [*c]const GLint, GLsizei, [*c]const GLint, GLenum) void;
pub const PFNGLBINDTRANSFORMFEEDBACKNVPROC = ?extern fn (GLenum, GLuint) void;
pub const PFNGLDELETETRANSFORMFEEDBACKSNVPROC = ?extern fn (GLsizei, [*c]const GLuint) void;
pub const PFNGLGENTRANSFORMFEEDBACKSNVPROC = ?extern fn (GLsizei, [*c]GLuint) void;
pub const PFNGLISTRANSFORMFEEDBACKNVPROC = ?extern fn (GLuint) GLboolean;
pub const PFNGLPAUSETRANSFORMFEEDBACKNVPROC = ?extern fn () void;
pub const PFNGLRESUMETRANSFORMFEEDBACKNVPROC = ?extern fn () void;
pub const PFNGLDRAWTRANSFORMFEEDBACKNVPROC = ?extern fn (GLenum, GLuint) void;
pub const GLvdpauSurfaceNV = GLintptr;
pub const PFNGLVDPAUINITNVPROC = ?extern fn (?*const c_void, ?*const c_void) void;
pub const PFNGLVDPAUFININVPROC = ?extern fn () void;
pub const PFNGLVDPAUREGISTERVIDEOSURFACENVPROC = ?extern fn (?*const c_void, GLenum, GLsizei, [*c]const GLuint) GLvdpauSurfaceNV;
pub const PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC = ?extern fn (?*const c_void, GLenum, GLsizei, [*c]const GLuint) GLvdpauSurfaceNV;
pub const PFNGLVDPAUISSURFACENVPROC = ?extern fn (GLvdpauSurfaceNV) GLboolean;
pub const PFNGLVDPAUUNREGISTERSURFACENVPROC = ?extern fn (GLvdpauSurfaceNV) void;
pub const PFNGLVDPAUGETSURFACEIVNVPROC = ?extern fn (GLvdpauSurfaceNV, GLenum, GLsizei, [*c]GLsizei, [*c]GLint) void;
pub const PFNGLVDPAUSURFACEACCESSNVPROC = ?extern fn (GLvdpauSurfaceNV, GLenum) void;
pub const PFNGLVDPAUMAPSURFACESNVPROC = ?extern fn (GLsizei, [*c]const GLvdpauSurfaceNV) void;
pub const PFNGLVDPAUUNMAPSURFACESNVPROC = ?extern fn (GLsizei, [*c]const GLvdpauSurfaceNV) void;
pub const PFNGLFLUSHVERTEXARRAYRANGENVPROC = ?extern fn () void;
pub const PFNGLVERTEXARRAYRANGENVPROC = ?extern fn (GLsizei, ?*const c_void) void;
pub const PFNGLVERTEXATTRIBL1I64NVPROC = ?extern fn (GLuint, GLint64EXT) void;
pub const PFNGLVERTEXATTRIBL2I64NVPROC = ?extern fn (GLuint, GLint64EXT, GLint64EXT) void;
pub const PFNGLVERTEXATTRIBL3I64NVPROC = ?extern fn (GLuint, GLint64EXT, GLint64EXT, GLint64EXT) void;
pub const PFNGLVERTEXATTRIBL4I64NVPROC = ?extern fn (GLuint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT) void;
pub const PFNGLVERTEXATTRIBL1I64VNVPROC = ?extern fn (GLuint, [*c]const GLint64EXT) void;
pub const PFNGLVERTEXATTRIBL2I64VNVPROC = ?extern fn (GLuint, [*c]const GLint64EXT) void;
pub const PFNGLVERTEXATTRIBL3I64VNVPROC = ?extern fn (GLuint, [*c]const GLint64EXT) void;
pub const PFNGLVERTEXATTRIBL4I64VNVPROC = ?extern fn (GLuint, [*c]const GLint64EXT) void;
pub const PFNGLVERTEXATTRIBL1UI64NVPROC = ?extern fn (GLuint, GLuint64EXT) void;
pub const PFNGLVERTEXATTRIBL2UI64NVPROC = ?extern fn (GLuint, GLuint64EXT, GLuint64EXT) void;
pub const PFNGLVERTEXATTRIBL3UI64NVPROC = ?extern fn (GLuint, GLuint64EXT, GLuint64EXT, GLuint64EXT) void;
pub const PFNGLVERTEXATTRIBL4UI64NVPROC = ?extern fn (GLuint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT) void;
pub const PFNGLVERTEXATTRIBL1UI64VNVPROC = ?extern fn (GLuint, [*c]const GLuint64EXT) void;
pub const PFNGLVERTEXATTRIBL2UI64VNVPROC = ?extern fn (GLuint, [*c]const GLuint64EXT) void;
pub const PFNGLVERTEXATTRIBL3UI64VNVPROC = ?extern fn (GLuint, [*c]const GLuint64EXT) void;
pub const PFNGLVERTEXATTRIBL4UI64VNVPROC = ?extern fn (GLuint, [*c]const GLuint64EXT) void;
pub const PFNGLGETVERTEXATTRIBLI64VNVPROC = ?extern fn (GLuint, GLenum, [*c]GLint64EXT) void;
pub const PFNGLGETVERTEXATTRIBLUI64VNVPROC = ?extern fn (GLuint, GLenum, [*c]GLuint64EXT) void;
pub const PFNGLVERTEXATTRIBLFORMATNVPROC = ?extern fn (GLuint, GLint, GLenum, GLsizei) void;
pub const PFNGLBUFFERADDRESSRANGENVPROC = ?extern fn (GLenum, GLuint, GLuint64EXT, GLsizeiptr) void;
pub const PFNGLVERTEXFORMATNVPROC = ?extern fn (GLint, GLenum, GLsizei) void;
pub const PFNGLNORMALFORMATNVPROC = ?extern fn (GLenum, GLsizei) void;
pub const PFNGLCOLORFORMATNVPROC = ?extern fn (GLint, GLenum, GLsizei) void;
pub const PFNGLINDEXFORMATNVPROC = ?extern fn (GLenum, GLsizei) void;
pub const PFNGLTEXCOORDFORMATNVPROC = ?extern fn (GLint, GLenum, GLsizei) void;
pub const PFNGLEDGEFLAGFORMATNVPROC = ?extern fn (GLsizei) void;
pub const PFNGLSECONDARYCOLORFORMATNVPROC = ?extern fn (GLint, GLenum, GLsizei) void;
pub const PFNGLFOGCOORDFORMATNVPROC = ?extern fn (GLenum, GLsizei) void;
pub const PFNGLVERTEXATTRIBFORMATNVPROC = ?extern fn (GLuint, GLint, GLenum, GLboolean, GLsizei) void;
pub const PFNGLVERTEXATTRIBIFORMATNVPROC = ?extern fn (GLuint, GLint, GLenum, GLsizei) void;
pub const PFNGLGETINTEGERUI64I_VNVPROC = ?extern fn (GLenum, GLuint, [*c]GLuint64EXT) void;
pub const PFNGLAREPROGRAMSRESIDENTNVPROC = ?extern fn (GLsizei, [*c]const GLuint, [*c]GLboolean) GLboolean;
pub const PFNGLBINDPROGRAMNVPROC = ?extern fn (GLenum, GLuint) void;
pub const PFNGLDELETEPROGRAMSNVPROC = ?extern fn (GLsizei, [*c]const GLuint) void;
pub const PFNGLEXECUTEPROGRAMNVPROC = ?extern fn (GLenum, GLuint, [*c]const GLfloat) void;
pub const PFNGLGENPROGRAMSNVPROC = ?extern fn (GLsizei, [*c]GLuint) void;
pub const PFNGLGETPROGRAMPARAMETERDVNVPROC = ?extern fn (GLenum, GLuint, GLenum, [*c]GLdouble) void;
pub const PFNGLGETPROGRAMPARAMETERFVNVPROC = ?extern fn (GLenum, GLuint, GLenum, [*c]GLfloat) void;
pub const PFNGLGETPROGRAMIVNVPROC = ?extern fn (GLuint, GLenum, [*c]GLint) void;
pub const PFNGLGETPROGRAMSTRINGNVPROC = ?extern fn (GLuint, GLenum, [*c]GLubyte) void;
pub const PFNGLGETTRACKMATRIXIVNVPROC = ?extern fn (GLenum, GLuint, GLenum, [*c]GLint) void;
pub const PFNGLGETVERTEXATTRIBDVNVPROC = ?extern fn (GLuint, GLenum, [*c]GLdouble) void;
pub const PFNGLGETVERTEXATTRIBFVNVPROC = ?extern fn (GLuint, GLenum, [*c]GLfloat) void;
pub const PFNGLGETVERTEXATTRIBIVNVPROC = ?extern fn (GLuint, GLenum, [*c]GLint) void;
pub const PFNGLGETVERTEXATTRIBPOINTERVNVPROC = ?extern fn (GLuint, GLenum, [*c](?*c_void)) void;
pub const PFNGLISPROGRAMNVPROC = ?extern fn (GLuint) GLboolean;
pub const PFNGLLOADPROGRAMNVPROC = ?extern fn (GLenum, GLuint, GLsizei, [*c]const GLubyte) void;
pub const PFNGLPROGRAMPARAMETER4DNVPROC = ?extern fn (GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble) void;
pub const PFNGLPROGRAMPARAMETER4DVNVPROC = ?extern fn (GLenum, GLuint, [*c]const GLdouble) void;
pub const PFNGLPROGRAMPARAMETER4FNVPROC = ?extern fn (GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat) void;
pub const PFNGLPROGRAMPARAMETER4FVNVPROC = ?extern fn (GLenum, GLuint, [*c]const GLfloat) void;
pub const PFNGLPROGRAMPARAMETERS4DVNVPROC = ?extern fn (GLenum, GLuint, GLsizei, [*c]const GLdouble) void;
pub const PFNGLPROGRAMPARAMETERS4FVNVPROC = ?extern fn (GLenum, GLuint, GLsizei, [*c]const GLfloat) void;
pub const PFNGLREQUESTRESIDENTPROGRAMSNVPROC = ?extern fn (GLsizei, [*c]const GLuint) void;
pub const PFNGLTRACKMATRIXNVPROC = ?extern fn (GLenum, GLuint, GLenum, GLenum) void;
pub const PFNGLVERTEXATTRIBPOINTERNVPROC = ?extern fn (GLuint, GLint, GLenum, GLsizei, ?*const c_void) void;
pub const PFNGLVERTEXATTRIB1DNVPROC = ?extern fn (GLuint, GLdouble) void;
pub const PFNGLVERTEXATTRIB1DVNVPROC = ?extern fn (GLuint, [*c]const GLdouble) void;
pub const PFNGLVERTEXATTRIB1FNVPROC = ?extern fn (GLuint, GLfloat) void;
pub const PFNGLVERTEXATTRIB1FVNVPROC = ?extern fn (GLuint, [*c]const GLfloat) void;
pub const PFNGLVERTEXATTRIB1SNVPROC = ?extern fn (GLuint, GLshort) void;
pub const PFNGLVERTEXATTRIB1SVNVPROC = ?extern fn (GLuint, [*c]const GLshort) void;
pub const PFNGLVERTEXATTRIB2DNVPROC = ?extern fn (GLuint, GLdouble, GLdouble) void;
pub const PFNGLVERTEXATTRIB2DVNVPROC = ?extern fn (GLuint, [*c]const GLdouble) void;
pub const PFNGLVERTEXATTRIB2FNVPROC = ?extern fn (GLuint, GLfloat, GLfloat) void;
pub const PFNGLVERTEXATTRIB2FVNVPROC = ?extern fn (GLuint, [*c]const GLfloat) void;
pub const PFNGLVERTEXATTRIB2SNVPROC = ?extern fn (GLuint, GLshort, GLshort) void;
pub const PFNGLVERTEXATTRIB2SVNVPROC = ?extern fn (GLuint, [*c]const GLshort) void;
pub const PFNGLVERTEXATTRIB3DNVPROC = ?extern fn (GLuint, GLdouble, GLdouble, GLdouble) void;
pub const PFNGLVERTEXATTRIB3DVNVPROC = ?extern fn (GLuint, [*c]const GLdouble) void;
pub const PFNGLVERTEXATTRIB3FNVPROC = ?extern fn (GLuint, GLfloat, GLfloat, GLfloat) void;
pub const PFNGLVERTEXATTRIB3FVNVPROC = ?extern fn (GLuint, [*c]const GLfloat) void;
pub const PFNGLVERTEXATTRIB3SNVPROC = ?extern fn (GLuint, GLshort, GLshort, GLshort) void;
pub const PFNGLVERTEXATTRIB3SVNVPROC = ?extern fn (GLuint, [*c]const GLshort) void;
pub const PFNGLVERTEXATTRIB4DNVPROC = ?extern fn (GLuint, GLdouble, GLdouble, GLdouble, GLdouble) void;
pub const PFNGLVERTEXATTRIB4DVNVPROC = ?extern fn (GLuint, [*c]const GLdouble) void;
pub const PFNGLVERTEXATTRIB4FNVPROC = ?extern fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat) void;
pub const PFNGLVERTEXATTRIB4FVNVPROC = ?extern fn (GLuint, [*c]const GLfloat) void;
pub const PFNGLVERTEXATTRIB4SNVPROC = ?extern fn (GLuint, GLshort, GLshort, GLshort, GLshort) void;
pub const PFNGLVERTEXATTRIB4SVNVPROC = ?extern fn (GLuint, [*c]const GLshort) void;
pub const PFNGLVERTEXATTRIB4UBNVPROC = ?extern fn (GLuint, GLubyte, GLubyte, GLubyte, GLubyte) void;
pub const PFNGLVERTEXATTRIB4UBVNVPROC = ?extern fn (GLuint, [*c]const GLubyte) void;
pub const PFNGLVERTEXATTRIBS1DVNVPROC = ?extern fn (GLuint, GLsizei, [*c]const GLdouble) void;
pub const PFNGLVERTEXATTRIBS1FVNVPROC = ?extern fn (GLuint, GLsizei, [*c]const GLfloat) void;
pub const PFNGLVERTEXATTRIBS1SVNVPROC = ?extern fn (GLuint, GLsizei, [*c]const GLshort) void;
pub const PFNGLVERTEXATTRIBS2DVNVPROC = ?extern fn (GLuint, GLsizei, [*c]const GLdouble) void;
pub const PFNGLVERTEXATTRIBS2FVNVPROC = ?extern fn (GLuint, GLsizei, [*c]const GLfloat) void;
pub const PFNGLVERTEXATTRIBS2SVNVPROC = ?extern fn (GLuint, GLsizei, [*c]const GLshort) void;
pub const PFNGLVERTEXATTRIBS3DVNVPROC = ?extern fn (GLuint, GLsizei, [*c]const GLdouble) void;
pub const PFNGLVERTEXATTRIBS3FVNVPROC = ?extern fn (GLuint, GLsizei, [*c]const GLfloat) void;
pub const PFNGLVERTEXATTRIBS3SVNVPROC = ?extern fn (GLuint, GLsizei, [*c]const GLshort) void;
pub const PFNGLVERTEXATTRIBS4DVNVPROC = ?extern fn (GLuint, GLsizei, [*c]const GLdouble) void;
pub const PFNGLVERTEXATTRIBS4FVNVPROC = ?extern fn (GLuint, GLsizei, [*c]const GLfloat) void;
pub const PFNGLVERTEXATTRIBS4SVNVPROC = ?extern fn (GLuint, GLsizei, [*c]const GLshort) void;
pub const PFNGLVERTEXATTRIBS4UBVNVPROC = ?extern fn (GLuint, GLsizei, [*c]const GLubyte) void;
pub const PFNGLVERTEXATTRIBI1IEXTPROC = ?extern fn (GLuint, GLint) void;
pub const PFNGLVERTEXATTRIBI2IEXTPROC = ?extern fn (GLuint, GLint, GLint) void;
pub const PFNGLVERTEXATTRIBI3IEXTPROC = ?extern fn (GLuint, GLint, GLint, GLint) void;
pub const PFNGLVERTEXATTRIBI4IEXTPROC = ?extern fn (GLuint, GLint, GLint, GLint, GLint) void;
pub const PFNGLVERTEXATTRIBI1UIEXTPROC = ?extern fn (GLuint, GLuint) void;
pub const PFNGLVERTEXATTRIBI2UIEXTPROC = ?extern fn (GLuint, GLuint, GLuint) void;
pub const PFNGLVERTEXATTRIBI3UIEXTPROC = ?extern fn (GLuint, GLuint, GLuint, GLuint) void;
pub const PFNGLVERTEXATTRIBI4UIEXTPROC = ?extern fn (GLuint, GLuint, GLuint, GLuint, GLuint) void;
pub const PFNGLVERTEXATTRIBI1IVEXTPROC = ?extern fn (GLuint, [*c]const GLint) void;
pub const PFNGLVERTEXATTRIBI2IVEXTPROC = ?extern fn (GLuint, [*c]const GLint) void;
pub const PFNGLVERTEXATTRIBI3IVEXTPROC = ?extern fn (GLuint, [*c]const GLint) void;
pub const PFNGLVERTEXATTRIBI4IVEXTPROC = ?extern fn (GLuint, [*c]const GLint) void;
pub const PFNGLVERTEXATTRIBI1UIVEXTPROC = ?extern fn (GLuint, [*c]const GLuint) void;
pub const PFNGLVERTEXATTRIBI2UIVEXTPROC = ?extern fn (GLuint, [*c]const GLuint) void;
pub const PFNGLVERTEXATTRIBI3UIVEXTPROC = ?extern fn (GLuint, [*c]const GLuint) void;
pub const PFNGLVERTEXATTRIBI4UIVEXTPROC = ?extern fn (GLuint, [*c]const GLuint) void;
pub const PFNGLVERTEXATTRIBI4BVEXTPROC = ?extern fn (GLuint, [*c]const GLbyte) void;
pub const PFNGLVERTEXATTRIBI4SVEXTPROC = ?extern fn (GLuint, [*c]const GLshort) void;
pub const PFNGLVERTEXATTRIBI4UBVEXTPROC = ?extern fn (GLuint, [*c]const GLubyte) void;
pub const PFNGLVERTEXATTRIBI4USVEXTPROC = ?extern fn (GLuint, [*c]const GLushort) void;
pub const PFNGLVERTEXATTRIBIPOINTEREXTPROC = ?extern fn (GLuint, GLint, GLenum, GLsizei, ?*const c_void) void;
pub const PFNGLGETVERTEXATTRIBIIVEXTPROC = ?extern fn (GLuint, GLenum, [*c]GLint) void;
pub const PFNGLGETVERTEXATTRIBIUIVEXTPROC = ?extern fn (GLuint, GLenum, [*c]GLuint) void;
pub const PFNGLBEGINVIDEOCAPTURENVPROC = ?extern fn (GLuint) void;
pub const PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC = ?extern fn (GLuint, GLuint, GLenum, GLintptrARB) void;
pub const PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC = ?extern fn (GLuint, GLuint, GLenum, GLenum, GLuint) void;
pub const PFNGLENDVIDEOCAPTURENVPROC = ?extern fn (GLuint) void;
pub const PFNGLGETVIDEOCAPTUREIVNVPROC = ?extern fn (GLuint, GLenum, [*c]GLint) void;
pub const PFNGLGETVIDEOCAPTURESTREAMIVNVPROC = ?extern fn (GLuint, GLuint, GLenum, [*c]GLint) void;
pub const PFNGLGETVIDEOCAPTURESTREAMFVNVPROC = ?extern fn (GLuint, GLuint, GLenum, [*c]GLfloat) void;
pub const PFNGLGETVIDEOCAPTURESTREAMDVNVPROC = ?extern fn (GLuint, GLuint, GLenum, [*c]GLdouble) void;
pub const PFNGLVIDEOCAPTURENVPROC = ?extern fn (GLuint, [*c]GLuint, [*c]GLuint64EXT) GLenum;
pub const PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC = ?extern fn (GLuint, GLuint, GLenum, [*c]const GLint) void;
pub const PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC = ?extern fn (GLuint, GLuint, GLenum, [*c]const GLfloat) void;
pub const PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC = ?extern fn (GLuint, GLuint, GLenum, [*c]const GLdouble) void;
pub const PFNGLVIEWPORTSWIZZLENVPROC = ?extern fn (GLuint, GLenum, GLenum, GLenum, GLenum) void;
pub const PFNGLFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC = ?extern fn (GLenum, GLenum, GLuint, GLint, GLint, GLsizei) void;
pub const PFNGLHINTPGIPROC = ?extern fn (GLenum, GLint) void;
pub const PFNGLDETAILTEXFUNCSGISPROC = ?extern fn (GLenum, GLsizei, [*c]const GLfloat) void;
pub const PFNGLGETDETAILTEXFUNCSGISPROC = ?extern fn (GLenum, [*c]GLfloat) void;
pub const PFNGLFOGFUNCSGISPROC = ?extern fn (GLsizei, [*c]const GLfloat) void;
pub const PFNGLGETFOGFUNCSGISPROC = ?extern fn ([*c]GLfloat) void;
pub const PFNGLSAMPLEMASKSGISPROC = ?extern fn (GLclampf, GLboolean) void;
pub const PFNGLSAMPLEPATTERNSGISPROC = ?extern fn (GLenum) void;
pub const PFNGLPIXELTEXGENPARAMETERISGISPROC = ?extern fn (GLenum, GLint) void;
pub const PFNGLPIXELTEXGENPARAMETERIVSGISPROC = ?extern fn (GLenum, [*c]const GLint) void;
pub const PFNGLPIXELTEXGENPARAMETERFSGISPROC = ?extern fn (GLenum, GLfloat) void;
pub const PFNGLPIXELTEXGENPARAMETERFVSGISPROC = ?extern fn (GLenum, [*c]const GLfloat) void;
pub const PFNGLGETPIXELTEXGENPARAMETERIVSGISPROC = ?extern fn (GLenum, [*c]GLint) void;
pub const PFNGLGETPIXELTEXGENPARAMETERFVSGISPROC = ?extern fn (GLenum, [*c]GLfloat) void;
pub const PFNGLPOINTPARAMETERFSGISPROC = ?extern fn (GLenum, GLfloat) void;
pub const PFNGLPOINTPARAMETERFVSGISPROC = ?extern fn (GLenum, [*c]const GLfloat) void;
pub const PFNGLSHARPENTEXFUNCSGISPROC = ?extern fn (GLenum, GLsizei, [*c]const GLfloat) void;
pub const PFNGLGETSHARPENTEXFUNCSGISPROC = ?extern fn (GLenum, [*c]GLfloat) void;
pub const PFNGLTEXIMAGE4DSGISPROC = ?extern fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const c_void) void;
pub const PFNGLTEXSUBIMAGE4DSGISPROC = ?extern fn (GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void) void;
pub const PFNGLTEXTURECOLORMASKSGISPROC = ?extern fn (GLboolean, GLboolean, GLboolean, GLboolean) void;
pub const PFNGLGETTEXFILTERFUNCSGISPROC = ?extern fn (GLenum, GLenum, [*c]GLfloat) void;
pub const PFNGLTEXFILTERFUNCSGISPROC = ?extern fn (GLenum, GLenum, GLsizei, [*c]const GLfloat) void;
pub const PFNGLASYNCMARKERSGIXPROC = ?extern fn (GLuint) void;
pub const PFNGLFINISHASYNCSGIXPROC = ?extern fn ([*c]GLuint) GLint;
pub const PFNGLPOLLASYNCSGIXPROC = ?extern fn ([*c]GLuint) GLint;
pub const PFNGLGENASYNCMARKERSSGIXPROC = ?extern fn (GLsizei) GLuint;
pub const PFNGLDELETEASYNCMARKERSSGIXPROC = ?extern fn (GLuint, GLsizei) void;
pub const PFNGLISASYNCMARKERSGIXPROC = ?extern fn (GLuint) GLboolean;
pub const PFNGLFLUSHRASTERSGIXPROC = ?extern fn () void;
pub const PFNGLFRAGMENTCOLORMATERIALSGIXPROC = ?extern fn (GLenum, GLenum) void;
pub const PFNGLFRAGMENTLIGHTFSGIXPROC = ?extern fn (GLenum, GLenum, GLfloat) void;
pub const PFNGLFRAGMENTLIGHTFVSGIXPROC = ?extern fn (GLenum, GLenum, [*c]const GLfloat) void;
pub const PFNGLFRAGMENTLIGHTISGIXPROC = ?extern fn (GLenum, GLenum, GLint) void;
pub const PFNGLFRAGMENTLIGHTIVSGIXPROC = ?extern fn (GLenum, GLenum, [*c]const GLint) void;
pub const PFNGLFRAGMENTLIGHTMODELFSGIXPROC = ?extern fn (GLenum, GLfloat) void;
pub const PFNGLFRAGMENTLIGHTMODELFVSGIXPROC = ?extern fn (GLenum, [*c]const GLfloat) void;
pub const PFNGLFRAGMENTLIGHTMODELISGIXPROC = ?extern fn (GLenum, GLint) void;
pub const PFNGLFRAGMENTLIGHTMODELIVSGIXPROC = ?extern fn (GLenum, [*c]const GLint) void;
pub const PFNGLFRAGMENTMATERIALFSGIXPROC = ?extern fn (GLenum, GLenum, GLfloat) void;
pub const PFNGLFRAGMENTMATERIALFVSGIXPROC = ?extern fn (GLenum, GLenum, [*c]const GLfloat) void;
pub const PFNGLFRAGMENTMATERIALISGIXPROC = ?extern fn (GLenum, GLenum, GLint) void;
pub const PFNGLFRAGMENTMATERIALIVSGIXPROC = ?extern fn (GLenum, GLenum, [*c]const GLint) void;
pub const PFNGLGETFRAGMENTLIGHTFVSGIXPROC = ?extern fn (GLenum, GLenum, [*c]GLfloat) void;
pub const PFNGLGETFRAGMENTLIGHTIVSGIXPROC = ?extern fn (GLenum, GLenum, [*c]GLint) void;
pub const PFNGLGETFRAGMENTMATERIALFVSGIXPROC = ?extern fn (GLenum, GLenum, [*c]GLfloat) void;
pub const PFNGLGETFRAGMENTMATERIALIVSGIXPROC = ?extern fn (GLenum, GLenum, [*c]GLint) void;
pub const PFNGLLIGHTENVISGIXPROC = ?extern fn (GLenum, GLint) void;
pub const PFNGLFRAMEZOOMSGIXPROC = ?extern fn (GLint) void;
pub const PFNGLIGLOOINTERFACESGIXPROC = ?extern fn (GLenum, ?*const c_void) void;
pub const PFNGLGETINSTRUMENTSSGIXPROC = ?extern fn () GLint;
pub const PFNGLINSTRUMENTSBUFFERSGIXPROC = ?extern fn (GLsizei, [*c]GLint) void;
pub const PFNGLPOLLINSTRUMENTSSGIXPROC = ?extern fn ([*c]GLint) GLint;
pub const PFNGLREADINSTRUMENTSSGIXPROC = ?extern fn (GLint) void;
pub const PFNGLSTARTINSTRUMENTSSGIXPROC = ?extern fn () void;
pub const PFNGLSTOPINSTRUMENTSSGIXPROC = ?extern fn (GLint) void;
pub const PFNGLGETLISTPARAMETERFVSGIXPROC = ?extern fn (GLuint, GLenum, [*c]GLfloat) void;
pub const PFNGLGETLISTPARAMETERIVSGIXPROC = ?extern fn (GLuint, GLenum, [*c]GLint) void;
pub const PFNGLLISTPARAMETERFSGIXPROC = ?extern fn (GLuint, GLenum, GLfloat) void;
pub const PFNGLLISTPARAMETERFVSGIXPROC = ?extern fn (GLuint, GLenum, [*c]const GLfloat) void;
pub const PFNGLLISTPARAMETERISGIXPROC = ?extern fn (GLuint, GLenum, GLint) void;
pub const PFNGLLISTPARAMETERIVSGIXPROC = ?extern fn (GLuint, GLenum, [*c]const GLint) void;
pub const PFNGLPIXELTEXGENSGIXPROC = ?extern fn (GLenum) void;
pub const PFNGLDEFORMATIONMAP3DSGIXPROC = ?extern fn (GLenum, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, [*c]const GLdouble) void;
pub const PFNGLDEFORMATIONMAP3FSGIXPROC = ?extern fn (GLenum, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, [*c]const GLfloat) void;
pub const PFNGLDEFORMSGIXPROC = ?extern fn (GLbitfield) void;
pub const PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC = ?extern fn (GLbitfield) void;
pub const PFNGLREFERENCEPLANESGIXPROC = ?extern fn ([*c]const GLdouble) void;
pub const PFNGLSPRITEPARAMETERFSGIXPROC = ?extern fn (GLenum, GLfloat) void;
pub const PFNGLSPRITEPARAMETERFVSGIXPROC = ?extern fn (GLenum, [*c]const GLfloat) void;
pub const PFNGLSPRITEPARAMETERISGIXPROC = ?extern fn (GLenum, GLint) void;
pub const PFNGLSPRITEPARAMETERIVSGIXPROC = ?extern fn (GLenum, [*c]const GLint) void;
pub const PFNGLTAGSAMPLEBUFFERSGIXPROC = ?extern fn () void;
pub const PFNGLCOLORTABLESGIPROC = ?extern fn (GLenum, GLenum, GLsizei, GLenum, GLenum, ?*const c_void) void;
pub const PFNGLCOLORTABLEPARAMETERFVSGIPROC = ?extern fn (GLenum, GLenum, [*c]const GLfloat) void;
pub const PFNGLCOLORTABLEPARAMETERIVSGIPROC = ?extern fn (GLenum, GLenum, [*c]const GLint) void;
pub const PFNGLCOPYCOLORTABLESGIPROC = ?extern fn (GLenum, GLenum, GLint, GLint, GLsizei) void;
pub const PFNGLGETCOLORTABLESGIPROC = ?extern fn (GLenum, GLenum, GLenum, ?*c_void) void;
pub const PFNGLGETCOLORTABLEPARAMETERFVSGIPROC = ?extern fn (GLenum, GLenum, [*c]GLfloat) void;
pub const PFNGLGETCOLORTABLEPARAMETERIVSGIPROC = ?extern fn (GLenum, GLenum, [*c]GLint) void;
pub const PFNGLFINISHTEXTURESUNXPROC = ?extern fn () void;
pub const PFNGLGLOBALALPHAFACTORBSUNPROC = ?extern fn (GLbyte) void;
pub const PFNGLGLOBALALPHAFACTORSSUNPROC = ?extern fn (GLshort) void;
pub const PFNGLGLOBALALPHAFACTORISUNPROC = ?extern fn (GLint) void;
pub const PFNGLGLOBALALPHAFACTORFSUNPROC = ?extern fn (GLfloat) void;
pub const PFNGLGLOBALALPHAFACTORDSUNPROC = ?extern fn (GLdouble) void;
pub const PFNGLGLOBALALPHAFACTORUBSUNPROC = ?extern fn (GLubyte) void;
pub const PFNGLGLOBALALPHAFACTORUSSUNPROC = ?extern fn (GLushort) void;
pub const PFNGLGLOBALALPHAFACTORUISUNPROC = ?extern fn (GLuint) void;
pub const PFNGLDRAWMESHARRAYSSUNPROC = ?extern fn (GLenum, GLint, GLsizei, GLsizei) void;
pub const PFNGLREPLACEMENTCODEUISUNPROC = ?extern fn (GLuint) void;
pub const PFNGLREPLACEMENTCODEUSSUNPROC = ?extern fn (GLushort) void;
pub const PFNGLREPLACEMENTCODEUBSUNPROC = ?extern fn (GLubyte) void;
pub const PFNGLREPLACEMENTCODEUIVSUNPROC = ?extern fn ([*c]const GLuint) void;
pub const PFNGLREPLACEMENTCODEUSVSUNPROC = ?extern fn ([*c]const GLushort) void;
pub const PFNGLREPLACEMENTCODEUBVSUNPROC = ?extern fn ([*c]const GLubyte) void;
pub const PFNGLREPLACEMENTCODEPOINTERSUNPROC = ?extern fn (GLenum, GLsizei, [*c](?*const c_void)) void;
pub const PFNGLCOLOR4UBVERTEX2FSUNPROC = ?extern fn (GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat) void;
pub const PFNGLCOLOR4UBVERTEX2FVSUNPROC = ?extern fn ([*c]const GLubyte, [*c]const GLfloat) void;
pub const PFNGLCOLOR4UBVERTEX3FSUNPROC = ?extern fn (GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat) void;
pub const PFNGLCOLOR4UBVERTEX3FVSUNPROC = ?extern fn ([*c]const GLubyte, [*c]const GLfloat) void;
pub const PFNGLCOLOR3FVERTEX3FSUNPROC = ?extern fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) void;
pub const PFNGLCOLOR3FVERTEX3FVSUNPROC = ?extern fn ([*c]const GLfloat, [*c]const GLfloat) void;
pub const PFNGLNORMAL3FVERTEX3FSUNPROC = ?extern fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) void;
pub const PFNGLNORMAL3FVERTEX3FVSUNPROC = ?extern fn ([*c]const GLfloat, [*c]const GLfloat) void;
pub const PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC = ?extern fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) void;
pub const PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC = ?extern fn ([*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) void;
pub const PFNGLTEXCOORD2FVERTEX3FSUNPROC = ?extern fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) void;
pub const PFNGLTEXCOORD2FVERTEX3FVSUNPROC = ?extern fn ([*c]const GLfloat, [*c]const GLfloat) void;
pub const PFNGLTEXCOORD4FVERTEX4FSUNPROC = ?extern fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) void;
pub const PFNGLTEXCOORD4FVERTEX4FVSUNPROC = ?extern fn ([*c]const GLfloat, [*c]const GLfloat) void;
pub const PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC = ?extern fn (GLfloat, GLfloat, GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat) void;
pub const PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC = ?extern fn ([*c]const GLfloat, [*c]const GLubyte, [*c]const GLfloat) void;
pub const PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC = ?extern fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) void;
pub const PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC = ?extern fn ([*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) void;
pub const PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC = ?extern fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) void;
pub const PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC = ?extern fn ([*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) void;
pub const PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC = ?extern fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) void;
pub const PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC = ?extern fn ([*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) void;
pub const PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC = ?extern fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) void;
pub const PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC = ?extern fn ([*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) void;
pub const PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC = ?extern fn (GLuint, GLfloat, GLfloat, GLfloat) void;
pub const PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC = ?extern fn ([*c]const GLuint, [*c]const GLfloat) void;
pub const PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC = ?extern fn (GLuint, GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat) void;
pub const PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC = ?extern fn ([*c]const GLuint, [*c]const GLubyte, [*c]const GLfloat) void;
pub const PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC = ?extern fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) void;
pub const PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC = ?extern fn ([*c]const GLuint, [*c]const GLfloat, [*c]const GLfloat) void;
pub const PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC = ?extern fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) void;
pub const PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC = ?extern fn ([*c]const GLuint, [*c]const GLfloat, [*c]const GLfloat) void;
pub const PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC = ?extern fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) void;
pub const PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC = ?extern fn ([*c]const GLuint, [*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) void;
pub const PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC = ?extern fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) void;
pub const PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC = ?extern fn ([*c]const GLuint, [*c]const GLfloat, [*c]const GLfloat) void;
pub const PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC = ?extern fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) void;
pub const PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC = ?extern fn ([*c]const GLuint, [*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) void;
pub const PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC = ?extern fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) void;
pub const PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC = ?extern fn ([*c]const GLuint, [*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) void;
pub extern fn glBlendEquationSeparateATI(modeRGB: GLenum, modeA: GLenum) void;
pub const PFNGLBLENDEQUATIONSEPARATEATIPROC = ?extern fn (GLenum, GLenum) void;
pub const PFNGLEGLIMAGETARGETTEXTURE2DOESPROC = ?extern fn (GLenum, GLeglImageOES) void;
pub const PFNGLEGLIMAGETARGETRENDERBUFFERSTORAGEOESPROC = ?extern fn (GLenum, GLeglImageOES) void;

pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = 35919;
pub const GL_REG_21_ATI = 35126;
pub const GL_RGBA2 = 32853;
pub const GL_HALF_FLOAT = 5131;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV = 36388;
pub const GL_RGBA8UI = 36220;
pub const GL_POINT = 6912;
pub const GL_VERTEX_SHADER_INVOCATIONS_ARB = 33520;
pub const GL_IMAGE_BINDING_FORMAT_EXT = 36974;
pub const GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL = 38141;
pub const GL_TEXTURE_ALPHA_SIZE_EXT = 32863;
pub const GL_STENCIL_BACK_REF = 36003;
pub const GL_UNSIGNED_NORMALIZED = 35863;
pub const GL_ARB_provoking_vertex = 1;
pub const GL_COMBINER1_NV = 34129;
pub const GL_AFFINE_3D_NV = 37012;
pub const GL_OUTPUT_TEXTURE_COORD23_EXT = 34740;
pub const GL_ATI_pixel_format_float = 1;
pub const GL_EXT_pixel_buffer_object = 1;
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT = 36049;
pub const GL_BGRA_INTEGER = 36251;
pub const GL_LARGE_CW_ARC_TO_NV = 24;
pub const GL_ATI_pixel_format_float = 1;
pub const GL_EXT_pixel_buffer_object = 1;
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT = 36049;
pub const GL_BGRA_INTEGER = 36251;
pub const GL_CON_24_ATI = 35161;
pub const GL_CLIP_DISTANCE6 = 12294;
pub const GL_MAP_ATTRIB_V_ORDER_NV = 34500;
pub const GL_MAX_PROGRAM_RESULT_COMPONENTS_NV = 35081;
pub const GL_INT_IMAGE_2D_EXT = 36952;
pub const GL_SIGNED_RGBA8_NV = 34556;
pub const GL_POLYGON = 9;
pub const GL_SUN_mesh_array = 1;
pub const GL_TEXTURE_BUFFER_EXT = 35882;
pub const GL_COLOR_ATTACHMENT22 = 36086;
pub const GL_HARDLIGHT_NV = 37531;
pub const GL_POST_CONVOLUTION_GREEN_BIAS = 32801;
pub const GL_CONVOLUTION_BORDER_MODE = 32787;
pub const GL_NV_explicit_multisample = 1;
pub const GL_FLOAT16_MAT3x2_AMD = 37322;
pub const GL_ARB_texture_buffer_range = 1;
pub const GL_DOUBLE_MAT4 = 36680;
pub const GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH = 33532;
pub const GL_NV_shader_thread_group = 1;
pub const GL_EXT_vertex_weighting = 1;
pub const GL_IMAGE_2D = 36941;
pub const GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT = 35958;
pub const GL_SHADER_BINARY_FORMAT_SPIR_V_ARB = 38225;
pub const GL_LAST_VERTEX_CONVENTION_EXT = 36430;
pub const GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = 33298;
pub const GL_FEEDBACK_BUFFER_SIZE = 3569;
pub const GL_TEXTURE_ALPHA_TYPE_ARB = 35859;
pub const GL_ATI_separate_stencil = 1;
pub const GL_SYNC_GPU_COMMANDS_COMPLETE = 37143;
pub const GL_ARB_vertex_buffer_object = 1;
pub const GL_MATRIX29_ARB = 35037;
pub const GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_NV = 38224;
pub const GL_DUAL_INTENSITY16_SGIS = 33051;
pub const GL_LINE_STRIP_ADJACENCY = 11;
pub const GL_SAMPLE_SHADING_ARB = 35894;
pub const GL_UNSIGNED_INT_10_10_10_2_EXT = 32822;
pub const GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV = 37695;
pub const GL_COLOR_MATRIX_STACK_DEPTH_SGI = 32946;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV = 36387;
pub const GL_NV_tessellation_program5 = 1;
pub const GL_SAMPLER_CUBE_MAP_ARRAY_ARB = 36876;
pub const GL_UNSIGNED_INT64_ARB = 5135;
pub const GL_MAP1_VERTEX_ATTRIB14_4_NV = 34414;
pub const GL_TEXTURE_MATERIAL_PARAMETER_EXT = 33618;
pub const GL_ARB_program_interface_query = 1;
pub const GL_ARB_vertex_type_10f_11f_11f_rev = 1;
pub const GL_PATH_MODELVIEW_STACK_DEPTH_NV = 2979;
pub const GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV = 36259;
pub const GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV = 17;
pub const GL_WARP_SIZE_NV = 37689;
pub const GL_DUAL_ALPHA16_SGIS = 33043;
pub const GL_PRIMITIVE_RESTART_FIXED_INDEX = 36201;
pub const GL_MAP_PERSISTENT_BIT = 64;
pub const GL_VIEW_CLASS_RGTC2_RG = 33489;
pub const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 36972;
pub const GL_POST_CONVOLUTION_GREEN_SCALE_EXT = 32797;
pub const GL_EXT_shader_image_load_store = 1;
pub const GL_BUFFER_ACCESS = 35003;
pub const GL_FRAMEBUFFER_BARRIER_BIT_EXT = 1024;
pub const GL_ROUND_NV = 37028;
pub const GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB = 37311;
pub const GL_MODELVIEW18_ARB = 34610;
pub const GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX = 36939;
pub const GL_MAX_VERTEX_VARYING_COMPONENTS_EXT = 36318;
pub const GL_ARB_compute_shader = 1;
pub const GL_NOR = 5384;
pub const GL_INT_VEC3_ARB = 35668;
pub const GL_CON_0_ATI = 35137;
pub const GL_ARB_texture_compression_rgtc = 1;
pub const GL_TEXTURE_INTENSITY_TYPE = 35861;
pub const GL_VERTICAL_LINE_TO_NV = 8;
pub const GL_COPY_READ_BUFFER = 36662;
pub const GL_4PASS_3_SGIS = 32935;
pub const GL_VERSION_1_2 = 1;
pub const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 36182;
pub const GL_QUERY_BUFFER_AMD = 37266;
pub const GL_SUN_triangle_list = 1;
pub const GL_DRAW_BUFFER8_ARB = 34861;
pub const GL_CON_11_ATI = 35148;
pub const GL_DRAW_BUFFER8 = 34861;
pub const GL_MAX_VIEWS_OVR = 38449;
pub const GL_INDEX_MATERIAL_EXT = 33208;
pub const GL_SEPARATE_SPECULAR_COLOR = 33274;
pub const GL_FILTER4_SGIS = 33094;
pub const GL_REPLACEMENT_CODE_ARRAY_SUN = 34240;
pub const GL_PROGRAM_BINARY_FORMAT_MESA = 34655;
pub const GL_GENERIC_ATTRIB_NV = 35965;
pub const GL_DOUBLE_MAT4x2 = 36685;
pub const GL_DRAW_INDIRECT_ADDRESS_NV = 36673;
pub const GL_EXT_color_subtable = 1;
pub const GL_ARB_texture_env_add = 1;
pub const GL_SIGNALED = 37145;
pub const GL_HP_texture_lighting = 1;
pub const GL_VERTEX_ATTRIB_ARRAY4_NV = 34388;
pub const GL_MODELVIEW21_ARB = 34613;
pub const GL_FRAMEBUFFER_EXT = 36160;
pub const GL_FLOAT_VEC4_ARB = 35666;
pub const GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 33297;
pub const GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX = 33086;
pub const GL_RENDERBUFFER_HEIGHT_EXT = 36163;
pub const GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 37133;
pub const GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT = 36060;
pub const GL_RGBA16 = 32859;
pub const GL_UNIFORM_BLOCK_DATA_SIZE = 35392;
pub const GL_FRAGMENT_DEPTH = 33874;
pub const GL_INT_SAMPLER_CUBE_EXT = 36300;
pub const GL_RG32F = 33328;
pub const GL_STORAGE_CACHED_APPLE = 34238;
pub const GL_CON_30_ATI = 35167;
pub const GL_SHADER_BINARY_FORMATS = 36344;
pub const GL_SAMPLE_COVERAGE = 32928;
pub const GL_SPECULAR = 4610;
pub const GL_SAMPLER_2D = 35678;
pub const GL_INTERNALFORMAT_GREEN_TYPE = 33401;
pub const GL_TRANSFORM_FEEDBACK_ACTIVE = 36388;
pub const GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT = 34061;
pub const GL_FOG_COORDINATE_ARRAY_LIST_IBM = 103076;
pub const GL_COLORBURN_KHR = 37530;
pub const GL_UNSIGNED_INT_SAMPLER_1D = 36305;
pub const GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV = 8;
pub const GL_OPERAND2_RGB_ARB = 34194;
pub const GL_UNPACK_IMAGE_HEIGHT = 32878;
pub const GL_ACTIVE_SUBROUTINE_MAX_LENGTH = 36424;
pub const GL_CLIP_DISTANCE1 = 12289;
pub const GL_RGBA16I_EXT = 36232;
pub const GL_LINE_TOKEN = 1794;
pub const GL_DOUBLEBUFFER = 3122;
pub const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS = 37588;
pub const GL_SHADER_SOURCE_LENGTH = 35720;
pub const GL_BACK_SECONDARY_COLOR_NV = 35960;
pub const GL_COLOR_ATTACHMENT23 = 36087;
pub const GL_RG = 33319;
pub const GL_DUAL_LUMINANCE16_SGIS = 33047;
pub const GL_TEXTURE6_ARB = 33990;
pub const GL_TEXTURE1_ARB = 33985;
pub const GL_MAX_COMBINED_DIMENSIONS = 33410;
pub const GL_DU8DV8_ATI = 34682;
pub const GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT = 34063;
pub const GL_KHR_blend_equation_advanced = 1;
pub const GL_DRAW_BUFFER15 = 34868;
pub const GL_LAYER_PROVOKING_VERTEX = 33374;
pub const GL_DOUBLE_MAT3 = 36679;
pub const GL_LOCAL_CONSTANT_VALUE_EXT = 34796;
pub const GL_PATH_COVER_DEPTH_FUNC_NV = 37055;
pub const GL_ARB_framebuffer_object = 1;
pub const GL_SWIZZLE_STR_ATI = 35190;
pub const GL_IMAGE_TEXEL_SIZE = 33447;
pub const GL_SHARED_EDGE_NV = 192;
pub const GL_PATH_FILL_COVER_MODE_NV = 36994;
pub const GL_ZERO = 0;
pub const GL_DUAL_ALPHA4_SGIS = 33040;
pub const GL_OR_INVERTED = 5389;
pub const GL_VERTEX_SHADER_INVOCATIONS = 33520;
pub const GL_CON_18_ATI = 35155;
pub const GL_RELATIVE_SMALL_CCW_ARC_TO_NV = 19;
pub const GL_ALWAYS_FAST_HINT_PGI = 107020;
pub const GL_TEXTURE_BUFFER_DATA_STORE_BINDING = 35885;
pub const GL_PACK_COMPRESSED_BLOCK_DEPTH = 37165;
pub const GL_TEXTURE_REDUCTION_MODE_ARB = 37734;
pub const GL_SAMPLES_ARB = 32937;
pub const GL_EXT_shared_texture_palette = 1;
pub const GL_C3F_V3F = 10788;
pub const GL_REG_29_ATI = 35134;
pub const GL_ROUNDED_RECT8_NV = 238;
pub const GL_MAT_AMBIENT_BIT_PGI = 1048576;
pub const GL_VERTEX_ATTRIB_ARRAY12_NV = 34396;
pub const GL_INDEX_OFFSET = 3347;
pub const GL_OUTPUT_TEXTURE_COORD5_EXT = 34722;
pub const GL_TEXTURE_1D_ARRAY_EXT = 35864;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR = 37845;
pub const GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT = 36319;
pub const GL_UNSIGNED_SHORT_4_4_4_4 = 32819;
pub const GL_SAMPLE_MASK_VALUE_NV = 36434;
pub const GL_AND_INVERTED = 5380;
pub const GL_TEXTURE_BUFFER_ARB = 35882;
pub const GL_SPARE0_NV = 34094;
pub const GL_STRICT_LIGHTING_HINT_PGI = 107031;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR = 37846;
pub const GL_EYE_PLANE = 9474;
pub const GL_LERP_ATI = 35177;
pub const GL_OUTPUT_TEXTURE_COORD11_EXT = 34728;
pub const GL_TANGENT_ARRAY_EXT = 33849;
pub const GL_MINMAX_FORMAT_EXT = 32815;
pub const GL_INDEX_SHIFT = 3346;
pub const GL_IMAGE_SCALE_X_HP = 33109;
pub const GL_PACK_INVERT_MESA = 34648;
pub const GL_ARB_shader_image_size = 1;
pub const GL_UNSIGNED_INT64_VEC4_NV = 36855;
pub const GL_OUTPUT_TEXTURE_COORD7_EXT = 34724;
pub const GL_STENCIL_BACK_FAIL = 34817;
pub const GL_BLEND = 3042;
pub const GL_PARAMETER_BUFFER_BINDING = 33007;
pub const GL_ARB_shader_ballot = 1;
pub const GL_ARB_texture_non_power_of_two = 1;
pub const GL_AMD_shader_gpu_shader_half_float_fetch = 1;
pub const GL_MIN_SAMPLE_SHADING_VALUE_ARB = 35895;
pub const GL_EXT_texture_cube_map = 1;
pub const GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW = 36877;
pub const GL_RELATIVE_LINE_TO_NV = 5;
pub const GL_DEBUG_CALLBACK_USER_PARAM = 33349;
pub const GL_NEGATE_BIT_ATI = 4;
pub const GL_NV_shader_atomic_float = 1;
pub const GL_POST_CONVOLUTION_BLUE_BIAS = 32802;
pub const GL_INT64_VEC3_NV = 36842;
pub const GL_IMAGE_CLASS_4_X_16 = 33468;
pub const GL_REG_19_ATI = 35124;
pub const GL_EXT_debug_marker = 1;
pub const GL_R32F = 33326;
pub const GL_DUAL_LUMINANCE_ALPHA8_SGIS = 33053;
pub const GL_SOFTLIGHT_NV = 37532;
pub const GL_ACTIVE_VERTEX_UNITS_ARB = 34469;
pub const GL_APPLE_fence = 1;
pub const GL_SHADER = 33505;
pub const GL_UNSIGNED_INT_5_9_9_9_REV_EXT = 35902;
pub const GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV = 34909;
pub const GL_VERSION_1_3 = 1;
pub const GL_VERTEX_ARRAY_BINDING = 34229;
pub const GL_AMD_transform_feedback3_lines_triangles = 1;
pub const GL_MAP2_VERTEX_ATTRIB7_4_NV = 34423;
pub const GL_MAX_CONVOLUTION_WIDTH_EXT = 32794;
pub const GL_TEXTURE23_ARB = 34007;
pub const GL_TEXTURE_DEPTH_EXT = 32881;
pub const GL_MAX_COMPUTE_IMAGE_UNIFORMS = 37309;
pub const GL_AUX_DEPTH_STENCIL_APPLE = 35348;
pub const GL_DRAW_BUFFER9 = 34862;
pub const GL_DRAW_BUFFER0_ATI = 34853;
pub const GL_PALETTE4_RGBA8_OES = 35729;
pub const GL_CLIENT_ATTRIB_STACK_DEPTH = 2993;
pub const GL_MODELVIEW16_ARB = 34608;
pub const GL_UNSIGNED_INT_VEC4 = 36296;
pub const GL_OUTPUT_TEXTURE_COORD6_EXT = 34723;
pub const GL_COLOR_TABLE_SGI = 32976;
pub const GL_LIST_PRIORITY_SGIX = 33154;
pub const GL_FIRST_VERTEX_CONVENTION_EXT = 36429;
pub const GL_TEXTURE_MIN_LOD = 33082;
pub const GL_ARB_query_buffer_object = 1;
pub const GL_GEOMETRY_INPUT_TYPE_ARB = 36315;
pub const GL_POINT_DISTANCE_ATTENUATION_ARB = 33065;
pub const GL_FOG_COORDINATE_ARRAY_POINTER_EXT = 33878;
pub const GL_EXT_shader_integer_mix = 1;
pub const GL_ALPHA8_EXT = 32828;
pub const GL_VERTEX_ARRAY_COUNT_EXT = 32893;
pub const GL_MATRIX12_ARB = 35020;
pub const GL_R16F = 33325;
pub const GL_POLYGON_OFFSET_CLAMP_EXT = 36379;
pub const GL_VERTEX_SUBROUTINE = 37608;
pub const GL_RGBA4 = 32854;
pub const GL_ONE = 1;
pub const GL_PRIMITIVE_RESTART_NV = 34136;
pub const GL_PIXEL_SUBSAMPLE_4444_SGIX = 34210;
pub const GL_TEXTURE_COORD_ARRAY_POINTER = 32914;
pub const GL_REG_12_ATI = 35117;
pub const GL_ATTRIBUTE_ADDRESS_COMMAND_NV = 9;
pub const GL_MAX_VERTEX_OUTPUT_COMPONENTS = 37154;
pub const GL_VIEW_CLASS_BPTC_FLOAT = 33491;
pub const GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB = 33351;
pub const GL_INDEX_ARRAY_STRIDE_EXT = 32902;
pub const GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB = 34341;
pub const GL_BLEND_EQUATION_EXT = 32777;
pub const GL_MATRIX0_NV = 34352;
pub const GL_ARB_texture_env_combine = 1;
pub const GL_NUM_SPARSE_LEVELS_ARB = 37290;
pub const GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB = 33523;
pub const GL_QUERY_BUFFER_BINDING_AMD = 37267;
pub const GL_PROGRAM_MATRIX_EXT = 36397;
pub const GL_NV_conservative_raster_dilate = 1;
pub const GL_WRITE_DISCARD_NV = 35006;
pub const GL_INSTRUMENT_MEASUREMENTS_SGIX = 33153;
pub const GL_CLIP_DISTANCE0 = 12288;
pub const GL_TEXTURE_BUFFER = 35882;
pub const GL_MAP1_VERTEX_ATTRIB9_4_NV = 34409;
pub const GL_MAX_PALETTE_MATRICES_ARB = 34882;
pub const GL_DEBUG_SEVERITY_HIGH = 37190;
pub const GL_TEXTURE_3D = 32879;
pub const GL_OUTPUT_TEXTURE_COORD0_EXT = 34717;
pub const GL_COLOR_ATTACHMENT24 = 36088;
pub const GL_C4UB_V2F = 10786;
pub const GL_INT_IMAGE_CUBE_EXT = 36955;
pub const GL_PIXEL_COUNT_AVAILABLE_NV = 34919;
pub const GL_UNPACK_COMPRESSED_BLOCK_SIZE = 37162;
pub const GL_RESAMPLE_DECIMATE_SGIX = 33840;
pub const GL_DRAW_BUFFER14 = 34867;
pub const GL_DOUBLE_MAT4_EXT = 36680;
pub const GL_SGIX_pixel_tiles = 1;
pub const GL_EVAL_VERTEX_ATTRIB12_NV = 34514;
pub const GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB = 37274;
pub const GL_VIEWPORT_SWIZZLE_Z_NV = 37722;
pub const GL_UNPACK_CONSTANT_DATA_SUNX = 33237;
pub const GL_DOUBLE_MAT2 = 36678;
pub const GL_TEXTURE_BINDING_CUBE_MAP_EXT = 34068;
pub const GL_ALLOW_DRAW_FRG_HINT_PGI = 107024;
pub const GL_PIXEL_TEXTURE_SGIS = 33619;
pub const GL_PROXY_TEXTURE_3D = 32880;
pub const GL_TEXTURE_MAX_LEVEL = 33085;
pub const GL_CON_6_ATI = 35143;
pub const GL_CONIC_CURVE_TO_NV = 26;
pub const GL_AMD_vertex_shader_viewport_index = 1;
pub const GL_STENCIL_RENDERABLE = 33416;
pub const GL_MAT_DIFFUSE_BIT_PGI = 4194304;
pub const GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE = 33454;
pub const GL_VIVIDLIGHT_NV = 37542;
pub const GL_INCR = 7682;
pub const GL_ARB_depth_buffer_float = 1;
pub const GL_HP_occlusion_test = 1;
pub const GL_SAMPLE_LOCATION_NV = 36432;
pub const GL_EDGE_FLAG_ARRAY_BUFFER_BINDING = 34971;
pub const GL_CULL_FACE_MODE = 2885;
pub const GL_VIDEO_COLOR_CONVERSION_MATRIX_NV = 36905;
pub const GL_STENCIL_BACK_FUNC_ATI = 34816;
pub const GL_DRAW_BUFFER14_ARB = 34867;
pub const GL_RESCALE_NORMAL = 32826;
pub const GL_FRAGMENT_LIGHTING_SGIX = 33792;
pub const GL_CON_21_ATI = 35158;
pub const GL_TEXTURE_SWIZZLE_G = 36419;
pub const GL_DRAW_ELEMENTS_INSTANCED_COMMAND_NV = 6;
pub const GL_EXCLUSION_NV = 37536;
pub const GL_MAP1_VERTEX_ATTRIB1_4_NV = 34401;
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 36048;
pub const GL_SGIS_texture_border_clamp = 1;
pub const GL_MAX_DEPTH_TEXTURE_SAMPLES = 37135;
pub const GL_RELATIVE_CONIC_CURVE_TO_NV = 27;
pub const GL_VARIABLE_A_NV = 34083;
pub const GL_QUERY_COUNTER_BITS = 34916;
pub const GL_RELATIVE_ROUNDED_RECT4_NV = 237;
pub const GL_MAX_VERTEX_UNIFORM_VECTORS = 36347;
pub const GL_NEGATIVE_ONE_EXT = 34783;
pub const GL_COLOR_INDEX2_EXT = 32995;
pub const GL_CURRENT_RASTER_TEXTURE_COORDS = 2822;
pub const GL_RELATIVE_RECT_NV = 247;
pub const GL_PIXEL_MAP_I_TO_A = 3189;
pub const GL_NV_command_list = 1;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR = 37841;
pub const GL_ARB_sparse_texture2 = 1;
pub const GL_GREMEDY_string_marker = 1;
pub const GL_PROGRAM_PARAMETERS_ARB = 34984;
pub const GL_SM_COUNT_NV = 37691;
pub const GL_ALLOW_DRAW_WIN_HINT_PGI = 107023;
pub const GL_T2F_V3F = 10791;
pub const GL_PIXEL_MAP_R_TO_R_SIZE = 3254;
pub const GL_INT_SAMPLER_2D_ARRAY = 36303;
pub const GL_OP_MAX_EXT = 34698;
pub const GL_TESS_EVALUATION_SHADER_BIT = 16;
pub const GL_COLOR_ATTACHMENT1_EXT = 36065;
pub const GL_CONSTANT_ARB = 34166;
pub const GL_422_EXT = 32972;
pub const GL_SHADOW_ATTENUATION_EXT = 33614;
pub const GL_READ_PIXELS = 33420;
pub const GL_NEGATIVE_Z_EXT = 34779;
pub const GL_IMAGE_BINDING_FORMAT = 36974;
pub const GL_LUMINANCE16_ALPHA16_EXT = 32840;
pub const GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB = 34922;
pub const GL_DEBUG_OUTPUT = 37600;
pub const GL_LIGHT_ENV_MODE_SGIX = 33799;
pub const GL_AMD_transform_feedback4 = 1;
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 35979;
pub const GL_MAP1_VERTEX_ATTRIB6_4_NV = 34406;
pub const GL_TEXTURE3_ARB = 33987;
pub const GL_ALPHA_TO_COVERAGE_DITHER_MODE_NV = 37567;
pub const GL_FLOAT_MAT3x2 = 35687;
pub const GL_NV_viewport_swizzle = 1;
pub const GL_VIEW_CLASS_64_BITS = 33478;
pub const GL_MAP1_GRID_SEGMENTS = 3537;
pub const GL_ARB_get_program_binary = 1;
pub const GL_BUFFER_UPDATE_BARRIER_BIT = 512;
pub const GL_AMD_blend_minmax_factor = 1;
pub const GL_EXT_paletted_texture = 1;
pub const GL_CURRENT_VERTEX_ATTRIB = 34342;
pub const GL_REG_7_ATI = 35112;
pub const GL_RGB8_EXT = 32849;
pub const GL_QUERY_NO_WAIT = 36372;
pub const GL_UNSIGNED_INT64_NV = 5135;
pub const GL_COLOR_ARRAY_STRIDE_EXT = 32899;
pub const GL_PATH_CLIENT_LENGTH_NV = 36991;
pub const GL_IMAGE_3D_EXT = 36942;
pub const GL_APPLE_row_bytes = 1;
pub const GL_PIXEL_TEX_GEN_MODE_SGIX = 33579;
pub const GL_MINMAX_SINK_EXT = 32816;
pub const GL_MAX_SERVER_WAIT_TIMEOUT = 37137;
pub const GL_MESA_ycbcr_texture = 1;
pub const GL_RESET_NOTIFICATION_STRATEGY_ARB = 33366;
pub const GL_EDGE_FLAG_ARRAY = 32889;
pub const GL_INTERNALFORMAT_PREFERRED = 33392;
pub const GL_ALPHA32I_EXT = 36228;
pub const GL_NV_shader_atomic_float64 = 1;
pub const GL_TRIANGLES = 4;
pub const GL_EXT_cmyka = 1;
pub const GL_READ_FRAMEBUFFER_EXT = 36008;
pub const GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = 37652;
pub const GL_UNPACK_SKIP_IMAGES_EXT = 32877;
pub const GL_SKIP_COMPONENTS4_NV = -3;
pub const GL_CLIP_DISTANCE3 = 12291;
pub const GL_DOUBLE_MAT3x2 = 36683;
pub const GL_PHONG_WIN = 33002;
pub const GL_REG_23_ATI = 35128;
pub const GL_LOCAL_CONSTANT_DATATYPE_EXT = 34797;
pub const GL_OUTPUT_TEXTURE_COORD24_EXT = 34741;
pub const GL_DSDT8_MAG8_INTENSITY8_NV = 34571;
pub const GL_FLOAT_MAT2 = 35674;
pub const GL_IMAGE_BINDING_LAYERED_EXT = 36668;
pub const GL_COMPRESSED_RGBA_ASTC_10x5_KHR = 37816;
pub const GL_VARIANT_ARRAY_TYPE_EXT = 34791;
pub const GL_COLOR_ATTACHMENT25 = 36089;
pub const GL_NOOP = 5381;
pub const GL_HSL_HUE_NV = 37549;
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = 35918;
pub const GL_INTENSITY16_EXT = 32845;
pub const GL_COUNT_UP_NV = 37000;
pub const GL_SRGB8_EXT = 35905;
pub const GL_DRAW_BUFFER13 = 34866;
pub const GL_SAMPLER_1D_ARRAY_EXT = 36288;
pub const GL_GREEN_INTEGER = 36245;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT = 34072;
pub const GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV = 36269;
pub const GL_DEPTH_COMPONENT32_ARB = 33191;
pub const GL_INDEX_ARRAY_POINTER = 32913;
pub const GL_ACTIVE_UNIFORMS = 35718;
pub const GL_SGIX_scalebias_hint = 1;
pub const GL_INTENSITY_FLOAT16_APPLE = 34845;
pub const GL_DEBUG_TYPE_OTHER = 33361;
pub const GL_DOT3_ATI = 35174;
pub const GL_STENCIL_INDEX1 = 36166;
pub const GL_COLOR_ATTACHMENT6_EXT = 36070;
pub const GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW = 33517;
pub const GL_TEXTURE26_ARB = 34010;
pub const GL_SRC1_RGB = 34177;
pub const GL_UNIFORM_BUFFER_EXT = 36334;
pub const GL_DRAW_BUFFER3_ARB = 34856;
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 35398;
pub const GL_ARB_shader_bit_encoding = 1;
pub const GL_TRANSLATE_X_NV = 37006;
pub const GL_TEXTURE_SHARED_SIZE = 35903;
pub const GL_COLOR_ARRAY_COUNT_EXT = 32900;
pub const GL_RECLAIM_MEMORY_HINT_PGI = 107006;
pub const GL_TEXTURE_ENV_MODE = 8704;
pub const GL_SIGNED_LUMINANCE8_ALPHA8_NV = 34564;
pub const GL_INT8_NV = 36832;
pub const GL_INT_SAMPLER_2D_EXT = 36298;
pub const GL_MAX_VERTEX_VARYING_COMPONENTS_ARB = 36318;
pub const GL_NV_texture_shader = 1;
pub const GL_EXT_packed_depth_stencil = 1;
pub const GL_VARIANT_DATATYPE_EXT = 34789;
pub const GL_HIGH_FLOAT = 36338;
pub const GL_SGIX_depth_texture = 1;
pub const GL_ARB_texture_compression_bptc = 1;
pub const GL_CONSERVATIVE_RASTER_DILATE_GRANULARITY_NV = 37755;
pub const GL_ARB_texture_filter_anisotropic = 1;
pub const GL_NORMAL_ARRAY_TYPE_EXT = 32894;
pub const GL_MAX_COMPUTE_WORK_GROUP_SIZE = 37311;
pub const GL_INNOCENT_CONTEXT_RESET_ARB = 33364;
pub const GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT = 36969;
pub const GL_RASTER_MULTISAMPLE_EXT = 37671;
pub const GL_PIXEL_UNPACK_BUFFER = 35052;
pub const GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL = 38139;
pub const GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB = 37695;
pub const GL_OPERAND1_ALPHA = 34201;
pub const GL_INVALID_INDEX = c_uint(4294967295);
pub const GL_MAX_HEIGHT = 33407;
pub const GL_NVX_gpu_memory_info = 1;
pub const GL_LUMINANCE_FLOAT32_ATI = 34840;
pub const GL_OR_REVERSE = 5387;
pub const GL_OPERAND0_RGB_ARB = 34192;
pub const GL_EXT_convolution = 1;
pub const GL_UNIFORM_BLOCK_BINDING = 35391;
pub const GL_EVAL_VERTEX_ATTRIB9_NV = 34511;
pub const GL_TEXTURE18_ARB = 34002;
pub const GL_PERFQUERY_WAIT_INTEL = 33787;
pub const GL_MAP2_VERTEX_ATTRIB15_4_NV = 34431;
pub const GL_CONSERVATIVE_RASTER_DILATE_NV = 37753;
pub const GL_PIXEL_MAP_B_TO_B = 3192;
pub const GL_UNSIGNED_INT_24_8 = 34042;
pub const GL_ACTIVE_VARIABLES = 37637;
pub const GL_FRAGMENT_MATERIAL_EXT = 33609;
pub const GL_RGB10_A2_EXT = 32857;
pub const GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT = 34765;
pub const GL_MAP1_VERTEX_ATTRIB2_4_NV = 34402;
pub const GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY_ARB = 37762;
pub const GL_SAMPLER_BUFFER = 36290;
pub const GL_EXT_subtexture = 1;
pub const GL_SAMPLER_2D_ARRAY_SHADOW_EXT = 36292;
pub const GL_VERSION_1_1 = 1;
pub const GL_OBJECT_LINEAR_NV = 9217;
pub const GL_PACK_ROW_LENGTH = 3330;
pub const GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX = 33140;
pub const GL_MAX_DRAW_BUFFERS_ATI = 34852;
pub const GL_EXT_texture_filter_anisotropic = 1;
pub const GL_TESS_GEN_SPACING = 36471;
pub const GL_NV_multisample_filter_hint = 1;
pub const GL_CONVOLUTION_HEIGHT_EXT = 32793;
pub const GL_MIN_PROGRAM_TEXEL_OFFSET_EXT = 35076;
pub const GL_VERTEX_ATTRIB_ARRAY_LONG = 34638;
pub const GL_COMPRESSED_RG11_EAC = 37490;
pub const GL_READ_WRITE_ARB = 35002;
pub const GL_COMBINE_ALPHA_EXT = 34162;
pub const GL_GEOMETRY_SHADER = 36313;
pub const GL_TEXTURE_GEQUAL_R_SGIX = 33181;
pub const GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL = 38142;
pub const GL_INTENSITY12_EXT = 32844;
pub const GL_TEXTURE_DEPTH = 32881;
pub const GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL = 38130;
pub const GL_NUM_FRAGMENT_REGISTERS_ATI = 35182;
pub const GL_FUNC_ADD_EXT = 32774;
pub const GL_MAX_GEOMETRY_UNIFORM_BLOCKS = 35372;
pub const GL_DRAW_BUFFER1_ARB = 34854;
pub const GL_BGRA_INTEGER_EXT = 36251;
pub const GL_FOG_START = 2915;
pub const GL_IS_PER_PATCH = 37607;
pub const GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 37132;
pub const GL_TEXTURE_COMPRESSED_ARB = 34465;
pub const GL_NV_clip_space_w_scaling = 1;
pub const GL_NV_framebuffer_mixed_samples = 1;
pub const GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING = 34970;
pub const GL_MAX_TEXTURE_LOD_BIAS = 34045;
pub const GL_MULTISAMPLE_BIT = 536870912;
pub const GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB = 34881;
pub const GL_BINORMAL_ARRAY_TYPE_EXT = 33856;
pub const GL_ARB_seamless_cube_map = 1;
pub const GL_COMBINER_AB_DOT_PRODUCT_NV = 34117;
pub const GL_DEPTH_SAMPLES_NV = 37677;
pub const GL_FRAMEBUFFER_UNSUPPORTED_EXT = 36061;
pub const GL_BGR_INTEGER = 36250;
pub const GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX = 33141;
pub const GL_READ_PIXEL_DATA_RANGE_POINTER_NV = 34941;
pub const GL_VIDEO_COLOR_CONVERSION_MAX_NV = 36906;
pub const GL_TEXTURE20_ARB = 34004;
pub const GL_MATRIX4_ARB = 35012;
pub const GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI = 34807;
pub const GL_COLOR_FLOAT_APPLE = 35343;
pub const GL_SURFACE_REGISTERED_NV = 34557;
pub const GL_BOUNDING_BOX_NV = 37005;
pub const GL_SECONDARY_COLOR_ARRAY_LIST_IBM = 103077;
pub const GL_DEPTH_BOUNDS_TEST_EXT = 34960;
pub const GL_PATH_FOG_GEN_MODE_NV = 37036;
pub const GL_POST_COLOR_MATRIX_COLOR_TABLE = 32978;
pub const GL_CLIP_DISTANCE2 = 12290;
pub const GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI = 34805;
pub const GL_FLOAT16_MAT3_AMD = 37318;
pub const GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV = 37703;
pub const GL_COLOR_MATERIAL_PARAMETER = 2902;
pub const GL_FLOAT_MAT3 = 35675;
pub const GL_COLORDODGE_KHR = 37529;
pub const GL_STREAM_DRAW = 35040;
pub const GL_COLOR_ATTACHMENT26 = 36090;
pub const GL_YCRCB_422_SGIX = 33211;
pub const GL_POLYGON_OFFSET_UNITS = 10752;
pub const GL_ISOLINES = 36474;
pub const GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET = 36446;
pub const GL_DRAW_BUFFER12 = 34865;
pub const GL_SAMPLE_BUFFERS_3DFX = 34483;
pub const GL_FONT_GLYPHS_AVAILABLE_NV = 37736;
pub const GL_CURRENT_VERTEX_ATTRIB_ARB = 34342;
pub const GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV = 36918;
pub const GL_PROXY_TEXTURE_COLOR_TABLE_SGI = 32957;
pub const GL_PACK_COMPRESSED_BLOCK_WIDTH = 37163;
pub const GL_PROGRAM_NATIVE_TEMPORARIES_ARB = 34982;
pub const GL_NO_RESET_NOTIFICATION = 33377;
pub const GL_UNSIGNED_INT_SAMPLER_2D_EXT = 36306;
pub const GL_SHADER_CONSISTENT_NV = 34525;
pub const GL_NV_texture_shader3 = 1;
pub const GL_UNSIGNED_INT_10F_11F_11F_REV = 35899;
pub const GL_MAX_DUAL_SOURCE_DRAW_BUFFERS = 35068;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT = 35967;
pub const GL_IDENTITY_NV = 34346;
pub const GL_ARB_get_texture_sub_image = 1;
pub const GL_STATIC_READ_ARB = 35045;
pub const GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB = 36320;
pub const GL_MAP1_VERTEX_ATTRIB4_4_NV = 34404;
pub const GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS = 37099;
pub const GL_POINT_SPRITE_ARB = 34913;
pub const GL_DEBUG_LOGGED_MESSAGES = 37189;
pub const GL_TRUE = 1;
pub const GL_ONE_MINUS_SRC_COLOR = 769;
pub const GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = 36446;
pub const GL_MAX_TEXTURE_BUFFER_SIZE_EXT = 35883;
pub const GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 34764;
pub const GL_UNSIGNED_INT_SAMPLER_1D_EXT = 36305;
pub const GL_ARB_texture_storage = 1;
pub const GL_MAX_FRAGMENT_INPUT_COMPONENTS = 37157;
pub const GL_COMPRESSED_RGBA_ASTC_12x12_KHR = 37821;
pub const GL_EXT_light_texture = 1;
pub const GL_TEXTURE_BLUE_TYPE_ARB = 35858;
pub const GL_SGIX_convolution_accuracy = 1;
pub const GL_TRIANGLES_ADJACENCY = 12;
pub const GL_MESA_packed_depth_stencil = 1;
pub const GL_STENCIL_BACK_WRITEMASK = 36005;
pub const GL_PIXEL_CUBIC_WEIGHT_EXT = 33587;
pub const GL_UNSIGNED_INT_IMAGE_1D_ARRAY = 36968;
pub const GL_CONVOLUTION_FORMAT_EXT = 32791;
pub const GL_APPLE_element_array = 1;
pub const GL_COMPUTE_SUBROUTINE = 37613;
pub const GL_MAX_SHADER_STORAGE_BLOCK_SIZE = 37086;
pub const GL_RGB12_EXT = 32851;
pub const GL_NV_gpu_program5 = 1;
pub const GL_NV_blend_equation_advanced = 1;
pub const GL_PATH_STROKE_WIDTH_NV = 36981;
pub const GL_R1UI_C3F_V3F_SUN = 34246;
pub const GL_MIRROR_CLAMP_TO_EDGE_EXT = 34627;
pub const GL_TEXTURE_BINDING_RECTANGLE_ARB = 34038;
pub const GL_WEIGHT_SUM_UNITY_ARB = 34470;
pub const GL_BIAS_BIT_ATI = 8;
pub const GL_BLEND_DST_RGB = 32968;
pub const GL_VIEWPORT_COMMAND_NV = 16;
pub const GL_RELATIVE_VERTICAL_LINE_TO_NV = 9;
pub const GL_DOUBLE_MAT3x2_EXT = 36683;
pub const GL_ARB_shader_objects = 1;
pub const GL_READ_ONLY_ARB = 35000;
pub const GL_KHR_parallel_shader_compile = 1;
pub const GL_DEBUG_SOURCE_SHADER_COMPILER_ARB = 33352;
pub const GL_VIEWPORT_SWIZZLE_Y_NV = 37721;
pub const GL_NORMAL_ARRAY_LIST_IBM = 103071;
pub const GL_ARB_explicit_uniform_location = 1;
pub const GL_VIDEO_BUFFER_NV = 36896;
pub const GL_TEXTURE_BINDING_BUFFER = 35884;
pub const GL_RG8 = 33323;
pub const GL_C4F_N3F_V3F = 10790;
pub const GL_ARB_map_buffer_alignment = 1;
pub const GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT = 2048;
pub const GL_DEBUG_TYPE_PERFORMANCE_ARB = 33360;
pub const GL_GLYPH_WIDTH_BIT_NV = 1;
pub const GL_FLOAT_MAT3x4 = 35688;
pub const GL_KHR_no_error = 1;
pub const GL_ONE_MINUS_SRC_ALPHA = 771;
pub const GL_COLOR_TABLE_RED_SIZE_SGI = 32986;
pub const GL_OUTPUT_TEXTURE_COORD20_EXT = 34737;
pub const GL_COLOR_TABLE_BLUE_SIZE = 32988;
pub const GL_REGISTER_COMBINERS_NV = 34082;
pub const GL_TEXTURE_LUMINANCE_SIZE = 32864;
pub const GL_SGI_color_matrix = 1;
pub const GL_REPLICATE_BORDER = 33107;
pub const GL_RGB32F = 34837;
pub const GL_HSL_COLOR_NV = 37551;
pub const GL_TEXTURE_TILING_EXT = 38272;
pub const GL_UTF8_NV = 37018;
pub const GL_MAX_DEBUG_MESSAGE_LENGTH_ARB = 37187;
pub const GL_ARB_half_float_vertex = 1;
pub const GL_R16I = 33331;
pub const GL_4PASS_2_EXT = 32934;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT = 36052;
pub const GL_OPERAND2_ALPHA = 34202;
pub const GL_COLOR_ATTACHMENT10_EXT = 36074;
pub const GL_AMD_depth_clamp_separate = 1;
pub const GL_TEXTURE2_ARB = 33986;
pub const GL_TEXTURE7_ARB = 33991;
pub const GL_INT64_VEC2_NV = 36841;
pub const GL_DEPTH_STENCIL_TO_BGRA_NV = 34927;
pub const GL_VERTEX_ARRAY_RANGE_NV = 34077;
pub const GL_DEBUG_CATEGORY_PERFORMANCE_AMD = 37197;
pub const GL_TEXTURE_MAX_LOD_SGIS = 33083;
pub const GL_BLOCK_INDEX = 37629;
pub const GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES = 33530;
pub const GL_INDEX_ARRAY = 32887;
pub const GL_VERTEX_ARRAY_LIST_IBM = 103070;
pub const GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX = 33802;
pub const GL_NV_vertex_program3 = 1;
pub const GL_TRIANGULAR_NV = 37029;
pub const GL_IMAGE_BINDING_LAYER = 36669;
pub const GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV = 34903;
pub const GL_2PASS_1_SGIS = 32931;
pub const GL_EXT_vertex_array = 1;
pub const GL_CLAMP_VERTEX_COLOR_ARB = 35098;
pub const GL_NUM_FILL_STREAMS_NV = 36393;
pub const GL_MAP2_NORMAL = 3506;
pub const GL_COMPRESSED_LUMINANCE = 34026;
pub const GL_LOCATION_INDEX = 37647;
pub const GL_SCALE_BY_FOUR_NV = 34111;
pub const GL_EXT_cull_vertex = 1;
pub const GL_RGBA_FLOAT_MODE_ATI = 34848;
pub const GL_FOG_COORD_ARRAY_POINTER = 33878;
pub const GL_COLOR_ATTACHMENT27 = 36091;
pub const GL_LUMINANCE12_ALPHA4_EXT = 32838;
pub const GL_PROGRAM_NATIVE_ATTRIBS_ARB = 34990;
pub const GL_TEXTURE_INTENSITY_SIZE_EXT = 32865;
pub const GL_EDGEFLAG_BIT_PGI = 262144;
pub const GL_LUMINANCE8_SNORM = 36885;
pub const GL_DRAW_BUFFER11 = 34864;
pub const GL_TEXTURE_COMPRESSED_BLOCK_SIZE = 33459;
pub const GL_CONSERVATIVE_RASTER_MODE_POST_SNAP_NV = 38222;
pub const GL_FENCE_STATUS_NV = 34035;
pub const GL_EDGE_FLAG_ARRAY_LENGTH_NV = 36656;
pub const GL_ALPHA_BITS = 3413;
pub const GL_LOCAL_CONSTANT_EXT = 34755;
pub const GL_IBM_multimode_draw_arrays = 1;
pub const GL_ALPHA_TO_COVERAGE_DITHER_DISABLE_NV = 37711;
pub const GL_MAX_COMPUTE_WORK_GROUP_COUNT = 37310;
pub const GL_OES_byte_coordinates = 1;
pub const GL_FRAGMENT_COLOR_EXT = 33612;
pub const GL_SGIX_polynomial_ffd = 1;
pub const GL_NV_texture_shader2 = 1;
pub const GL_OBJECT_COMPILE_STATUS_ARB = 35713;
pub const GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING = 34973;
pub const GL_ARB_cull_distance = 1;
pub const GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = 37580;
pub const GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV = 36676;
pub const GL_DEBUG_CATEGORY_OTHER_AMD = 37200;
pub const GL_INT64_ARB = 5134;
pub const GL_LOCAL_EXT = 34756;
pub const GL_VERTEX_PROGRAM_POINT_SIZE_NV = 34370;
pub const GL_SAMPLER_1D_SHADOW = 35681;
pub const GL_REG_2_ATI = 35107;
pub const GL_NUM_PROGRAM_BINARY_FORMATS = 34814;
pub const GL_OP_LOG_BASE_2_EXT = 34706;
pub const GL_STORAGE_SHARED_APPLE = 34239;
pub const GL_SCREEN_KHR = 37525;
pub const GL_COLOR_ARRAY_SIZE = 32897;
pub const GL_SKIP_DECODE_EXT = 35402;
pub const GL_PROGRAM = 33506;
pub const GL_2_BYTES = 5127;
pub const GL_SPRITE_AXIAL_SGIX = 33100;
pub const GL_SATURATE_BIT_ATI = 64;
pub const GL_MAP2_VERTEX_ATTRIB1_4_NV = 34417;
pub const GL_FEEDBACK_BUFFER_POINTER = 3568;
pub const GL_EXP = 2048;
pub const GL_COMPRESSED_SRGB_S3TC_DXT1_EXT = 35916;
pub const GL_TEXTURE_BORDER_COLOR = 4100;
pub const GL_FRAGMENT_TEXTURE = 33439;
pub const GL_RELATIVE_ROUNDED_RECT_NV = 233;
pub const GL_DYNAMIC_READ = 35049;
pub const GL_CLIENT_STORAGE_BIT = 512;
pub const GL_NV_gpu_program4 = 1;
pub const GL_FLOAT16_MAT4x3_AMD = 37325;
pub const GL_SYNC_STATUS = 37140;
pub const GL_VIDEO_CAPTURE_FRAME_WIDTH_NV = 36920;
pub const GL_TEXTURE_SWIZZLE_G_EXT = 36419;
pub const GL_PIXEL_MAP_I_TO_B = 3188;
pub const GL_NV_bindless_multi_draw_indirect_count = 1;
pub const GL_UNPACK_CMYK_HINT_EXT = 32783;
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 35968;
pub const GL_TESSELLATION_MODE_AMD = 36868;
pub const GL_PN_TRIANGLES_POINT_MODE_ATI = 34802;
pub const GL_NUM_SPIR_V_EXTENSIONS = 38228;
pub const GL_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR = 38451;
pub const GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = 33497;
pub const GL_LUMINANCE_ALPHA_FLOAT32_APPLE = 34841;
pub const GL_TEXTURE10_ARB = 33994;
pub const GL_TRIANGLE_STRIP_ADJACENCY_EXT = 13;
pub const GL_SHADER_STORAGE_BUFFER_SIZE = 37077;
pub const GL_INTERLACE_OML = 35200;
pub const GL_VARIANT_ARRAY_STRIDE_EXT = 34790;
pub const GL_PROXY_TEXTURE_2D_STACK_MESAX = 34652;
pub const GL_DEVICE_NODE_MASK_EXT = 38298;
pub const GL_CON_8_ATI = 35145;
pub const GL_MAX_TEXTURE_IMAGE_UNITS = 34930;
pub const GL_ALPHA = 6406;
pub const GL_TEXTURE_COMPARE_FAIL_VALUE_ARB = 32959;
pub const GL_UNSIGNED_INT_10_10_10_2 = 32822;
pub const GL_EXT_422_pixels = 1;
pub const GL_MAX_GEOMETRY_UNIFORM_COMPONENTS = 36319;
pub const GL_OUTPUT_FOG_EXT = 34749;
pub const GL_PACK_RESAMPLE_SGIX = 33838;
pub const GL_OFFSET = 37628;
pub const GL_OPERAND0_RGB_EXT = 34192;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR = 37843;
pub const GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS = 37585;
pub const GL_PROGRAM_RESIDENT_NV = 34375;
pub const GL_PROXY_TEXTURE_2D = 32868;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR = 37849;
pub const GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = 36428;
pub const GL_POINT_SIZE_MAX_ARB = 33063;
pub const GL_SAMPLE_LOCATION_SUBPIXEL_BITS_ARB = 37693;
pub const GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV = 33554432;
pub const GL_IMAGE_BUFFER_EXT = 36945;
pub const GL_TEXTURE13_ARB = 33997;
pub const GL_PIXEL_MAP_I_TO_R_SIZE = 3250;
pub const GL_S3_s3tc = 1;
pub const GL_NV_packed_depth_stencil = 1;
pub const GL_FRAGMENT_LIGHT2_SGIX = 33806;
pub const GL_EVAL_VERTEX_ATTRIB10_NV = 34512;
pub const GL_SAMPLER_BINDING = 35097;
pub const GL_DELETE_STATUS = 35712;
pub const GL_EYE_RADIAL_NV = 34139;
pub const GL_FRONT_AND_BACK = 1032;
pub const GL_QUERY_RESOURCE_TEXTURE_NV = 38213;
pub const GL_QUERY_RESULT_NO_WAIT_AMD = 37268;
pub const GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = 33123;
pub const GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI = 32951;
pub const GL_UNSIGNED_INT_10F_11F_11F_REV_EXT = 35899;
pub const GL_GLOBAL_ALPHA_FACTOR_SUN = 33242;
pub const GL_DEBUG_TYPE_ERROR_ARB = 33356;
pub const GL_RGBA8 = 32856;
pub const GL_PRESENT_TIME_NV = 36394;
pub const GL_DOT_PRODUCT_TEXTURE_1D_NV = 34908;
pub const GL_PASS_THROUGH_NV = 34534;
pub const GL_MATRIX_EXT = 34752;
pub const GL_FRAMEBUFFER_DEFAULT_LAYERS = 37650;
pub const GL_SIGNED_IDENTITY_NV = 34108;
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 35396;
pub const GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 33300;
pub const GL_FILL_RECTANGLE_NV = 37692;
pub const GL_ACCUM_CLEAR_VALUE = 2944;
pub const GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD = 37198;
pub const GL_SECONDARY_COLOR_ARRAY_SIZE = 33882;
pub const GL_INT_SAMPLER_CUBE = 36300;
pub const GL_NV_vertex_program2 = 1;
pub const GL_IMAGE_CLASS_1_X_16 = 33470;
pub const GL_ARB_multitexture = 1;
pub const GL_COLOR_SUM_ARB = 33880;
pub const GL_ABGR_EXT = 32768;
pub const GL_VERTEX_STREAM3_ATI = 34671;
pub const GL_UNSIGNED_NORMALIZED_ARB = 35863;
pub const GL_OP_EXP_BASE_2_EXT = 34705;
pub const GL_EYE_LINE_SGIS = 33270;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR = 37853;
pub const GL_IMAGE_2D_EXT = 36941;
pub const GL_FRAMEBUFFER_DEFAULT = 33304;
pub const GL_ATI_texture_float = 1;
pub const GL_KHR_texture_compression_astc_hdr = 1;
pub const GL_VIEWPORT_SWIZZLE_POSITIVE_Z_NV = 37716;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR = 37844;
pub const GL_MAX_TEXTURE_STACK_DEPTH = 3385;
pub const GL_COLOR_ATTACHMENT28 = 36092;
pub const GL_COLOR_ARRAY_BUFFER_BINDING = 34968;
pub const GL_AUTO_GENERATE_MIPMAP = 33429;
pub const GL_PROGRAM_INSTRUCTIONS_ARB = 34976;
pub const GL_CURRENT_VERTEX_WEIGHT_EXT = 34059;
pub const GL_CONTEXT_PROFILE_MASK = 37158;
pub const GL_QUAD_TEXTURE_SELECT_SGIS = 33061;
pub const GL_ACTIVE_TEXTURE_ARB = 34016;
pub const GL_DRAW_BUFFER10 = 34863;
pub const GL_SKIP_COMPONENTS2_NV = -5;
pub const GL_POST_CONVOLUTION_BLUE_BIAS_EXT = 32802;
pub const GL_MAX_IMAGE_SAMPLES_EXT = 36973;
pub const GL_BGR = 32992;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB = 34073;
pub const GL_EXT_histogram = 1;
pub const GL_QUADS = 7;
pub const GL_SHADOW_AMBIENT_SGIX = 32959;
pub const GL_REG_0_ATI = 35105;
pub const GL_NV_vertex_array_range = 1;
pub const GL_EDGE_FLAG_ARRAY_POINTER = 32915;
pub const GL_PROGRAM_SEPARABLE = 33368;
pub const GL_EXT_shadow_funcs = 1;
pub const GL_HORIZONTAL_LINE_TO_NV = 6;
pub const GL_COMPRESSED_SRGB8_ETC2 = 37493;
pub const GL_COPY_WRITE_BUFFER = 36663;
pub const GL_MATRIX1_NV = 34353;
pub const GL_EDGE_FLAG_ARRAY_COUNT_EXT = 32909;
pub const GL_EVAL_VERTEX_ATTRIB6_NV = 34508;
pub const GL_COLOR_ARRAY_STRIDE = 32899;
pub const GL_RGB565 = 36194;
pub const GL_ATI_text_fragment_shader = 1;
pub const GL_UNSIGNED_INT_SAMPLER_CUBE_EXT = 36308;
pub const GL_REG_18_ATI = 35123;
pub const GL_SRGB_ALPHA_EXT = 35906;
pub const GL_INT_IMAGE_2D = 36952;
pub const GL_INT_SAMPLER_2D_ARRAY_EXT = 36303;
pub const GL_PHONG_HINT_WIN = 33003;
pub const GL_SRGB_DECODE_ARB = 33433;
pub const GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB = 35722;
pub const GL_PIXEL_UNPACK_BUFFER_EXT = 35052;
pub const GL_COMBINE_ARB = 34160;
pub const GL_UNSIGNED_INT_8_8_8_8_REV = 33639;
pub const GL_COLOR_MATRIX_SGI = 32945;
pub const GL_ARB_texture_query_levels = 1;
pub const GL_TEXTURE_INTENSITY_TYPE_ARB = 35861;
pub const GL_RENDER_MODE = 3136;
pub const GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB = 35881;
pub const GL_IMAGE_CUBE_MAP_ARRAY_EXT = 36948;
pub const GL_SOURCE1_ALPHA_EXT = 34185;
pub const GL_ARB_draw_buffers_blend = 1;
pub const GL_INTERNALFORMAT_RED_SIZE = 33393;
pub const GL_USE_MISSING_GLYPH_NV = 37034;
pub const GL_COLOR_ATTACHMENT14_EXT = 36078;
pub const GL_SEPARATE_SPECULAR_COLOR_EXT = 33274;
pub const GL_EXT_win32_keyed_mutex = 1;
pub const GL_ARB_framebuffer_no_attachments = 1;
pub const GL_QUERY_WAIT = 36371;
pub const GL_SAMPLE_BUFFERS_SGIS = 32936;
pub const GL_FLOAT16_VEC4_NV = 36859;
pub const GL_TEXTURE_COMPRESSED_IMAGE_SIZE = 34464;
pub const GL_PIXEL_UNPACK_BUFFER_BINDING_ARB = 35055;
pub const GL_CONSERVATIVE_RASTER_DILATE_RANGE_NV = 37754;
pub const GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB = 37701;
pub const GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = 35380;
pub const GL_FLOAT16_MAT2_AMD = 37317;
pub const GL_VIRTUAL_PAGE_SIZE_Z_AMD = 37271;
pub const GL_ALWAYS = 519;
pub const GL_ARB_gpu_shader5 = 1;
pub const GL_DEPTH24_STENCIL8_EXT = 35056;
pub const GL_COLOR_TABLE_INTENSITY_SIZE_SGI = 32991;
pub const GL_VARIABLE_C_NV = 34085;
pub const GL_LINEAR = 9729;
pub const GL_BGR_INTEGER_EXT = 36250;
pub const GL_TEXTURE_BLUE_SIZE_EXT = 32862;
pub const GL_ELEMENT_ARRAY_ADDRESS_NV = 36649;
pub const GL_TEXTURE_SWIZZLE_A_EXT = 36421;
pub const GL_DEPTH_TEXTURE_MODE_ARB = 34891;
pub const GL_DEBUG_SEVERITY_LOW_AMD = 37192;
pub const GL_TEXTURE_COMPRESSION_HINT_ARB = 34031;
pub const GL_CONTEXT_CORE_PROFILE_BIT = 1;
pub const GL_IMAGE_BINDING_LAYER_EXT = 36669;
pub const GL_SGIX_texture_add_env = 1;
pub const GL_QUAD_INTENSITY8_SGIS = 33059;
pub const GL_NUM_INSTRUCTIONS_PER_PASS_ATI = 35185;
pub const GL_ONE_MINUS_CONSTANT_ALPHA = 32772;
pub const GL_DUAL_TEXTURE_SELECT_SGIS = 33060;
pub const GL_MAX_UNIFORM_BLOCK_SIZE = 35376;
pub const GL_NV_viewport_array2 = 1;
pub const GL_R8 = 33321;
pub const GL_PATH_JOIN_STYLE_NV = 36985;
pub const GL_KHR_texture_compression_astc_sliced_3d = 1;
pub const GL_IMAGE_SCALE_Y_HP = 33110;
pub const GL_PIXEL_TILE_HEIGHT_SGIX = 33089;
pub const GL_T2F_IUI_N3F_V2F_EXT = 33203;
pub const GL_TEXTURE_COORD_ARRAY_TYPE_EXT = 32905;
pub const GL_MAX_NUM_ACTIVE_VARIABLES = 37623;
pub const GL_NV_internalformat_sample_query = 1;
pub const GL_PATH_FORMAT_PS_NV = 36977;
pub const GL_SMOOTH_CUBIC_CURVE_TO_NV = 16;
pub const GL_CONSTANT = 34166;
pub const GL_WRITE_PIXEL_DATA_RANGE_NV = 34936;
pub const GL_FRAMEBUFFER_SRGB_CAPABLE_EXT = 36282;
pub const GL_MATRIX_INDEX_ARRAY_POINTER_ARB = 34889;
pub const GL_NEGATIVE_ONE_TO_ONE = 37726;
pub const GL_ALL_SHADER_BITS = 4294967295;
pub const GL_ARB_copy_image = 1;
pub const GL_VERTEX_ATTRIB_ARRAY15_NV = 34399;
pub const GL_SINGLE_COLOR_EXT = 33273;
pub const GL_INTENSITY = 32841;
pub const GL_CULL_VERTEX_OBJECT_POSITION_EXT = 33196;
pub const GL_REG_14_ATI = 35119;
pub const GL_IMAGE_2D_MULTISAMPLE = 36949;
pub const GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 33302;
pub const GL_MODELVIEW1_MATRIX_EXT = 34054;
pub const GL_TEXTURE_SWIZZLE_RGBA_EXT = 36422;
pub const GL_VALIDATE_STATUS = 35715;
pub const GL_REFERENCED_BY_GEOMETRY_SHADER = 37641;
pub const GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT = 36309;
pub const GL_FONT_Y_MAX_BOUNDS_BIT_NV = 524288;
pub const GL_NV_texture_expand_normal = 1;
pub const GL_PROGRAM_OUTPUT = 37604;
pub const GL_LUMINANCE16_EXT = 32834;
pub const GL_MAX_TEXTURE_BUFFER_SIZE_ARB = 35883;
pub const GL_COLOR_ATTACHMENT29 = 36093;
pub const GL_STENCIL_ATTACHMENT_EXT = 36128;
pub const GL_DRAW_BUFFER15_ATI = 34868;
pub const GL_RENDERBUFFER_STENCIL_SIZE = 36181;
pub const GL_ARB_gpu_shader_fp64 = 1;
pub const GL_DEBUG_SOURCE_APPLICATION = 33354;
pub const GL_UNIFORM_SIZE = 35384;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 34070;
pub const GL_MATRIX5_ARB = 35013;
pub const GL_VIEWPORT_BIT = 2048;
pub const GL_UNSIGNED_SHORT = 5123;
pub const GL_OFFSET_TEXTURE_2D_SCALE_NV = 34530;
pub const GL_PROGRAM_PIPELINE = 33508;
pub const GL_MAX_PROGRAM_TEXEL_OFFSET = 35077;
pub const GL_SGIS_detail_texture = 1;
pub const GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = 37596;
pub const GL_CND0_ATI = 35179;
pub const GL_SCISSOR_BOX = 3088;
pub const GL_PERFQUERY_FLUSH_INTEL = 33786;
pub const GL_RGBA32I = 36226;
pub const GL_INT64_VEC2_ARB = 36841;
pub const GL_SGIX_async_pixel = 1;
pub const GL_OBJECT_ATTACHED_OBJECTS_ARB = 35717;
pub const GL_T2F_C3F_V3F = 10794;
pub const GL_GREMEDY_frame_terminator = 1;
pub const GL_MAX_TEXTURE_MAX_ANISOTROPY = 34047;
pub const GL_TRANSFORM_FEEDBACK_BUFFER = 35982;
pub const GL_BLEND_EQUATION = 32777;
pub const GL_COMBINER2_NV = 34130;
pub const GL_TEXTURE_BASE_LEVEL_SGIS = 33084;
pub const GL_EXT_point_parameters = 1;
pub const GL_RELATIVE_ROUNDED_RECT8_NV = 239;
pub const GL_OFFSET_TEXTURE_2D_MATRIX_NV = 34529;
pub const GL_NEGATIVE_X_EXT = 34777;
pub const GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE = 34224;
pub const GL_INT64_NV = 5134;
pub const GL_PIXEL_BUFFER_BARRIER_BIT_EXT = 128;
pub const GL_LUMINANCE16I_EXT = 36236;
pub const GL_VERTEX_ATTRIB_ARRAY1_NV = 34385;
pub const GL_SLICE_ACCUM_SUN = 34252;
pub const GL_LINE_RESET_TOKEN = 1799;
pub const GL_INTERLACE_SGIX = 32916;
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER = 37578;
pub const GL_TRANSPOSE_TEXTURE_MATRIX = 34021;
pub const GL_BLACKHOLE_RENDER_INTEL = 33788;
pub const GL_MAX_GEOMETRY_IMAGE_UNIFORMS = 37069;
pub const GL_PERFQUERY_DONOT_FLUSH_INTEL = 33785;
pub const GL_MAX_DEBUG_GROUP_STACK_DEPTH = 33388;
pub const GL_REPLICATE_BORDER_HP = 33107;
pub const GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = 36447;
pub const GL_MAX_VERTEX_STREAMS = 36465;
pub const GL_MAX_PROGRAM_LOOP_COUNT_NV = 35064;
pub const GL_PACK_ALIGNMENT = 3333;
pub const GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE = 32981;
pub const GL_SOURCE1_ALPHA = 34185;
pub const GL_IMAGE_ROTATE_ORIGIN_Y_HP = 33115;
pub const GL_PLUS_NV = 37521;
pub const GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV = 36447;
pub const GL_FRAMEBUFFER_DEFAULT_SAMPLES = 37651;
pub const GL_PALETTE4_R5_G6_B5_OES = 35730;
pub const GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV = 34573;
pub const GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS = 37308;
pub const GL_DEPTH_COMPONENT32F = 36012;
pub const GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI = 34808;
pub const GL_MAT_SHININESS_BIT_PGI = 33554432;
pub const GL_DETAIL_TEXTURE_LEVEL_SGIS = 32922;
pub const GL_DST_NV = 37511;
pub const GL_VERSION_4_3 = 1;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_MODE = 35967;
pub const GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB = 35719;
pub const GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT = 33884;
pub const GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL = 38136;
pub const GL_PALETTE8_RGBA8_OES = 35734;
pub const GL_NV_depth_buffer_float = 1;
pub const GL_ATTRIB_ARRAY_TYPE_NV = 34341;
pub const GL_SUCCESS_NV = 36911;
pub const GL_VERTEX_PROGRAM_POINT_SIZE_ARB = 34370;
pub const GL_DOUBLE = 5130;
pub const GL_FOG_COORD = 33873;
pub const GL_OP_INDEX_EXT = 34690;
pub const GL_QUERY_RESOURCE_BUFFEROBJECT_NV = 38215;
pub const GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT = 35069;
pub const GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV = 37054;
pub const GL_ACTIVE_ATOMIC_COUNTER_BUFFERS = 37593;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT = 34074;
pub const GL_EXT_texture_sRGB_decode = 1;
pub const GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV = 34898;
pub const GL_IMAGE_COMPATIBILITY_CLASS = 33448;
pub const GL_RGB2_EXT = 32846;
pub const GL_UNSIGNED_INT64_VEC2_ARB = 36853;
pub const GL_MAGNITUDE_SCALE_NV = 34578;
pub const GL_TEXTURE_VIEW_MIN_LEVEL = 33499;
pub const GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT = 36317;
pub const GL_LUMINANCE8I_EXT = 36242;
pub const GL_EXT_raster_multisample = 1;
pub const GL_SGIX_ycrcb_subsample = 1;
pub const GL_SIGNED_NORMALIZED = 36764;
pub const GL_VIEWPORT_SWIZZLE_POSITIVE_X_NV = 37712;
pub const GL_INTEL_conservative_rasterization = 1;
pub const GL_AMD_debug_output = 1;
pub const GL_NV_vertex_program4 = 1;
pub const GL_OCCLUSION_TEST_HP = 33125;
pub const GL_VERTEX_ATTRIB_ARRAY_DIVISOR = 35070;
pub const GL_LUMINANCE16F_ARB = 34846;
pub const GL_RESET_NOTIFICATION_STRATEGY = 33366;
pub const GL_FRAMEBUFFER_SRGB = 36281;
pub const GL_FIXED = 5132;
pub const GL_ARB_vertex_shader = 1;
pub const GL_POINT_SIZE = 2833;
pub const GL_INTERNALFORMAT_BLUE_TYPE = 33402;
pub const GL_RENDERBUFFER_FREE_MEMORY_ATI = 34813;
pub const GL_EFFECTIVE_RASTER_SAMPLES_EXT = 37676;
pub const GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = 36486;
pub const GL_LUMINANCE8_ALPHA8_EXT = 32837;
pub const GL_TRIANGLE_STRIP = 5;
pub const GL_SAMPLE_ALPHA_TO_COVERAGE_ARB = 32926;
pub const GL_COLOR_TABLE_WIDTH = 32985;
pub const GL_ARB_cl_event = 1;
pub const GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV = 16;
pub const GL_TEXTURE_COORD_ARRAY_LIST_IBM = 103074;
pub const GL_SCALAR_EXT = 34750;
pub const GL_OBJECT_LINK_STATUS_ARB = 35714;
pub const GL_MULTISAMPLE_COVERAGE_MODES_NV = 36370;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE = 37708;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072;
pub const GL_COPY_READ_BUFFER_BINDING = 36662;
pub const GL_PROXY_COLOR_TABLE_SGI = 32979;
pub const GL_PATH_PROJECTION_STACK_DEPTH_NV = 2980;
pub const GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB = 33357;
pub const GL_PLUS_CLAMPED_NV = 37553;
pub const GL_LAYOUT_LINEAR_CPU_CACHED_INTEL = 2;
pub const GL_PROGRAM_BINARY_LENGTH = 34625;
pub const GL_LAYOUT_COLOR_ATTACHMENT_EXT = 38286;
pub const GL_ARB_shadow_ambient = 1;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR = 37842;
pub const GL_ATOMIC_COUNTER_BUFFER_BINDING = 37569;
pub const GL_DEBUG_SOURCE_APPLICATION_ARB = 33354;
pub const GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH = 36425;
pub const GL_PROXY_TEXTURE_1D_ARRAY_EXT = 35865;
pub const GL_POST_COLOR_MATRIX_ALPHA_SCALE = 32951;
pub const GL_VERTEX_TEXTURE = 33435;
pub const GL_MAP1_VERTEX_ATTRIB8_4_NV = 34408;
pub const GL_NV_video_capture = 1;
pub const GL_ARB_shader_stencil_export = 1;
pub const GL_EXT_texture_array = 1;
pub const GL_FOG_COORDINATE_ARRAY_STRIDE_EXT = 33877;
pub const GL_COLOR_ATTACHMENT31 = 36095;
pub const GL_BUFFER_GPU_ADDRESS_NV = 36637;
pub const GL_EXT_separate_shader_objects = 1;
pub const GL_BUFFER_ACCESS_ARB = 35003;
pub const GL_TEXTURE_VIEW_NUM_LEVELS = 33500;
pub const GL_CLAMP_TO_BORDER = 33069;
pub const GL_MAX_PROGRAM_TEMPORARIES_ARB = 34981;
pub const GL_ALPHA16I_EXT = 36234;
pub const GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB = 33522;
pub const GL_UNSIGNED_INT16_VEC2_NV = 36849;
pub const GL_MEDIUM_FLOAT = 36337;
pub const GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB = 34975;
pub const GL_FOG_COORDINATE_ARRAY_POINTER = 33878;
pub const GL_COLOR_ARRAY_EXT = 32886;
pub const GL_MESA_pack_invert = 1;
pub const GL_PROGRAM_RESULT_COMPONENTS_NV = 35079;
pub const GL_VERTEX_ID_SWIZZLE_AMD = 37285;
pub const GL_NV_parameter_buffer_object = 1;
pub const GL_SHININESS = 5633;
pub const GL_VERTEX_ATTRIB_ARRAY6_NV = 34390;
pub const GL_DST_IN_NV = 37515;
pub const GL_OP_RECIP_SQRT_EXT = 34709;
pub const GL_COLOR_INDEXES = 5635;
pub const GL_COMBINER4_NV = 34132;
pub const GL_POLYGON_OFFSET_LINE = 10754;
pub const GL_EXT_blend_func_separate = 1;
pub const GL_MAP2_BINORMAL_EXT = 33863;
pub const GL_UNPACK_LSB_FIRST = 3313;
pub const GL_EXT_texture_lod_bias = 1;
pub const GL_MATRIX8_ARB = 35016;
pub const GL_PIXEL_MAP_I_TO_G = 3187;
pub const GL_ARB_base_instance = 1;
pub const GL_EDGE_FLAG_ARRAY_LIST_IBM = 103075;
pub const GL_TEXTURE_BASE_LEVEL = 33084;
pub const GL_UNSIGNED_INT_SAMPLER_BUFFER = 36312;
pub const GL_VERTEX_ARRAY_TYPE = 32891;
pub const GL_TESS_GEN_POINT_MODE = 36473;
pub const GL_GENERATE_MIPMAP_SGIS = 33169;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB = 34072;
pub const GL_BITMAP = 6656;
pub const GL_COMPRESSED_RGBA_FXT1_3DFX = 34481;
pub const GL_CURRENT_MATRIX_STACK_DEPTH_ARB = 34368;
pub const GL_PROXY_TEXTURE_1D_EXT = 32867;
pub const GL_PATH_TERMINAL_DASH_CAP_NV = 36989;
pub const GL_POINT_DISTANCE_ATTENUATION = 33065;
pub const GL_NV_blend_square = 1;
pub const GL_MAX_SAMPLE_MASK_WORDS = 36441;
pub const GL_COMPRESSED_RGBA_ARB = 34030;
pub const GL_VERTEX_STREAM0_ATI = 34668;
pub const GL_INTERNALFORMAT_DEPTH_SIZE = 33397;
pub const GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE = 35332;
pub const GL_SYNC_X11_FENCE_EXT = 37089;
pub const GL_AMD_gcn_shader = 1;
pub const GL_MAX_VARYING_FLOATS = 35659;
pub const GL_PROTECTED_MEMORY_OBJECT_EXT = 38299;
pub const GL_UNSIGNED_SHORT_5_5_5_1 = 32820;
pub const GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = 36382;
pub const GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI = 34818;
pub const GL_MAX_DEFORMATION_ORDER_SGIX = 33175;
pub const GL_QUAD_STRIP = 8;
pub const GL_FRAGMENT_SUBROUTINE_UNIFORM = 37618;
pub const GL_MAX_PROGRAM_CALL_DEPTH_NV = 35061;
pub const GL_VERTEX_SHADER_INSTRUCTIONS_EXT = 34767;
pub const GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = 37127;
pub const GL_CONSTANT_BORDER = 33105;
pub const GL_SPOT_CUTOFF = 4614;
pub const GL_VERSION_4_2 = 1;
pub const GL_MODELVIEW4_ARB = 34596;
pub const GL_INDEX_ARRAY_COUNT_EXT = 32903;
pub const GL_RGBA_INTEGER_EXT = 36249;
pub const GL_INDEX_MATERIAL_FACE_EXT = 33210;
pub const GL_SAMPLER_2D_SHADOW_ARB = 35682;
pub const GL_COLOR_ATTACHMENT11_EXT = 36075;
pub const GL_SRC_COLOR = 768;
pub const GL_TEXTURE_BLUE_SIZE = 32862;
pub const GL_SGIX_ycrcba = 1;
pub const GL_ACTIVE_ATTRIBUTES = 35721;
pub const GL_SECONDARY_COLOR_ARRAY_SIZE_EXT = 33882;
pub const GL_FALSE = 0;
pub const GL_TRANSPOSE_AFFINE_3D_NV = 37016;
pub const GL_INFO_LOG_LENGTH = 35716;
pub const GL_BLEND_COLOR = 32773;
pub const GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 34826;
pub const GL_MAT_SPECULAR_BIT_PGI = 67108864;
pub const GL_CLAMP_READ_COLOR = 35100;
pub const GL_COLOR_ARRAY_ADDRESS_NV = 36643;
pub const GL_INDEX_ARRAY_LENGTH_NV = 36654;
pub const GL_MAP2_COLOR_4 = 3504;
pub const GL_TESS_CONTROL_SUBROUTINE_UNIFORM = 37615;
pub const GL_BLEND_EQUATION_RGB = 32777;
pub const GL_DOT_PRODUCT_TEXTURE_3D_NV = 34543;
pub const GL_DISTANCE_ATTENUATION_SGIS = 33065;
pub const GL_ACTIVE_UNIFORM_MAX_LENGTH = 35719;
pub const GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS = 37085;
pub const GL_IMAGE_MIN_FILTER_HP = 33117;
pub const GL_PACK_COMPRESSED_BLOCK_SIZE = 37166;
pub const GL_UNCORRELATED_NV = 37506;
pub const GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV = 34382;
pub const GL_STENCIL_SAMPLES_NV = 37678;
pub const GL_TRANSLATE_3D_NV = 37009;
pub const GL_FLOAT_MAT4 = 35676;
pub const GL_TEXTURE_FILTER4_SIZE_SGIS = 33095;
pub const GL_EXT_semaphore = 1;
pub const GLAPIENTRYP = [*c]GLAPIENTRY;
pub const GL_SEPARATE_ATTRIBS_EXT = 35981;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074;
pub const GL_STENCIL_INDEX4_EXT = 36167;
pub const GL_TEXTURE_BUFFER_OFFSET = 37277;
pub const GL_ARB_robust_buffer_access_behavior = 1;
pub const GL_MODELVIEW31_ARB = 34623;
pub const GL_MAX_UNIFORM_BUFFER_BINDINGS = 35375;
pub const GL_MULTISAMPLE_EXT = 32925;
pub const GL_FRAGMENT_COVERAGE_TO_COLOR_NV = 37597;
pub const GL_COMBINE_ALPHA_ARB = 34162;
pub const GL_FRAGMENT_LIGHT3_SGIX = 33807;
pub const GL_RGBA16_SNORM = 36763;
pub const GL_HISTOGRAM_RED_SIZE_EXT = 32808;
pub const GL_COLOR_ATTACHMENT30 = 36094;
pub const GL_CUBIC_CURVE_TO_NV = 12;
pub const GL_NORMAL_ARRAY_STRIDE_EXT = 32895;
pub const GL_FOG_COORD_ARRAY_BUFFER_BINDING = 34973;
pub const GL_SECONDARY_COLOR_ARRAY_POINTER_EXT = 33885;
pub const GL_DYNAMIC_STORAGE_BIT = 256;
pub const GL_COLOR_INDEX16_EXT = 32999;
pub const GL_COMPILE_STATUS = 35713;
pub const GL_NORMAL_ARRAY_LIST_STRIDE_IBM = 103081;
pub const GL_PROGRAM_ADDRESS_REGISTERS_ARB = 34992;
pub const GL_OUTPUT_TEXTURE_COORD30_EXT = 34747;
pub const GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV = 35978;
pub const GL_FOG_COLOR = 2918;
pub const GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV = 36901;
pub const GL_DEPTH24_STENCIL8 = 35056;
pub const GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER = 36060;
pub const GL_MAX_NUM_COMPATIBLE_SUBROUTINES = 37624;
pub const GL_LGPU_SEPARATE_STORAGE_BIT_NVX = 2048;
pub const GL_INT64_VEC4_NV = 36843;
pub const GL_MAX_PROGRAM_PARAMETERS_ARB = 34985;
pub const GL_CONVOLUTION_FILTER_SCALE = 32788;
pub const GL_ARB_vertex_blend = 1;
pub const GL_PROGRAM_INPUT = 37603;
pub const GL_KHR_texture_compression_astc_ldr = 1;
pub const GL_SHADER_IMAGE_STORE = 33445;
pub const GL_CLAMP_TO_EDGE_SGIS = 33071;
pub const GL_TEXTURE_DEPTH_SIZE = 34890;
pub const GL_VERTEX_BINDING_DIVISOR = 33494;
pub const GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS = 36490;
pub const GL_TEXTURE19_ARB = 34003;
pub const GL_ARB_compute_variable_group_size = 1;
pub const GL_BUMP_NUM_TEX_UNITS_ATI = 34679;
pub const GL_REDUCE_EXT = 32790;
pub const GL_MAX_RATIONAL_EVAL_ORDER_NV = 34519;
pub const GL_PIXEL_PACK_BUFFER_BINDING_EXT = 35053;
pub const GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV = 36440;
pub const GL_STREAM_RASTERIZATION_AMD = 37280;
pub const GL_PROXY_TEXTURE_1D_STACK_MESAX = 34651;
pub const GL_VERTEX_ARRAY_OBJECT_AMD = 37204;
pub const GL_ARB_texture_rg = 1;
pub const GL_MAX_LAYERS = 33409;
pub const GL_SOURCE2_ALPHA = 34186;
pub const GL_ALPHA16UI_EXT = 36216;
pub const GL_RGBA_FLOAT32_APPLE = 34836;
pub const GL_GREEN_SCALE = 3352;
pub const GL_MAX_ARRAY_TEXTURE_LAYERS = 35071;
pub const GL_INDEX_ARRAY_LIST_STRIDE_IBM = 103083;
pub const GL_TEXTURE_TOO_LARGE_EXT = 32869;
pub const GL_TEXTURE_RENDERBUFFER_NV = 36437;
pub const GL_R1UI_C4UB_V3F_SUN = 34245;
pub const GL_IUI_N3F_V2F_EXT = 33199;
pub const GL_INTENSITY16F_ARB = 34845;
pub const GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB = 34965;
pub const GL_ATTRIB_ARRAY_STRIDE_NV = 34340;
pub const GL_EXT_texture_compression_rgtc = 1;
pub const GL_HANDLE_TYPE_D3D11_IMAGE_KMT_EXT = 38284;
pub const GL_MAX_PROGRAM_OUTPUT_VERTICES_NV = 35879;
pub const GL_UNSIGNED_INT8_VEC3_NV = 36846;
pub const GL_RENDERBUFFER_EXT = 36161;
pub const GL_PREVIOUS = 34168;
pub const GL_BOOL_ARB = 35670;
pub const GL_INTERNALFORMAT_ALPHA_TYPE = 33403;
pub const GL_RGB8 = 32849;
pub const GL_OPERAND2_RGB_EXT = 34194;
pub const GL_UNSIGNED_SHORT_8_8_REV_MESA = 34235;
pub const GL_PATH_COMPUTED_LENGTH_NV = 37024;
pub const GL_HILO8_NV = 34910;
pub const GL_ALPHA_MIN_SGIX = 33568;
pub const GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT = 36321;
pub const GL_UNPACK_COMPRESSED_BLOCK_WIDTH = 37159;
pub const GL_R11F_G11F_B10F = 35898;
pub const GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR = 33358;
pub const GL_BUFFER_FLUSHING_UNMAP_APPLE = 35347;
pub const GL_ASYNC_HISTOGRAM_SGIX = 33580;
pub const GL_MIN_PROGRAM_TEXEL_OFFSET = 35076;
pub const GL_BLEND_DST_ALPHA_EXT = 32970;
pub const GL_VERSION_4_1 = 1;
pub const GL_CLAMP_READ_COLOR_ARB = 35100;
pub const GL_SLUMINANCE8_ALPHA8 = 35909;
pub const GL_COMPRESSED_RED_RGTC1 = 36283;
pub const GL_2X_BIT_ATI = 1;
pub const GL_LINE_STIPPLE_REPEAT = 2854;
pub const GL_DEPTH_STENCIL = 34041;
pub const GL_ZOOM_Y = 3351;
pub const GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV = 35880;
pub const GL_LINE_STIPPLE_PATTERN = 2853;
pub const GL_COMBINER_INPUT_NV = 34114;
pub const GL_TRANSFORM_FEEDBACK_BINDING = 36389;
pub const GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB = 36319;
pub const GL_DISPATCH_INDIRECT_BUFFER = 37102;
pub const GL_FOG_DENSITY = 2914;
pub const GL_INT_IMAGE_3D = 36953;
pub const GL_UNSIGNED_SHORT_4_4_4_4_EXT = 32819;
pub const GL_LUMINANCE32I_EXT = 36230;
pub const GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT = 36494;
pub const GL_LINK_STATUS = 35714;
pub const GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE = 35335;
pub const GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL = 33783;
pub const GL_WRITE_ONLY_ARB = 35001;
pub const GL_SAMPLE_COVERAGE_VALUE = 32938;
pub const GL_MAX_DEBUG_LOGGED_MESSAGES_AMD = 37188;
pub const GL_VERTEX_STREAM6_ATI = 34674;
pub const GL_ALPHA_FLOAT16_APPLE = 34844;
pub const GL_IMAGE_BINDING_LEVEL = 36667;
pub const GL_CMYK_EXT = 32780;
pub const GL_TEXTURE_LUMINANCE_TYPE = 35860;
pub const GL_ARB_clip_control = 1;
pub const GL_INTERLEAVED_ATTRIBS_NV = 35980;
pub const GL_SGIX_tag_sample_buffer = 1;
pub const GL_ALPHA_TEST = 3008;
pub const GL_DEBUG_SEVERITY_LOW_ARB = 37192;
pub const GL_LINE_STRIP = 3;
pub const GL_BLUE_NV = 6405;
pub const GL_LINE_STRIP_ADJACENCY_ARB = 11;
pub const GL_AMD_framebuffer_multisample_advanced = 1;
pub const GL_OML_subsample = 1;
pub const GL_TOP_LEVEL_ARRAY_SIZE = 37644;
pub const GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI = 32954;
pub const GL_EXT_framebuffer_blit = 1;
pub const GL_FRONT_FACE_COMMAND_NV = 18;
pub const GL_ARB_instanced_arrays = 1;
pub const GL_VERSION_3_0 = 1;
pub const GL_SECONDARY_COLOR_ARRAY_TYPE_EXT = 33883;
pub const GL_SAMPLE_COVERAGE_INVERT_ARB = 32939;
pub const GL_V2F = 10784;
pub const GL_MIRROR_CLAMP_TO_BORDER_EXT = 35090;
pub const GL_BOOL_VEC2 = 35671;
pub const GL_REG_27_ATI = 35132;
pub const GL_MODELVIEW29_ARB = 34621;
pub const GL_MAX_PROGRAM_GENERIC_RESULTS_NV = 36262;
pub const GL_PROGRAM_OBJECT_EXT = 35648;
pub const GL_TEXTURE11_ARB = 33995;
pub const GL_TEXTURE_COORD_ARRAY_STRIDE_EXT = 32906;
pub const GL_VERTEX_ATTRIB_ARRAY3_NV = 34387;
pub const GL_LINE_SMOOTH = 2848;
pub const GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM = 103087;
pub const GL_EXT_texture_filter_minmax = 1;
pub const GL_PIXEL_COUNTER_BITS_NV = 34916;
pub const GL_GLYPH_HEIGHT_BIT_NV = 2;
pub const GL_COMPRESSED_TEXTURE_FORMATS = 34467;
pub const GL_VERTEX_ARRAY_RANGE_POINTER_NV = 34081;
pub const GL_FIXED_ONLY_ARB = 35101;
pub const GL_SCALED_RESOLVE_NICEST_EXT = 37051;
pub const GL_FRAGMENT_LIGHT4_SGIX = 33808;
pub const GL_VENDOR = 7936;
pub const GL_Z_EXT = 34775;
pub const GL_TEXTURE_HEIGHT = 4097;
pub const GL_IMAGE_MAG_FILTER_HP = 33116;
pub const GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV = 36640;
pub const GL_COMPRESSED_RGB8_ETC2 = 37492;
pub const GL_COMPRESSED_RGB_ARB = 34029;
pub const GL_KHR_blend_equation_advanced_coherent = 1;
pub const GL_COLOR_ATTACHMENT15_EXT = 36079;
pub const GL_ALPHA16F_ARB = 34844;
pub const GL_COLOR_SUM_EXT = 33880;
pub const GL_AMD_vertex_shader_layer = 1;
pub const GL_EXT_index_array_formats = 1;
pub const GL_ROUNDED_RECT4_NV = 236;
pub const GL_COLOR_ATTACHMENT19 = 36083;
pub const GL_TEXTURE_COMPARE_FUNC_ARB = 34893;
pub const GL_OUTPUT_TEXTURE_COORD9_EXT = 34726;
pub const GL_PROGRAM_NATIVE_PARAMETERS_ARB = 34986;
pub const GL_PRIMITIVES_SUBMITTED_ARB = 33519;
pub const GL_DEFORMATIONS_MASK_SGIX = 33174;
pub const GL_MAX_FRAMEBUFFER_SAMPLES = 37656;
pub const GL_INTENSITY32UI_EXT = 36211;
pub const GL_PIXEL_MAP_I_TO_I = 3184;
pub const GL_SGIX_framezoom = 1;
pub const GL_ATI_vertex_streams = 1;
pub const GL_ARB_shader_storage_buffer_object = 1;
pub const GL_COMBINER_CD_OUTPUT_NV = 34123;
pub const GL_VIEWPORT_SWIZZLE_POSITIVE_Y_NV = 37714;
pub const GL_FRAMEBUFFER_BINDING = 36006;
pub const GL_DS_SCALE_NV = 34576;
pub const GL_SOURCE2_RGB_ARB = 34178;
pub const GL_WIDE_LINE_HINT_PGI = 107042;
pub const GL_HALF_BIT_ATI = 8;
pub const GL_YCBCR_422_APPLE = 34233;
pub const GL_UNSIGNED_INT_IMAGE_3D = 36964;
pub const GL_ARB_imaging = 1;
pub const GL_ARB_shader_atomic_counter_ops = 1;
pub const GL_DOUBLE_MAT2_EXT = 36678;
pub const GL_CLIP_DEPTH_MODE = 37725;
pub const GL_CONTEXT_FLAG_NO_ERROR_BIT = 8;
pub const GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB = 37699;
pub const GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV = 36256;
pub const GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI = 2097152;
pub const GL_XOR = 5382;
pub const GL_EXT_packed_float = 1;
pub const GL_RED_MAX_CLAMP_INGR = 34148;
pub const GL_STATIC_COPY = 35046;
pub const GL_COMPRESSED_RGBA_ASTC_6x5_KHR = 37811;
pub const GL_DOT2_ADD_ATI = 35180;
pub const GL_MAX_VERTEX_UNIFORM_COMPONENTS = 35658;
pub const GL_SYNC_FENCE = 37142;
pub const GL_INCLUSIVE_EXT = 36624;
pub const GL_MIN_SAMPLE_SHADING_VALUE = 35895;
pub const GL_TIME_ELAPSED = 35007;
pub const GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 37130;
pub const GL_INT_SAMPLER_BUFFER_EXT = 36304;
pub const GL_RGB9_E5 = 35901;
pub const GL_FRAMEBUFFER_RENDERABLE_LAYERED = 33418;
pub const GL_RGB32I_EXT = 36227;
pub const GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI = 34801;
pub const GL_MAX_RENDERBUFFER_SIZE = 34024;
pub const GL_REG_9_ATI = 35114;
pub const GL_VERSION_4_0 = 1;
pub const GL_RENDERBUFFER_STORAGE_SAMPLES_AMD = 37298;
pub const GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY = 36970;
pub const GL_ARB_texture_cube_map = 1;
pub const GL_PIXEL_TRANSFORM_2D_MATRIX_EXT = 33592;
pub const GL_QUERY_RESOURCE_TYPE_VIDMEM_ALLOC_NV = 38208;
pub const GL_AMD_interleaved_elements = 1;
pub const GL_STENCIL_INDEX16_EXT = 36169;
pub const GL_RGB16UI_EXT = 36215;
pub const GL_MAX_VERTEX_SHADER_VARIANTS_EXT = 34758;
pub const GL_BUFFER_DATA_SIZE = 37635;
pub const GL_INTENSITY8I_EXT = 36241;
pub const GL_CONSERVATIVE_RASTERIZATION_NV = 37702;
pub const GL_R1UI_N3F_V3F_SUN = 34247;
pub const GL_ZOOM_X = 3350;
pub const GL_OPERAND1_RGB_EXT = 34193;
pub const GL_COORD_REPLACE_NV = 34914;
pub const GL_IMAGE_CLASS_11_11_10 = 33474;
pub const GL_BGRA = 32993;
pub const GL_BINORMAL_ARRAY_EXT = 33850;
pub const GL_EXT_transform_feedback = 1;
pub const GL_MODELVIEW8_ARB = 34600;
pub const GL_INDEX_ARRAY_BUFFER_BINDING = 34969;
pub const GL_SWIZZLE_STRQ_DQ_ATI = 35195;
pub const GL_PROXY_TEXTURE_RECTANGLE_NV = 34039;
pub const GL_DOT_PRODUCT_PASS_THROUGH_NV = 34907;
pub const GL_REG_3_ATI = 35108;
pub const GL_GUILTY_CONTEXT_RESET = 33363;
pub const GL_COVERAGE_MODULATION_NV = 37682;
pub const GL_FRAGMENT_SUBROUTINE = 37612;
pub const GL_COMPRESSED_R11_EAC = 37488;
pub const GL_MOVE_TO_CONTINUES_NV = 37046;
pub const GL_PATH_PROJECTION_MATRIX_NV = 2983;
pub const GL_VERTEX_BINDING_STRIDE = 33496;
pub const GL_EXT_timer_query = 1;
pub const GL_UNSIGNED_INT_IMAGE_BUFFER = 36967;
pub const GL_REG_28_ATI = 35133;
pub const GL_EXT_provoking_vertex = 1;
pub const GL_STANDARD_FONT_FORMAT_NV = 37740;
pub const GL_EXT_shader_image_load_formatted = 1;
pub const GL_PERFORMANCE_MONITOR_AMD = 37202;
pub const GL_POLYGON_MODE = 2880;
pub const GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED = 33313;
pub const GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS = 37065;
pub const GL_TRIANGLE_STRIP_ADJACENCY_ARB = 13;
pub const GL_RGB16UI = 36215;
pub const GL_GEOMETRY_VERTICES_OUT_ARB = 36314;
pub const GL_ARB_stencil_texturing = 1;
pub const GL_VERTEX_WEIGHTING_EXT = 34057;
pub const GL_VERSION_3_1 = 1;
pub const GL_LINEAR_ATTENUATION = 4616;
pub const GL_EXT_copy_texture = 1;
pub const GL_SET = 5391;
pub const GL_STANDARD_FONT_NAME_NV = 36978;
pub const GL_CMYKA_EXT = 32781;
pub const GL_BOOL_VEC3 = 35672;
pub const GL_QUADRATIC_ATTENUATION = 4617;
pub const GL_PROXY_TEXTURE_3D_EXT = 32880;
pub const GL_ASYNC_DRAW_PIXELS_SGIX = 33629;
pub const GL_EVAL_2D_NV = 34496;
pub const GL_PATH_STROKE_BOUNDING_BOX_NV = 37026;
pub const GL_VARIANT_ARRAY_EXT = 34792;
pub const GL_VERTEX_PROGRAM_NV = 34336;
pub const GL_NV_transform_feedback = 1;
pub const GL_EVAL_VERTEX_ATTRIB4_NV = 34506;
pub const GL_COLOR_ARRAY_POINTER = 32912;
pub const GL_GENERATE_MIPMAP_HINT = 33170;
pub const GL_COMMAND_BARRIER_BIT = 64;
pub const GL_TEXTURE20 = 34004;
pub const GL_PERFMON_RESULT_AMD = 35782;
pub const GL_MAD_ATI = 35176;
pub const GL_PERFMON_RESULT_AVAILABLE_AMD = 35780;
pub const GL_R11F_G11F_B10F_EXT = 35898;
pub const GL_COLOR = 6144;
pub const GL_CLIP_NEAR_HINT_PGI = 107040;
pub const GL_SGIX_ycrcb = 1;
pub const GL_RGBA_S3TC = 33698;
pub const GL_COLOR_CLEAR_VALUE = 3106;
pub const GL_PIXEL_MAP_A_TO_A_SIZE = 3257;
pub const GL_EXT_index_material = 1;
pub const GL_CON_3_ATI = 35140;
pub const GL_ARB_texture_buffer_object = 1;
pub const GL_NV_shader_atomic_int64 = 1;
pub const GL_ARRAY_SIZE = 37627;
pub const GL_TEXTURE_SWIZZLE_B_EXT = 36420;
pub const GL_SHADER_OBJECT_ARB = 35656;
pub const GL_CCW = 2305;
pub const GL_COLOR_ATTACHMENT18 = 36082;
pub const GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT = 34062;
pub const GL_VERTEX_CONSISTENT_HINT_PGI = 107051;
pub const GL_COMPRESSED_SLUMINANCE_ALPHA_EXT = 35915;
pub const GL_NEAREST_CLIPMAP_LINEAR_SGIX = 33870;
pub const GL_INTEL_fragment_shader_ordering = 1;
pub const GL_PRIMITIVES_GENERATED_EXT = 35975;
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER = 37101;
pub const GL_UNIFORM_MATRIX_STRIDE = 35389;
pub const GL_HP_image_transform = 1;
pub const GL_MODELVIEW1_STACK_DEPTH_EXT = 34050;
pub const GL_ARB_gl_spirv = 1;
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER = 37577;
pub const GL_SAMPLER_BUFFER_AMD = 36865;
pub const GL_OP_ADD_EXT = 34695;
pub const GL_PIXEL_PACK_BUFFER = 35051;
pub const GL_MAX_SUBROUTINES = 36327;
pub const GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET = 36447;
pub const GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 34825;
pub const GL_CAVEAT_SUPPORT = 33464;
pub const GL_TEXTURE_DT_SIZE_NV = 34590;
pub const GL_COMPARE_R_TO_TEXTURE_ARB = 34894;
pub const GL_NORMAL_MAP_EXT = 34065;
pub const GL_POSITION = 4611;
pub const GL_MAX_WINDOW_RECTANGLES_EXT = 36628;
pub const GL_TEXTURE_4D_BINDING_SGIS = 33103;
pub const GL_VERTEX_ARRAY_SIZE = 32890;
pub const GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR = 33357;
pub const GL_FILE_NAME_NV = 36980;
pub const GL_ARB_blend_func_extended = 1;
pub const GL_STENCIL_REF_COMMAND_NV = 12;
pub const GL_SHADER_STORAGE_BARRIER_BIT = 8192;
pub const GL_EXT_gpu_program_parameters = 1;
pub const GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = 33380;
pub const GL_FAILURE_NV = 36912;
pub const GL_ARB_enhanced_layouts = 1;
pub const GL_TEXTURE_GREEN_SIZE = 32861;
pub const GL_SGIS_generate_mipmap = 1;
pub const GL_OUTPUT_TEXTURE_COORD12_EXT = 34729;
pub const GL_COMPRESSED_RGBA_ASTC_6x6_KHR = 37812;
pub const GL_TEXTURE_SHADER_NV = 34526;
pub const GL_TRANSPOSE_AFFINE_2D_NV = 37014;
pub const GL_MAX_DEBUG_LOGGED_MESSAGES_ARB = 37188;
pub const GL_PARAMETER_BUFFER_ARB = 33006;
pub const GL_VERTEX_ARRAY_RANGE_VALID_NV = 34079;
pub const GL_INVALID_FRAMEBUFFER_OPERATION = 1286;
pub const GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV = 34080;
pub const GL_CONSTANT_COLOR = 32769;
pub const GL_VERTEX_ARRAY_RANGE_APPLE = 34077;
pub const GL_NEGATIVE_W_EXT = 34780;
pub const GL_MULT = 259;
pub const GL_EXT_EGL_image_storage = 1;
pub const GL_TRANSPOSE_COLOR_MATRIX = 34022;
pub const GL_ALPHA_FLOAT32_APPLE = 34838;
pub const GL_TEXTURE14_ARB = 33998;
pub const GL_VERTEX_ARRAY_STORAGE_HINT_APPLE = 34079;
pub const GL_SGIX_instruments = 1;
pub const GL_CON_20_ATI = 35157;
pub const GL_SIGNED_RGBA_NV = 34555;
pub const GL_DRAW_INDIRECT_BUFFER = 36671;
pub const GL_UNSIGNED_INT64_AMD = 35778;
pub const GL_RENDERBUFFER_SAMPLES_EXT = 36011;
pub const GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV = 16777216;
pub const GL_EYE_POINT_SGIS = 33268;
pub const GL_PIXEL_UNPACK_BUFFER_BINDING_EXT = 35055;
pub const GL_PACK_IMAGE_DEPTH_SGIS = 33073;
pub const GL_SHADER_STORAGE_BLOCK = 37606;
pub const GL_PATH_COORD_COUNT_NV = 37022;
pub const GL_RENDERBUFFER_INTERNAL_FORMAT = 36164;
pub const GL_SOURCE1_RGB_ARB = 34177;
pub const GL_IMAGE_TRANSLATE_X_HP = 33111;
pub const GL_TRANSLATE_2D_NV = 37008;
pub const GL_APPLE_float_pixels = 1;
pub const GL_RENDERBUFFER_HEIGHT = 36163;
pub const GL_HSL_COLOR_KHR = 37551;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR = 37851;
pub const GL_OFFSET_TEXTURE_BIAS_NV = 34531;
pub const GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT = 36428;
pub const GL_BUFFER_MAPPED_ARB = 35004;
pub const GL_4D_COLOR_TEXTURE = 1540;
pub const GL_PROGRAM_POINT_SIZE_ARB = 34370;
pub const GL_SLUMINANCE_ALPHA_EXT = 35908;
pub const GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI = 32981;
pub const GL_RGB10_EXT = 32850;
pub const GL_TESS_EVALUATION_SUBROUTINE = 37610;
pub const GL_RELATIVE_QUADRATIC_CURVE_TO_NV = 11;
pub const GL_GEOMETRY_SHADER_INVOCATIONS = 34943;
pub const GL_RGBA32UI_EXT = 36208;
pub const GL_MAX_CONVOLUTION_WIDTH = 32794;
pub const GL_EDGE_FLAG_ARRAY_ADDRESS_NV = 36646;
pub const GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS = 32924;
pub const GL_4_BYTES_NV = 5129;
pub const GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV = 35976;
pub const GL_VERSION_3_2 = 1;
pub const GL_HILO_NV = 34548;
pub const GL_MODELVIEW_MATRIX = 2982;
pub const GL_IMPLEMENTATION_COLOR_READ_TYPE = 35738;
pub const GL_OPERAND0_ALPHA_EXT = 34200;
pub const GL_DRAW_PIXEL_TOKEN = 1797;
pub const GL_BLEND_ADVANCED_COHERENT_KHR = 37509;
pub const GL_GEOMETRY_DEFORMATION_SGIX = 33172;
pub const GL_DECODE_EXT = 35401;
pub const GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 34760;
pub const GL_ARC_TO_NV = 254;
pub const GL_OR = 5383;
pub const GL_INTENSITY12 = 32844;
pub const GL_CONTINUOUS_AMD = 36871;
pub const GL_PRIMITIVES_GENERATED_NV = 35975;
pub const GL_RGBA32F = 34836;
pub const GL_PROGRAM_ERROR_POSITION_ARB = 34379;
pub const GL_COMPRESSED_LUMINANCE_LATC1_EXT = 35952;
pub const GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 36961;
pub const GL_ARRAY_BUFFER = 34962;
pub const GL_EYE_LINEAR = 9216;
pub const GL_MAX_ATTRIB_STACK_DEPTH = 3381;
pub const GL_RED_BIAS = 3349;
pub const GL_ARB_shader_subroutine = 1;
pub const GL_TEXTURE21 = 34005;
pub const GL_MODELVIEW30_ARB = 34622;
pub const GL_RELATIVE_ROUNDED_RECT2_NV = 235;
pub const GL_BLEND_SRC_ALPHA_EXT = 32971;
pub const GL_DEPENDENT_RGB_TEXTURE_3D_NV = 34905;
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT = 35968;
pub const GL_HISTOGRAM_BLUE_SIZE_EXT = 32810;
pub const GL_ARB_texture_float = 1;
pub const GL_SGIX_texture_lod_bias = 1;
pub const GL_OUTPUT_TEXTURE_COORD21_EXT = 34738;
pub const GL_ASYNC_MARKER_SGIX = 33577;
pub const GL_DEPTH_STENCIL_NV = 34041;
pub const GL_PARTIAL_SUCCESS_NV = 36910;
pub const GL_BACK_PRIMARY_COLOR_NV = 35959;
pub const GL_UNSIGNED_INT_SAMPLER_2D_RECT = 36309;
pub const GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD = 37273;
pub const GL_LINEARLIGHT_NV = 37543;
pub const GL_FUNC_REVERSE_SUBTRACT = 32779;
pub const GL_BUMP_ROT_MATRIX_ATI = 34677;
pub const GL_UNIFORM_BUFFER_ADDRESS_NV = 37743;
pub const GL_SOURCE1_RGB = 34177;
pub const GL_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_EXT = 38193;
pub const GL_VERTEX_ARRAY_BUFFER_BINDING_ARB = 34966;
pub const GL_NORMAL_ARRAY_POINTER_EXT = 32911;
pub const GL_TRIANGLE_MESH_SUN = 34325;
pub const GL_MODELVIEW27_ARB = 34619;
pub const GL_YCRCB_SGIX = 33560;
pub const GL_TRANSPOSE_NV = 34348;
pub const GL_BUFFER_ACCESS_FLAGS = 37151;
pub const GL_ARB_buffer_storage = 1;
pub const GL_SUBTRACT_ARB = 34023;
pub const GL_TRANSFORM_FEEDBACK_BINDING_NV = 36389;
pub const GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV = 36445;
pub const GL_SLUMINANCE8 = 35911;
pub const GL_SIGNED_RGB_NV = 34558;
pub const GL_POST_COLOR_MATRIX_RED_SCALE_SGI = 32948;
pub const GL_RGB16F = 34843;
pub const GL_GENERATE_MIPMAP = 33169;
pub const GL_MIN_LOD_WARNING_AMD = 37276;
pub const GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX = 37594;
pub const GL_TEXTURE_1D_STACK_BINDING_MESAX = 34653;
pub const GL_PALETTE8_R5_G6_B5_OES = 35735;
pub const GL_FRAGMENT_SHADER_BIT = 2;
pub const GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS = 37583;
pub const GL_ARB_vertex_attrib_64bit = 1;
pub const GL_DEBUG_CALLBACK_FUNCTION = 33348;
pub const GL_COLOR_TABLE_ALPHA_SIZE_SGI = 32989;
pub const GL_QUERY_BY_REGION_WAIT_NV = 36373;
pub const GL_EXT_vertex_array_bgra = 1;
pub const GL_MODELVIEW2_ARB = 34594;
pub const GL_LEFT = 1030;
pub const GL_UNSIGNED_INT64_VEC2_NV = 36853;
pub const GL_IMAGE_BUFFER = 36945;
pub const GL_REPLACE = 7681;
pub const GL_LOSE_CONTEXT_ON_RESET = 33362;
pub const GL_LINE_LOOP = 2;
pub const GL_MAX_BINDABLE_UNIFORM_SIZE_EXT = 36333;
pub const GL_SET_AMD = 34634;
pub const GL_TRANSFORM_FEEDBACK_NV = 36386;
pub const GL_ROUNDED_RECT_NV = 232;
pub const GL_TEXTURE_FREE_MEMORY_ATI = 34812;
pub const GL_TEXTURE_IMMUTABLE_FORMAT = 37167;
pub const GL_GREEN_BIAS = 3353;
pub const GL_POINT_SPRITE_COORD_ORIGIN = 36000;
pub const GL_GREEN = 6404;
pub const GL_CLAMP_TO_EDGE = 33071;
pub const GL_VERSION_4_6 = 1;
pub const GL_INT_IMAGE_2D_MULTISAMPLE_EXT = 36960;
pub const GL_CONTEXT_FLAG_DEBUG_BIT = 2;
pub const GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB = 35070;
pub const GL_DRAW_FRAMEBUFFER_EXT = 36009;
pub const GL_RG32UI = 33340;
pub const GL_VERTEX_SHADER = 35633;
pub const GL_SOURCE3_RGB_NV = 34179;
pub const GL_TEXTURE_LUMINANCE_TYPE_ARB = 35860;
pub const GL_POST_CONVOLUTION_ALPHA_SCALE = 32799;
pub const GL_CON_22_ATI = 35159;
pub const GL_FLOAT_CLEAR_COLOR_VALUE_NV = 34957;
pub const GL_OP_FLOOR_EXT = 34703;
pub const GL_TEXTURE_RED_TYPE = 35856;
pub const GL_TOP_LEVEL_ARRAY_STRIDE = 37645;
pub const GL_MAX_FOG_FUNC_POINTS_SGIS = 33068;
pub const GL_OML_resample = 1;
pub const GL_EXT_blend_logic_op = 1;
pub const GL_COLOR_ALPHA_PAIRING_ATI = 35189;
pub const GL_RGB_INTEGER = 36248;
pub const GL_SCISSOR_TEST = 3089;
pub const GL_PROXY_TEXTURE_CUBE_MAP_ARB = 34075;
pub const GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX = 36936;
pub const GL_TRACK_MATRIX_TRANSFORM_NV = 34377;
pub const GL_NV_uniform_buffer_unified_memory = 1;
pub const GL_COMPRESSED_RG = 33318;
pub const GL_LUMINANCE6_ALPHA2 = 32836;
pub const GL_COVERAGE_MODULATION_TABLE_SIZE_NV = 37683;
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV = 35968;
pub const GL_POST_CONVOLUTION_ALPHA_BIAS = 32803;
pub const GL_VIEWPORT_POSITION_W_SCALE_Y_COEFF_NV = 37758;
pub const GL_IMAGE_CLASS_4_X_8 = 33471;
pub const GL_DRAW_BUFFER10_ARB = 34863;
pub const GL_SAMPLE_COVERAGE_VALUE_ARB = 32938;
pub const GL_BUFFER_OBJECT_APPLE = 34227;
pub const GL_STRICT_DEPTHFUNC_HINT_PGI = 107030;
pub const GL_TEXTURE_COMPARE_SGIX = 33178;
pub const GL_WEIGHTED_AVERAGE_EXT = 37735;
pub const GL_MAX_COMBINED_ATOMIC_COUNTERS = 37591;
pub const GL_UNIFORM_OFFSET = 35387;
pub const GL_STENCIL_INDEX1_EXT = 36166;
pub const GL_HISTOGRAM_FORMAT = 32807;
pub const GL_FONT_TARGET_UNAVAILABLE_NV = 37737;
pub const GL_VERTEX_SHADER_OPTIMIZED_EXT = 34772;
pub const GL_ARB_vertex_program = 1;
pub const GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD = 37196;
pub const GL_TEXTURE_3D_BINDING_EXT = 32874;
pub const GL_GREEN_INTEGER_EXT = 36245;
pub const GL_DEPTH_STENCIL_ATTACHMENT = 33306;
pub const GL_MESAX_texture_stack = 1;
pub const GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB = 33517;
pub const GL_VERSION_3_3 = 1;
pub const GL_ARB_fragment_program = 1;
pub const GL_ATI_vertex_attrib_array_object = 1;
pub const GL_MAGNITUDE_BIAS_NV = 34584;
pub const GL_MODULATE_ADD_ATI = 34628;
pub const GL_RESCALE_NORMAL_EXT = 32826;
pub const GL_ATTRIB_ARRAY_POINTER_NV = 34373;
pub const GL_FLOAT_MAT4_ARB = 35676;
pub const GL_SGIS_texture_filter4 = 1;
pub const GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 34975;
pub const GL_UNSIGNED_INT_8_8_8_8_EXT = 32821;
pub const GL_SAMPLE_ALPHA_TO_ONE_ARB = 32927;
pub const GL_LUMINANCE_FLOAT16_ATI = 34846;
pub const GL_EXT_blend_color = 1;
pub const GL_IMAGE_FORMAT_COMPATIBILITY_TYPE = 37063;
pub const GL_MAX_SAMPLE_MASK_WORDS_NV = 36441;
pub const GL_HANDLE_TYPE_D3D12_FENCE_EXT = 38292;
pub const GL_VERTEX_STREAM7_ATI = 34675;
pub const GL_ALL_COMPLETED_NV = 34034;
pub const GL_MAP1_VERTEX_ATTRIB15_4_NV = 34415;
pub const GL_ARB_shader_texture_lod = 1;
pub const GL_EXT_debug_label = 1;
pub const GL_IMAGE_BINDING_LAYERED = 36668;
pub const GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS = 37068;
pub const GL_STENCIL_FAIL = 2964;
pub const GL_RGB5_A1 = 32855;
pub const GL_PATH_STENCIL_VALUE_MASK_NV = 37049;
pub const GL_TEXTURE_PRE_SPECULAR_HP = 33129;
pub const GL_TEXTURE22 = 34006;
pub const GL_KHR_robust_buffer_access_behavior = 1;
pub const GL_OUTPUT_TEXTURE_COORD31_EXT = 34748;
pub const GL_STENCIL_PASS_DEPTH_FAIL = 2965;
pub const GL_EXT_stencil_wrap = 1;
pub const GL_LAST_VIDEO_CAPTURE_STATUS_NV = 36903;
pub const GL_RG8_SNORM = 36757;
pub const GL_POINT_SIZE_MIN = 33062;
pub const GL_VIEW_COMPATIBILITY_CLASS = 33462;
pub const GL_REG_6_ATI = 35111;
pub const GL_PATCH_DEFAULT_INNER_LEVEL = 36467;
pub const GL_EXT_index_texture = 1;
pub const GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB = 34827;
pub const GL_TEXTURE_COORD_ARRAY_LENGTH_NV = 36655;
pub const GL_ARB_texture_rgb10_a2ui = 1;
pub const GL_TEXTURE_SWIZZLE_R = 36418;
pub const GL_DEBUG_CATEGORY_API_ERROR_AMD = 37193;
pub const GL_BUFFER_OBJECT_EXT = 37201;
pub const GL_VERTEX_SHADER_ARB = 35633;
pub const GL_PATH_DASH_OFFSET_RESET_NV = 37044;
pub const GL_TEXTURE_COMPARE_FUNC = 34893;
pub const GL_FLAT = 7424;
pub const GL_MAX_GEOMETRY_OUTPUT_VERTICES = 36320;
pub const GL_SYNC_FLAGS = 37141;
pub const GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV = 34906;
pub const GL_PROGRAM_LENGTH_ARB = 34343;
pub const GL_PATH_FILL_MASK_NV = 36993;
pub const GL_COLOR_SUM_CLAMP_NV = 34127;
pub const GL_TEXTURE4_ARB = 33988;
pub const GL_EXT_memory_object_fd = 1;
pub const GL_DRAW_BUFFER3_ATI = 34856;
pub const GL_NV_conservative_raster = 1;
pub const GL_SAMPLER_CUBE_ARB = 35680;
pub const GL_CON_19_ATI = 35156;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB = 34069;
pub const GL_PERTURB_EXT = 34222;
pub const GL_POST_CONVOLUTION_ALPHA_SCALE_EXT = 32799;
pub const GL_2PASS_1_EXT = 32931;
pub const GL_POLYGON_BIT = 8;
pub const GL_SMALL_CCW_ARC_TO_NV = 18;
pub const GL_RG16UI = 33338;
pub const GL_OFFSET_TEXTURE_2D_NV = 34536;
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV = 35979;
pub const GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX = 36935;
pub const GL_SGIX_igloo_interface = 1;
pub const GL_IR_INSTRUMENT1_SGIX = 33151;
pub const GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV = 64;
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER = 34032;
pub const GL_NV_half_float = 1;
pub const GL_EXT_compiled_vertex_array = 1;
pub const GL_SHADER_OBJECT_EXT = 35656;
pub const GL_CLAMP_VERTEX_COLOR = 35098;
pub const GL_RGBA_SNORM = 36755;
pub const GL_SHARED_TEXTURE_PALETTE_EXT = 33275;
pub const GL_TEXTURE24_ARB = 34008;
pub const GL_LO_SCALE_NV = 34575;
pub const GL_TEXTURE_REDUCTION_MODE_EXT = 37734;
pub const GL_TEXTURE_LUMINANCE_SIZE_EXT = 32864;
pub const GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS = 37587;
pub const GL_DOUBLE_VEC3_EXT = 36861;
pub const GL_OBJECT_ACTIVE_UNIFORMS_ARB = 35718;
pub const GL_FILL = 6914;
pub const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 36972;
pub const GL_AMD_texture_texture4 = 1;
pub const GL_VERSION_4_5 = 1;
pub const GL_ARB_occlusion_query2 = 1;
pub const GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV = 36261;
pub const GL_EXT_framebuffer_sRGB = 1;
pub const GL_COLOR_ATTACHMENT2 = 36066;
pub const GL_VIEWPORT_SUBPIXEL_BITS = 33372;
pub const GL_BGRA_EXT = 32993;
pub const GL_MODELVIEW12_ARB = 34604;
pub const GL_DYNAMIC_COPY = 35050;
pub const GL_ATI_fragment_shader = 1;
pub const GL_TRANSPOSE_CURRENT_MATRIX_ARB = 34999;
pub const GL_RELATIVE_LARGE_CW_ARC_TO_NV = 25;
pub const GL_MAX_ELEMENTS_INDICES = 33001;
pub const GL_EDGE_FLAG_ARRAY_STRIDE = 32908;
pub const GL_SECONDARY_COLOR_ARRAY_EXT = 33886;
pub const GL_PROGRAMMABLE_SAMPLE_LOCATION_ARB = 37697;
pub const GL_PROXY_TEXTURE_CUBE_MAP_ARRAY = 36875;
pub const GL_TEXTURE_MAX_CLAMP_S_SGIX = 33641;
pub const GL_APPLE_transform_hint = 1;
pub const GL_STENCIL_ATTACHMENT = 36128;
pub const GL_SCISSOR_COMMAND_NV = 17;
pub const GL_SPIR_V_BINARY = 38226;
pub const GL_MATRIX7_ARB = 35015;
pub const GL_DEPTH_COMPONENT24_SGIX = 33190;
pub const GL_PN_TRIANGLES_NORMAL_MODE_ATI = 34803;
pub const GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_TRIANGLES_NV = 38223;
pub const GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM = 36493;
pub const GL_ATI_draw_buffers = 1;
pub const GL_DRAW_FRAMEBUFFER = 36009;
pub const GL_VIEWPORT_BOUNDS_RANGE = 33373;
pub const GL_VERTEX_ATTRIB_ARRAY9_NV = 34393;
pub const GL_PLUS_DARKER_NV = 37522;
pub const GL_OUTPUT_TEXTURE_COORD1_EXT = 34718;
pub const GL_IMAGE_TRANSFORM_2D_HP = 33121;
pub const GL_TEXTURE_MATERIAL_FACE_EXT = 33617;
pub const GL_BUFFER_MAP_OFFSET = 37153;
pub const GL_DEPTH_COMPONENT32_SGIX = 33191;
pub const GL_ATI_texture_mirror_once = 1;
pub const GL_BACK_NORMALS_HINT_PGI = 107043;
pub const GL_VERTEX_ARRAY_RANGE_POINTER_APPLE = 34081;
pub const GL_COMBINER_CD_DOT_PRODUCT_NV = 34118;
pub const GL_FRONT_RIGHT = 1025;
pub const GL_ARB_pixel_buffer_object = 1;
pub const GL_TRANSLATE_Y_NV = 37007;
pub const GL_LIST_MODE = 2864;
pub const GL_UNSIGNED_INT_SAMPLER_3D = 36307;
pub const GL_NV_vdpau_interop = 1;
pub const GL_SAMPLER_CUBE_SHADOW_EXT = 36293;
pub const GL_ARB_viewport_array = 1;
pub const GL_RGB_SNORM = 36754;
pub const GL_SGIX_list_priority = 1;
pub const GL_FOG_COORD_ARRAY_LENGTH_NV = 36658;
pub const GL_TRANSPOSE_COLOR_MATRIX_ARB = 34022;
pub const GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV = 35957;
pub const GL_MAX_VERTEX_ATTRIBS_ARB = 34921;
pub const GL_LUMINANCE_FLOAT32_APPLE = 34840;
pub const GL_FRAMEBUFFER_UNDEFINED = 33305;
pub const GL_MAX_FRAGMENT_INTERPOLATION_OFFSET = 36444;
pub const GL_CUBIC_EXT = 33588;
pub const GL_ITALIC_BIT_NV = 2;
pub const GL_OUTPUT_TEXTURE_COORD29_EXT = 34746;
pub const GL_LUMINANCE8_ALPHA8_SNORM = 36886;
pub const GL_IMAGE_CLASS_1_X_32 = 33467;
pub const GL_STREAM_READ = 35041;
pub const GL_T2F_N3F_V3F = 10795;
pub const GL_PROGRAM_BINARY_RETRIEVABLE_HINT = 33367;
pub const GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI = 34806;
pub const GL_UNSIGNED_INT_IMAGE_CUBE = 36966;
pub const GL_OP_SET_LT_EXT = 34701;
pub const GL_POST_CONVOLUTION_RED_SCALE_EXT = 32796;
pub const GL_LINES_ADJACENCY = 10;
pub const GL_EXT_texture_mirror_clamp = 1;
pub const GL_POLYGON_OFFSET_EXT = 32823;
pub const GL_TRANSFORM_FEEDBACK_PAUSED = 36387;
pub const GL_DEPTH_BUFFER_FLOAT_MODE_NV = 36271;
pub const GL_TEXTURE23 = 34007;
pub const GL_DEBUG_TYPE_OTHER_ARB = 33361;
pub const GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV = 37693;
pub const GL_UNIFORM_IS_ROW_MAJOR = 35390;
pub const GL_PROGRAM_ERROR_STRING_ARB = 34932;
pub const GL_SAMPLER_2D_MULTISAMPLE_ARRAY = 37131;
pub const GL_APPLE_vertex_program_evaluators = 1;
pub const GL_MOVE_TO_RESETS_NV = 37045;
pub const GL_DEPENDENT_GB_TEXTURE_2D_NV = 34538;
pub const GL_CON_15_ATI = 35152;
pub const GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV = 128;
pub const GL_INT_IMAGE_1D_ARRAY = 36957;
pub const GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = 33347;
pub const GL_DRAW_ELEMENTS_COMMAND_NV = 2;
pub const GL_MAX_FRAMEBUFFER_HEIGHT = 37654;
pub const GL_LINEAR_DETAIL_ALPHA_SGIS = 32920;
pub const GL_CURRENT_PALETTE_MATRIX_ARB = 34883;
pub const GL_MAX_GEOMETRY_ATOMIC_COUNTERS = 37589;
pub const GL_EVAL_VERTEX_ATTRIB2_NV = 34504;
pub const GL_DRAW_ELEMENTS_STRIP_COMMAND_NV = 4;
pub const GL_TEXTURE_COORD_NV = 35961;
pub const GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED = 33523;
pub const GL_TEXTURE_BUFFER_FORMAT_ARB = 35886;
pub const GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT = 1;
pub const GL_COLOR_ARRAY_LIST_IBM = 103072;
pub const GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV = 37696;
pub const GL_DETAIL_TEXTURE_2D_SGIS = 32917;
pub const GL_NUM_DEVICE_UUIDS_EXT = 38294;
pub const GL_BACK = 1029;
pub const GL_ARB_parallel_shader_compile = 1;
pub const GL_MIRROR_CLAMP_TO_EDGE_ATI = 34627;
pub const GL_ARB_texture_buffer_object_rgb32 = 1;
pub const GL_INT_SAMPLER_1D_EXT = 36297;
pub const GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = 34047;
pub const GL_TRANSFORM_HINT_APPLE = 34225;
pub const GL_DOUBLE_MAT3_EXT = 36679;
pub const GL_ELEMENT_ARRAY_BARRIER_BIT_EXT = 2;
pub const GL_POINT_SPRITE_NV = 34913;
pub const GL_ARB_uniform_buffer_object = 1;
pub const GL_NV_register_combiners2 = 1;
pub const GL_FLOAT_RG16_NV = 34950;
pub const GL_TEXTURE_GREEN_TYPE = 35857;
pub const GL_INTENSITY4 = 32842;
pub const GL_IMPLEMENTATION_COLOR_READ_FORMAT = 35739;
pub const GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = 36059;
pub const GL_RENDERBUFFER_SAMPLES = 36011;
pub const GL_SIGNED_LUMINANCE8_NV = 34562;
pub const GL_TEXTURE_COMPONENTS = 4099;
pub const GL_INT_SAMPLER_1D_ARRAY_EXT = 36302;
pub const GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR = 8;
pub const GL_MAX_ACTIVE_LIGHTS_SGIX = 33797;
pub const GL_COMBINER_AB_OUTPUT_NV = 34122;
pub const GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV = 16;
pub const GL_LUMINANCE_ALPHA16F_ARB = 34847;
pub const GL_LAYOUT_DEPTH_STENCIL_READ_ONLY_EXT = 38288;
pub const GL_QUAD_ALPHA8_SGIS = 33055;
pub const GL_ALPHA_FLOAT32_ATI = 34838;
pub const GL_ALPHA_MAX_SGIX = 33569;
pub const GL_EXT_abgr = 1;
pub const GL_CLEAR = 5376;
pub const GL_VERSION_4_4 = 1;
pub const GL_COLOR_ATTACHMENT3 = 36067;
pub const GL_PINLIGHT_NV = 37544;
pub const GL_OUTPUT_TEXTURE_COORD4_EXT = 34721;
pub const GL_MAX_SPARSE_TEXTURE_SIZE_ARB = 37272;
pub const GL_PER_GPU_STORAGE_NV = 38216;
pub const GL_REDUCE = 32790;
pub const GL_VERTEX_ARRAY_ADDRESS_NV = 36641;
pub const GL_ARB_post_depth_coverage = 1;
pub const GL_UNSIGNED_INT_2_10_10_10_REV = 33640;
pub const GL_FOG_COORD_ARRAY_STRIDE = 33877;
pub const GL_PROGRAM_LENGTH_NV = 34343;
pub const GL_MAX_INTEGER_SAMPLES = 37136;
pub const GL_SGIX_interlace = 1;
pub const GL_NV_gpu_shader5 = 1;
pub const GL_VERTEX_STREAM1_ATI = 34669;
pub const GL_FONT_UNITS_PER_EM_BIT_NV = 1048576;
pub const GL_COLOR_ARRAY_LENGTH_NV = 36653;
pub const GL_PROXY_TEXTURE_2D_MULTISAMPLE = 37121;
pub const GL_POST_CONVOLUTION_BLUE_SCALE_EXT = 32798;
pub const GL_AUX3 = 1036;
pub const GL_MAX_EXT = 32776;
pub const GL_ARB_point_parameters = 1;
pub const GL_TEXTURE9_ARB = 33993;
pub const GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV = 34547;
pub const GL_RGB32UI_EXT = 36209;
pub const GL_SAMPLER_2D_ARRAY = 36289;
pub const GL_EXT_clip_volume_hint = 1;
pub const GL_VIEWPORT = 2978;
pub const GL_UNSIGNED_INT_IMAGE_2D = 36963;
pub const GL_OPERAND0_RGB = 34192;
pub const GL_COLOR_INDEX12_EXT = 32998;
pub const GL_INT_SAMPLER_BUFFER = 36304;
pub const GL_LAYOUT_DEFAULT_INTEL = 0;
pub const GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL = 38137;
pub const GL_INT64_VEC3_ARB = 36842;
pub const GL_DEPTH_BIAS = 3359;
pub const GL_VERTEX_ATTRIB_ARRAY_INTEGER = 35069;
pub const GL_ARB_fragment_coord_conventions = 1;
pub const GL_MATRIX4_NV = 34356;
pub const GL_CONSTANT_NV = 34166;
pub const GL_LINE_BIT = 4;
pub const GL_PROGRAM_ERROR_STRING_NV = 34932;
pub const GL_LINE_SMOOTH_HINT = 3154;
pub const GL_SAMPLE_ALPHA_TO_ONE = 32927;
pub const GL_MAX_COMBINED_UNIFORM_BLOCKS = 35374;
pub const GL_3DFX_tbuffer = 1;
pub const GL_FIELD_UPPER_NV = 36898;
pub const GL_UNIFORM_BARRIER_BIT = 4;
pub const GL_VERTEX_ATTRIB_ARRAY_STRIDE = 34340;
pub const GL_MAJOR_VERSION = 33307;
pub const GL_FRONT_FACE = 2886;
pub const GL_APPLE_vertex_array_range = 1;
pub const GL_DSDT_MAG_NV = 34550;
pub const GL_OP_CLAMP_EXT = 34702;
pub const GL_ARB_texture_rectangle = 1;
pub const GL_NV_vertex_program = 1;
pub const GL_TEXTURE24 = 34008;
pub const GL_COORD_REPLACE_ARB = 34914;
pub const GL_TEXTURE_WRAP_R_EXT = 32882;
pub const GL_LOSE_CONTEXT_ON_RESET_ARB = 33362;
pub const GL_ALPHA16_SNORM = 36888;
pub const GL_MAX_VERTEX_ATOMIC_COUNTERS = 37586;
pub const GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS = 37084;
pub const GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 34995;
pub const GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST = 33452;
pub const GL_TILE_RASTER_ORDER_INCREASING_Y_MESA = 35770;
pub const GL_NV_shader_thread_shuffle = 1;
pub const GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB = 34040;
pub const GL_SGIS_multisample = 1;
pub const GL_NV_pixel_data_range = 1;
pub const GL_NEAREST_MIPMAP_LINEAR = 9986;
pub const GL_NV_compute_program5 = 1;
pub const GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV = 36909;
pub const GL_PARALLEL_ARRAYS_INTEL = 33780;
pub const GL_COMPRESSED_RED_GREEN_RGTC2_EXT = 36285;
pub const GL_EXT_blend_subtract = 1;
pub const GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS = 34925;
pub const GL_YCRCB_444_SGIX = 33212;
pub const GL_TEXTURE_GEN_MODE = 9472;
pub const GL_POINT_BIT = 2;
pub const GL_UNPACK_SKIP_VOLUMES_SGIS = 33074;
pub const GL_RENDERBUFFER_RED_SIZE = 36176;
pub const GL_MODELVIEW1_EXT = 34058;
pub const GL_SGIS_sharpen_texture = 1;
pub const GL_ATTRIB_STACK_DEPTH = 2992;
pub const GL_ORDER = 2561;
pub const GL_OUTPUT_TEXTURE_COORD3_EXT = 34720;
pub const GL_BUFFER_SIZE_ARB = 34660;
pub const GL_REFLECTION_MAP_EXT = 34066;
pub const GL_TESS_CONTROL_SHADER_PATCHES = 33521;
pub const GL_REFERENCED_BY_TESS_CONTROL_SHADER = 37639;
pub const GL_DST_COLOR = 774;
pub const GL_COMBINE_ALPHA = 34162;
pub const GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 36961;
pub const GL_EXT_texture_compression_latc = 1;
pub const GL_LINEAR_SHARPEN_ALPHA_SGIS = 32942;
pub const GL_ONE_MINUS_SRC1_COLOR = 35066;
pub const GL_PACK_COMPRESSED_BLOCK_HEIGHT = 37164;
pub const GL_SUB_ATI = 35173;
pub const GL_AVERAGE_EXT = 33589;
pub const GL_TEXTURE16_ARB = 34000;
pub const GL_TEXTURE_RED_TYPE_ARB = 35856;
pub const GL_DEBUG_SEVERITY_LOW = 37192;
pub const GL_COMPRESSED_LUMINANCE_ARB = 34026;
pub const GL_VIDEO_BUFFER_PITCH_NV = 36904;
pub const GL_ATI_pn_triangles = 1;
pub const GL_INVERT = 5386;
pub const GL_COLOR_TABLE_RED_SIZE = 32986;
pub const GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV = 37072;
pub const GL_SCALE_BY_ONE_HALF_NV = 34112;
pub const GL_POST_COLOR_MATRIX_ALPHA_BIAS = 32955;
pub const GL_EXT_vertex_attrib_64bit = 1;
pub const GL_FEEDBACK = 7169;
pub const GL_MATRIX_INDEX_ARRAY_STRIDE_ARB = 34888;
pub const GL_LINES = 1;
pub const GL_IMAGE_CUBE_MAP_ARRAY = 36948;
pub const GL_RGBA32I_EXT = 36226;
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER = 37575;
pub const GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN = 34241;
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB = 36265;
pub const GL_UNSIGNED_INT_24_8_MESA = 34641;
pub const GL_TEXTURE_2D_STACK_BINDING_MESAX = 34654;
pub const GL_COLOR_ATTACHMENT0 = 36064;
pub const GL_NV_gpu_program5_mem_extended = 1;
pub const GL_OPERAND3_RGB_NV = 34195;
pub const GL_QUERY_RESULT_AVAILABLE = 34919;
pub const GL_MAP_FLUSH_EXPLICIT_BIT = 16;
pub const GL_EVAL_VERTEX_ATTRIB15_NV = 34517;
pub const GL_MAX_VERTEX_STREAMS_ATI = 34667;
pub const GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB = 36874;
pub const GL_UNSIGNED_INT_IMAGE_CUBE_EXT = 36966;
pub const GL_WEIGHT_ARRAY_POINTER_ARB = 34476;
pub const GL_LUMINANCE_ALPHA32I_EXT = 36231;
pub const GL_EXT_texture_object = 1;
pub const GL_PARAMETER_BUFFER_BINDING_ARB = 33007;
pub const GL_VARIABLE_G_NV = 34089;
pub const GL_FLOAT_R_NV = 34944;
pub const GL_NUM_SHADER_BINARY_FORMATS = 36345;
pub const GL_TEXTURE_CONSTANT_DATA_SUNX = 33238;
pub const GL_APPLE_aux_depth_stencil = 1;
pub const GL_AUX2 = 1035;
pub const GL_APPLE_rgb_422 = 1;
pub const GL_STENCIL_PASS_DEPTH_PASS = 2966;
pub const GL_PREFER_DOUBLEBUFFER_HINT_PGI = 107000;
pub const GL_SEPARATE_ATTRIBS_NV = 35981;
pub const GL_RESAMPLE_ZERO_FILL_SGIX = 33844;
pub const GL_DEPTH_COMPONENT24 = 33190;
pub const GL_REFERENCED_BY_COMPUTE_SHADER = 37643;
pub const GL_NV_fragment_coverage_to_color = 1;
pub const GL_NV_depth_clamp = 1;
pub const GL_SKIP_COMPONENTS3_NV = -4;
pub const GL_FLOAT_RGB16_NV = 34952;
pub const GL_GEOMETRY_SUBROUTINE = 37611;
pub const GL_DEBUG_CALLBACK_USER_PARAM_ARB = 33349;
pub const GL_TESS_CONTROL_SUBROUTINE = 37609;
pub const GL_LUMINANCE16_ALPHA16_SNORM = 36890;
pub const GL_STREAM_COPY = 35042;
pub const GL_POLYGON_OFFSET_FACTOR = 32824;
pub const GL_COEFF = 2560;
pub const GL_DRAW_BUFFER6_ATI = 34859;
pub const GL_ALPHA_BLEND_EQUATION_ATI = 34877;
pub const GL_LINE = 6913;
pub const GL_PIXEL_PACK_BUFFER_ARB = 35051;
pub const GL_GEOMETRY_OUTPUT_TYPE = 35096;
pub const GL_SGIS_fog_function = 1;
pub const GL_SGI_color_table = 1;
pub const GL_VERTEX_DATA_HINT_PGI = 107050;
pub const GL_MODELVIEW0_ARB = 5888;
pub const GL_SMOOTH_LINE_WIDTH_GRANULARITY = 2851;
pub const GL_RESAMPLE_AVERAGE_OML = 35208;
pub const GL_HALF_BIAS_NEGATE_NV = 34107;
pub const GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV = 35060;
pub const GL_SAMPLE_MASK_VALUE_EXT = 32938;
pub const GL_BOOL_VEC4 = 35673;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_INDEX = 37707;
pub const GL_INTENSITY16 = 32845;
pub const GL_QUERY = 33507;
pub const GL_COLOR_ATTACHMENT4_EXT = 36068;
pub const GL_TEXTURE_BORDER = 4101;
pub const GL_CONSERVATIVE_RASTERIZATION_INTEL = 33790;
pub const GL_MEDIUM_INT = 36340;
pub const GL_TEXTURE_MAX_ANISOTROPY_EXT = 34046;
pub const GL_TEXTURE25 = 34009;
pub const GL_REFERENCED_BY_TESS_EVALUATION_SHADER = 37640;
pub const GL_ARB_transform_feedback_instanced = 1;
pub const GL_MAX_4D_TEXTURE_SIZE_SGIS = 33080;
pub const GL_PRIMITIVE_RESTART_INDEX = 36766;
pub const GL_IMAGE_CLASS_2_X_16 = 33469;
pub const GL_SCISSOR_BIT = 524288;
pub const GL_POST_CONVOLUTION_COLOR_TABLE_SGI = 32977;
pub const GL_NV_texture_barrier = 1;
pub const GL_NUM_GENERAL_COMBINERS_NV = 34126;
pub const GL_CURRENT_WEIGHT_ARB = 34472;
pub const GL_YCBCR_MESA = 34647;
pub const GL_LUMINANCE_FLOAT16_APPLE = 34846;
pub const GL_EVAL_FRACTIONAL_TESSELLATION_NV = 34501;
pub const GL_NATIVE_GRAPHICS_HANDLE_PGI = 107010;
pub const GL_RG16 = 33324;
pub const GL_TEXTURE_PRIORITY_EXT = 32870;
pub const GL_RED_MIN_CLAMP_INGR = 34144;
pub const GL_OUTPUT_TEXTURE_COORD28_EXT = 34745;
pub const GL_PATH_FILL_MODE_NV = 36992;
pub const GL_CON_12_ATI = 35149;
pub const GL_NVX_blend_equation_advanced_multi_draw_buffers = 1;
pub const GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 35379;
pub const GL_TEXTURE17_ARB = 34001;
pub const GL_LINE_WIDTH = 2849;
pub const GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES = 36665;
pub const GL_PROGRAM_PARAMETER_NV = 34372;
pub const GL_ACTIVE_RESOURCES = 37621;
pub const GL_MAX_COMPUTE_UNIFORM_BLOCKS = 37307;
pub const GL_RGB_RAW_422_APPLE = 35409;
pub const GL_FOG_DISTANCE_MODE_NV = 34138;
pub const GL_IMAGE_1D_ARRAY = 36946;
pub const GL_GEOMETRY_TEXTURE = 33438;
pub const GL_STENCIL_WRITEMASK = 2968;
pub const GL_R32I = 33333;
pub const GL_PROGRAM_TEX_INSTRUCTIONS_ARB = 34822;
pub const GL_OES_single_precision = 1;
pub const GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV = 36921;
pub const GL_R32UI = 33334;
pub const GL_INT_SAMPLER_3D = 36299;
pub const GL_SMOOTH_QUADRATIC_CURVE_TO_NV = 14;
pub const GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 35660;
pub const GL_CON_14_ATI = 35151;
pub const GL_COMPUTE_SUBROUTINE_UNIFORM = 37619;
pub const GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 37125;
pub const GL_HANDLE_TYPE_D3D12_TILEPOOL_EXT = 38281;
pub const GL_MAX_CLIP_PLANES = 3378;
pub const GL_BINORMAL_ARRAY_STRIDE_EXT = 33857;
pub const GL_MIN_MAP_BUFFER_ALIGNMENT = 37052;
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = 35397;
pub const GL_MAP1_TANGENT_EXT = 33860;
pub const GL_SYNC_FLUSH_COMMANDS_BIT = 1;
pub const GL_LAYER_NV = 36266;
pub const GL_QUERY_TARGET = 33514;
pub const GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 34979;
pub const GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = 33779;
pub const GL_SAMPLER_CUBE_MAP_ARRAY = 36876;
pub const GL_UNSIGNED_INT8_NV = 36844;
pub const GL_IUI_N3F_V3F_EXT = 33200;
pub const GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB = 33347;
pub const GL_PROXY_TEXTURE_4D_SGIS = 33077;
pub const GL_SAMPLE_PATTERN_SGIS = 32940;
pub const GL_PIXELS_PER_SAMPLE_PATTERN_Y_AMD = 37295;
pub const GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS = 37581;
pub const GL_BOOL_VEC2_ARB = 35671;
pub const GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = 35881;
pub const GL_LIGHT_MODEL_LOCAL_VIEWER = 2897;
pub const GL_SOURCE2_RGB_EXT = 34178;
pub const GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB = 34991;
pub const GL_R16UI = 33332;
pub const GL_SRC_NV = 37510;
pub const GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT = 37674;
pub const GL_COLOR_ATTACHMENT1 = 36065;
pub const GL_LAYOUT_DEPTH_STENCIL_ATTACHMENT_EXT = 38287;
pub const GL_STENCIL_CLEAR_VALUE = 2961;
pub const GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT = 36959;
pub const GL_POLYGON_SMOOTH = 2881;
pub const GL_INTERLACE_READ_OML = 35201;
pub const GL_FOG_MODE = 2917;
pub const GL_OUTPUT_TEXTURE_COORD18_EXT = 34735;
pub const GL_NV_robustness_video_memory_purge = 1;
pub const GL_REFERENCE_PLANE_SGIX = 33149;
pub const GL_MAX_LGPU_GPUS_NVX = 37562;
pub const GL_MAX_TEXTURE_LOD_BIAS_EXT = 34045;
pub const GL_BLEND_OVERLAP_NV = 37505;
pub const GL_VARIABLE_D_NV = 34086;
pub const GL_IMAGE_1D = 36940;
pub const GL_ARB_texture_env_dot3 = 1;
pub const GL_RGB_SCALE_ARB = 34163;
pub const GL_AUX1 = 1034;
pub const GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB = 37696;
pub const GL_TERMINATE_SEQUENCE_COMMAND_NV = 0;
pub const GL_STENCIL_FUNC = 2962;
pub const GL_SELECTION_BUFFER_SIZE = 3572;
pub const GL_LUMINANCE4_ALPHA4 = 32835;
pub const GL_MAP1_VERTEX_ATTRIB13_4_NV = 34413;
pub const GL_PALETTE4_RGB8_OES = 35728;
pub const GL_INDEX_CLEAR_VALUE = 3104;
pub const GL_MODELVIEW13_ARB = 34605;
pub const GL_TEXTURE_BINDING_2D_ARRAY_EXT = 35869;
pub const GL_SAMPLE_PATTERN_EXT = 32940;
pub const GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL = 38143;
pub const GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 34770;
pub const GL_DRAW_BUFFER4_ATI = 34857;
pub const GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT = 36312;
pub const GL_VERTEX_ARRAY_TYPE_EXT = 32891;
pub const GL_FLOAT = 5126;
pub const GL_MVP_MATRIX_EXT = 34787;
pub const GL_HINT_BIT = 32768;
pub const GL_SPOT_EXPONENT = 4613;
pub const GL_PROGRAM_STRING_ARB = 34344;
pub const GL_OPTIMAL_TILING_EXT = 38276;
pub const GL_DEPTH_STENCIL_EXT = 34041;
pub const GL_POST_COLOR_MATRIX_RED_BIAS = 32952;
pub const GL_ARB_texture_view = 1;
pub const GL_SRGB_WRITE = 33432;
pub const GL_CONSTANT_ALPHA = 32771;
pub const GL_ARB_separate_shader_objects = 1;
pub const GL_COLOR_BUFFER_BIT = 16384;
pub const GL_ADD_SIGNED_ARB = 34164;
pub const GL_RELATIVE_ARC_TO_NV = 255;
pub const GL_MATERIAL_SIDE_HINT_PGI = 107052;
pub const GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = 33777;
pub const GL_QUAD_LUMINANCE8_SGIS = 33057;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV = 35983;
pub const GL_OBJECT_TYPE = 37138;
pub const GL_LAYOUT_TRANSFER_DST_EXT = 38291;
pub const GL_INTENSITY16UI_EXT = 36217;
pub const GL_CONST_EYE_NV = 34533;
pub const GL_PRIMARY_COLOR = 34167;
pub const GL_ARB_polygon_offset_clamp = 1;
pub const GL_ARB_shading_language_include = 1;
pub const GL_OP_DOT3_EXT = 34692;
pub const GL_HSL_HUE_KHR = 37549;
pub const GL_SAMPLE_COVERAGE_ARB = 32928;
pub const GL_TEXTURE26 = 34010;
pub const GL_TEXTURE31_ARB = 34015;
pub const GL_STENCIL_REF = 2967;
pub const GL_GLYPH_VERTICAL_BEARING_X_BIT_NV = 32;
pub const GL_TRANSFORM_BIT = 4096;
pub const GL_SOURCE0_ALPHA = 34184;
pub const GL_DEPTH_STENCIL_TO_RGBA_NV = 34926;
pub const GL_PIXEL_MAP_B_TO_B_SIZE = 3256;
pub const GL_TEXTURE_FILTER_CONTROL_EXT = 34048;
pub const GL_FLOAT_RGBA_MODE_NV = 34958;
pub const GL_ALPHA_BIAS = 3357;
pub const GL_YCBYCR8_422_NV = 36913;
pub const GL_MAX_TESS_PATCH_COMPONENTS = 36484;
pub const GL_SLUMINANCE_ALPHA = 35908;
pub const GL_RGB10_A2UI = 36975;
pub const GL_ALREADY_SIGNALED = 37146;
pub const GL_BLUE_BITS = 3412;
pub const GL_STACK_UNDERFLOW = 1284;
pub const GL_INT16_VEC4_NV = 36839;
pub const GL_INVALID_FRAMEBUFFER_OPERATION_EXT = 1286;
pub const GL_OBJECT_SUBTYPE_ARB = 35663;
pub const GL_COLOR_MATRIX = 32945;
pub const GL_MAX_FRAMEZOOM_FACTOR_SGIX = 33165;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB = 34071;
pub const GL_GEOMETRY_INPUT_TYPE_EXT = 36315;
pub const GL_PIXEL_SUBSAMPLE_4242_SGIX = 34212;
pub const GL_UNSIGNED_INT_VEC3_EXT = 36295;
pub const GL_OPERAND0_ALPHA = 34200;
pub const GL_NVX_linked_gpu_multicast = 1;
pub const GL_ALPHA32UI_EXT = 36210;
pub const GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD = 1;
pub const GL_MAP2_VERTEX_ATTRIB4_4_NV = 34420;
pub const GL_COMMAND_BARRIER_BIT_EXT = 64;
pub const GL_SLUMINANCE = 35910;
pub const GL_NUM_TILING_TYPES_EXT = 38274;
pub const GL_SAMPLE_MASK_VALUE = 36434;
pub const GL_FIRST_TO_REST_NV = 37039;
pub const GL_TEXTURE_COLOR_WRITEMASK_SGIS = 33263;
pub const GL_FOG_COORDINATE_ARRAY_EXT = 33879;
pub const GL_FASTEST = 4353;
pub const GL_DEBUG_TYPE_PUSH_GROUP = 33385;
pub const GL_EXT_bgra = 1;
pub const GL_DUAL_LUMINANCE_ALPHA4_SGIS = 33052;
pub const GL_DEPTH = 6145;
pub const GL_LUMINANCE12_ALPHA4 = 32838;
pub const GL_MAX_MODELVIEW_STACK_DEPTH = 3382;
pub const GL_HISTOGRAM_SINK_EXT = 32813;
pub const GL_FLOAT_VEC2_ARB = 35664;
pub const GL_VIBRANCE_BIAS_NV = 34585;
pub const GL_RENDERBUFFER = 36161;
pub const GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB = 36321;
pub const GL_WRITE_ONLY = 35001;
pub const GL_UNSIGNED_INT_S8_S8_8_8_NV = 34522;
pub const GL_LUMINANCE4_ALPHA4_EXT = 32835;
pub const GL_CLOSE_PATH_NV = 0;
pub const GL_INT_SAMPLER_1D = 36297;
pub const GL_UNSIGNED_INT_SAMPLER_2D = 36306;
pub const GL_2PASS_0_SGIS = 32930;
pub const GL_CURRENT_PROGRAM = 35725;
pub const GL_UNSIGNALED = 37144;
pub const GL_PATH_END_CAPS_NV = 36982;
pub const GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI = 32949;
pub const GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB = 36875;
pub const GL_SYNC_CL_EVENT_COMPLETE_ARB = 33345;
pub const GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV = 37698;
pub const GL_MAX_FRAGMENT_LIGHTS_SGIX = 33796;
pub const GL_V3F = 10785;
pub const GL_SGIX_fog_offset = 1;
pub const GL_ATOMIC_COUNTER_BUFFER_START = 37570;
pub const GL_ARB_direct_state_access = 1;
pub const GL_MAP1_VERTEX_ATTRIB7_4_NV = 34407;
pub const GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT = 36310;
pub const GL_OPERAND1_RGB = 34193;
pub const GL_COMBINE4_NV = 34051;
pub const GL_SAMPLER_2D_RECT_ARB = 35683;
pub const GL_T2F_IUI_N3F_V3F_EXT = 33204;
pub const GL_COLOR_ATTACHMENT6 = 36070;
pub const GL_ATI_map_object_buffer = 1;
pub const GL_SAMPLES_EXT = 32937;
pub const GL_SRGB_EXT = 35904;
pub const GL_IMAGE_3D = 36942;
pub const GL_COLOR_RENDERABLE = 33414;
pub const GL_DRAW_BUFFER7_ARB = 34860;
pub const GL_PIXELS_PER_SAMPLE_PATTERN_X_AMD = 37294;
pub const GL_NV_bindless_texture = 1;
pub const GL_RED_NV = 6403;
pub const GL_SAMPLE_MASK_NV = 36433;
pub const GL_BLEND_DST_RGB_EXT = 32968;
pub const GL_ONE_MINUS_CONSTANT_COLOR = 32770;
pub const GL_EXT_framebuffer_multisample_blit_scaled = 1;
pub const GL_OUTPUT_TEXTURE_COORD17_EXT = 34734;
pub const GL_ARB_draw_instanced = 1;
pub const GL_NV_vertex_array_range2 = 1;
pub const GL_PERFMON_RESULT_SIZE_AMD = 35781;
pub const GL_INT16_NV = 36836;
pub const GL_PIXEL_TEX_GEN_SGIX = 33081;
pub const GL_STORAGE_CLIENT_APPLE = 34228;
pub const GL_AUX0 = 1033;
pub const GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV = 37053;
pub const GL_1PASS_EXT = 32929;
pub const GL_NORMALIZE = 2977;
pub const GL_RENDERBUFFER_COLOR_SAMPLES_NV = 36368;
pub const GL_MATRIX25_ARB = 35033;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB = 34074;
pub const GL_DRAW_ARRAYS_STRIP_COMMAND_NV = 5;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = 35983;
pub const GL_SIGNED_RGB_UNSIGNED_ALPHA_NV = 34572;
pub const GL_TANGENT_ARRAY_STRIDE_EXT = 33855;
pub const GL_Z4Y12Z4CB12Z4CR12_444_NV = 36919;
pub const GL_NATIVE_GRAPHICS_END_HINT_PGI = 107012;
pub const GL_OUTPUT_TEXTURE_COORD2_EXT = 34719;
pub const GL_FLOAT_RG32_NV = 34951;
pub const GL_FOG_SPECULAR_TEXTURE_WIN = 33004;
pub const GL_PERFQUERY_GLOBAL_CONTEXT_INTEL = 1;
pub const GL_UNSIGNED_INT = 5125;
pub const GL_EXT_geometry_shader4 = 1;
pub const GL_COMBINER_SUM_OUTPUT_NV = 34124;
pub const GL_DRAW_BUFFER12_ARB = 34865;
pub const GL_POLYGON_STIPPLE_BIT = 16;
pub const GL_UNSIGNED_INT64_VEC3_ARB = 36854;
pub const GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT = 34894;
pub const GL_RED_SNORM = 36752;
pub const GL_MAX_DEBUG_LOGGED_MESSAGES = 37188;
pub const GL_LINE_WIDTH_COMMAND_NV = 13;
pub const GL_DECR_WRAP_EXT = 34056;
pub const GL_POLYGON_OFFSET_FILL = 32823;
pub const GL_COMBINER5_NV = 34133;
pub const GL_TEXTURE_COORD_ARRAY_STRIDE = 32906;
pub const GL_PROGRAM_FORMAT_ARB = 34934;
pub const GL_STENCIL_CLEAR_TAG_VALUE_EXT = 35059;
pub const GL_ZERO_TO_ONE = 37727;
pub const GL_MATRIX26_ARB = 35034;
pub const GL_COMPUTE_SHADER_INVOCATIONS_ARB = 33525;
pub const GL_PIXEL_MIN_FILTER_EXT = 33586;
pub const GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT = 36495;
pub const GL_UNIFORM_BLOCK = 37602;
pub const GL_CURRENT_QUERY_ARB = 34917;
pub const GL_RGBA_FLOAT16_ATI = 34842;
pub const GL_MULTIPLY_KHR = 37524;
pub const GL_LIGHT_MODEL_COLOR_CONTROL_EXT = 33272;
pub const GL_MAX_DEPTH_STENCIL_FRAMEBUFFER_SAMPLES_AMD = 37301;
pub const GL_TEXTURE27 = 34011;
pub const GL_COMPUTE_TEXTURE = 33440;
pub const GL_LUMINANCE_ALPHA32F_ARB = 34841;
pub const GL_MATRIX19_ARB = 35027;
pub const GL_VERSION = 7938;
pub const GL_UNSIGNED_SHORT_1_15_REV_MESA = 34644;
pub const GL_SAMPLE_ALPHA_TO_MASK_SGIS = 32926;
pub const GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV = 34099;
pub const GL_ADJACENT_PAIRS_NV = 37038;
pub const GL_UNIFORM_NAME_LENGTH = 35385;
pub const GL_CURRENT_MATRIX_STACK_DEPTH_NV = 34368;
pub const GL_QUERY_BY_REGION_NO_WAIT_NV = 36374;
pub const GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = 3387;
pub const GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB = 33516;
pub const GL_CLIP_ORIGIN = 37724;
pub const GL_HARDLIGHT_KHR = 37531;
pub const GL_DUAL_ALPHA8_SGIS = 33041;
pub const GL_ARB_shader_group_vote = 1;
pub const GL_COUNTER_RANGE_AMD = 35777;
pub const GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI = 34869;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT = 36050;
pub const GL_NV_texture_rectangle_compressed = 1;
pub const GL_COLOR_ATTACHMENT11 = 36075;
pub const GL_MAX_VERTEX_SHADER_INVARIANTS_EXT = 34759;
pub const GL_EXT_sparse_texture2 = 1;
pub const GL_DRAW_INDIRECT_BUFFER_BINDING = 36675;
pub const GL_FENCE_APPLE = 35339;
pub const GL_DYNAMIC_ATI = 34657;
pub const GL_COLOR_ARRAY = 32886;
pub const GL_LUMINANCE_ALPHA_FLOAT16_APPLE = 34847;
pub const GL_PARAMETER_BUFFER = 33006;
pub const GL_NEAREST_CLIPMAP_NEAREST_SGIX = 33869;
pub const GL_ONE_MINUS_SRC1_ALPHA = 35067;
pub const GL_IMAGE_2D_ARRAY = 36947;
pub const GL_VARIANT_VALUE_EXT = 34788;
pub const GL_ALPHA_FLOAT16_ATI = 34844;
pub const GL_CON_28_ATI = 35165;
pub const GL_STENCIL_BACK_PASS_DEPTH_PASS = 34819;
pub const GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT = 36311;
pub const GL_PACK_IMAGE_HEIGHT_EXT = 32876;
pub const GL_MODELVIEW25_ARB = 34617;
pub const GL_REFERENCED_BY_VERTEX_SHADER = 37638;
pub const GL_DIFFUSE = 4609;
pub const GL_NV_fence = 1;
pub const GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT = 35954;
pub const GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN = 34243;
pub const GL_SAMPLES_PASSED_ARB = 35092;
pub const GL_TEXTURE_RECTANGLE_ARB = 34037;
pub const GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS = 37078;
pub const GL_ARB_compressed_texture_pixel_storage = 1;
pub const GL_READ_BUFFER = 3074;
pub const GL_CURRENT_FOG_COORD = 33875;
pub const GL_UNSIGNED_IDENTITY_NV = 34102;
pub const GL_ALIASED_POINT_SIZE_RANGE = 33901;
pub const GL_COLOR_ARRAY_POINTER_EXT = 32912;
pub const GL_ELEMENT_ARRAY_UNIFIED_NV = 36639;
pub const GL_DOUBLE_MAT4x3_EXT = 36686;
pub const GL_UNSIGNED_SHORT_8_8_APPLE = 34234;
pub const GL_INTENSITY8 = 32843;
pub const GL_REG_10_ATI = 35115;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT = 34071;
pub const GL_MAX_GEOMETRY_SHADER_INVOCATIONS = 36442;
pub const GL_INTENSITY32F_ARB = 34839;
pub const GL_CULL_FRAGMENT_NV = 34535;
pub const GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS = 36483;
pub const GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV = 34938;
pub const GL_BLEND_DST = 3040;
pub const GL_TEXTURE_COORD_ARRAY_TYPE = 32905;
pub const GL_VIEWPORT_SWIZZLE_W_NV = 37723;
pub const GL_EIGHTH_BIT_ATI = 32;
pub const GL_BLUE_MIN_CLAMP_INGR = 34146;
pub const GL_COMPRESSED_SIGNED_RED_RGTC1 = 36284;
pub const GL_TRANSFORM_FEEDBACK_VARYINGS = 35971;
pub const GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV = 36650;
pub const GL_NV_float_buffer = 1;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 36050;
pub const GL_TEXTURE_FLOAT_COMPONENTS_NV = 34956;
pub const GL_CLIENT_VERTEX_ARRAY_BIT = 2;
pub const GL_MAP2_VERTEX_ATTRIB10_4_NV = 34426;
pub const GL_COLOR_ATTACHMENT7 = 36071;
pub const GL_MATRIX17_ARB = 35025;
pub const GL_SAMPLER_1D_ARB = 35677;
pub const GL_POST_TEXTURE_FILTER_BIAS_SGIX = 33145;
pub const GL_COLOR_TABLE_FORMAT_SGI = 32984;
pub const GL_FRAGMENT_COLOR_MATERIAL_SGIX = 33793;
pub const GL_MATRIX6_NV = 34358;
pub const GL_VERTEX_ELEMENT_SWIZZLE_AMD = 37284;
pub const GL_DEPTH_RENDERABLE = 33415;
pub const GL_DRAW_BUFFER = 3073;
pub const GL_ELEMENT_ARRAY_BARRIER_BIT = 2;
pub const GL_POINT_SIZE_MIN_ARB = 33062;
pub const GL_DOT_PRODUCT_NV = 34540;
pub const GL_CONSTANT_ATTENUATION = 4615;
pub const GL_FOG_COORDINATE = 33873;
pub const GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 35661;
pub const GL_DRAW_BUFFER14_ATI = 34867;
pub const GL_TEXTURE_2D_ARRAY_EXT = 35866;
pub const GL_FRAGMENT_LIGHT5_SGIX = 33809;
pub const GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = 35722;
pub const GL_MAX_CUBE_MAP_TEXTURE_SIZE = 34076;
pub const GL_DISCARD_ATI = 34659;
pub const GL_ALPHA_SNORM = 36880;
pub const GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = 37082;
pub const GL_TEXTURE_DEFORMATION_BIT_SGIX = 1;
pub const GL_VARIABLE_E_NV = 34087;
pub const GL_REFERENCED_BY_FRAGMENT_SHADER = 37642;
pub const GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT = 32;
pub const GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE = 35333;
pub const GL_TEXTURE5_ARB = 33989;
pub const GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB = 36877;
pub const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT = 36971;
pub const GL_SAMPLE_LOCATION_ARB = 36432;
pub const GL_INT_IMAGE_2D_MULTISAMPLE = 36960;
pub const GL_APPLE_vertex_array_object = 1;
pub const GL_TEXTURE_RECTANGLE = 34037;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB = 34070;
pub const GL_AMD_conservative_depth = 1;
pub const GL_PACK_SKIP_PIXELS = 3332;
pub const GL_MAX_GENERAL_COMBINERS_NV = 34125;
pub const GL_PERFQUERY_COUNTER_EVENT_INTEL = 38128;
pub const GL_POINT_FADE_THRESHOLD_SIZE_EXT = 33064;
pub const GL_MAP2_VERTEX_ATTRIB13_4_NV = 34429;
pub const GL_ALPHA12_EXT = 32829;
pub const GL_CLAMP_FRAGMENT_COLOR_ARB = 35099;
pub const GL_EMISSION = 5632;
pub const GL_CW = 2304;
pub const GL_SOURCE0_RGB = 34176;
pub const GL_BUMP_TEX_UNITS_ATI = 34680;
pub const GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI = 34819;
pub const GL_DEPTH_STENCIL_MESA = 34640;
pub const GL_INT_IMAGE_CUBE = 36955;
pub const GL_IMAGE_BINDING_NAME_EXT = 36666;
pub const GL_MULTISAMPLE_ARB = 32925;
pub const GL_INVERSE_TRANSPOSE_NV = 34349;
pub const GL_COLOR_MATERIAL = 2903;
pub const GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT = 34763;
pub const GL_VARIANT_ARRAY_POINTER_EXT = 34793;
pub const GL_BYTE = 5120;
pub const GL_COLOR_MATRIX_STACK_DEPTH = 32946;
pub const GL_COLOR_TABLE_ALPHA_SIZE = 32989;
pub const GL_TEXTURE28 = 34012;
pub const GL_ALWAYS_SOFT_HINT_PGI = 107021;
pub const GL_TEXTURE_ENV_COLOR = 8705;
pub const GL_VIEW_CLASS_32_BITS = 33480;
pub const GL_OUTPUT_TEXTURE_COORD19_EXT = 34736;
pub const GL_LINE_STIPPLE = 2852;
pub const GL_MATRIX2_NV = 34354;
pub const GL_CON_25_ATI = 35162;
pub const GL_MAP2_VERTEX_ATTRIB3_4_NV = 34419;
pub const GL_MAX_LIST_NESTING = 2865;
pub const GL_POST_CONVOLUTION_ALPHA_BIAS_EXT = 32803;
pub const GL_PATH_TERMINAL_END_CAP_NV = 36984;
pub const GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT = 4;
pub const GL_MAP1_GRID_DOMAIN = 3536;
pub const GL_DRAW_BUFFER5_ARB = 34858;
pub const GL_TEXTURE_VIEW = 33461;
pub const GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV = 36647;
pub const GL_RGBA_FLOAT_MODE_ARB = 34848;
pub const GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB = 34987;
pub const GL_INDEX_LOGIC_OP = 3057;
pub const GL_PROXY_HISTOGRAM = 32805;
pub const GL_NORMAL_MAP = 34065;
pub const GL_REPLACEMENT_CODE_SUN = 33240;
pub const GL_COLOR_ATTACHMENT10 = 36074;
pub const GL_RGB8UI_EXT = 36221;
pub const GL_NV_parameter_buffer_object2 = 1;
pub const GL_ELEMENT_ARRAY_POINTER_ATI = 34666;
pub const GL_TYPE = 37626;
pub const GL_RENDERER = 7937;
pub const GL_DEPTH_STENCIL_TEXTURE_MODE = 37098;
pub const GL_LUMINANCE_ALPHA_SNORM = 36882;
pub const GL_SPRITE_EYE_ALIGNED_SGIX = 33102;
pub const GL_MULTISAMPLES_NV = 37745;
pub const GL_R8UI = 33330;
pub const GL_TEXTURE_BINDING_CUBE_MAP = 34068;
pub const GL_DEPENDENT_AR_TEXTURE_2D_NV = 34537;
pub const GL_POINT_SIZE_MAX = 33063;
pub const GL_FOG_COORDINATE_SOURCE_EXT = 33872;
pub const GL_TEXTURE = 5890;
pub const GL_VERTEX_ATTRIB_RELATIVE_OFFSET = 33493;
pub const GL_UNSIGNED_INT_IMAGE_1D = 36962;
pub const GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = 36383;
pub const GL_OFFSET_HILO_TEXTURE_2D_NV = 34900;
pub const GL_GEOMETRY_PROGRAM_NV = 35878;
pub const GL_QUERY_BY_REGION_WAIT_INVERTED = 36377;
pub const GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE = 37592;
pub const GL_RGBA16F_ARB = 34842;
pub const GL_SOFTLIGHT_KHR = 37532;
pub const GL_OP_MULTIPLY_MATRIX_EXT = 34712;
pub const GL_COLOR_ATTACHMENT4 = 36068;
pub const GL_UNSIGNED_INT_IMAGE_2D_RECT = 36965;
pub const GL_MULTISAMPLE_BIT_EXT = 536870912;
pub const GL_TEXTURE_BINDING_RENDERBUFFER_NV = 36435;
pub const GL_MODELVIEW24_ARB = 34616;
pub const GL_OFFSET_TEXTURE_MATRIX_NV = 34529;
pub const GL_W_EXT = 34776;
pub const GL_ASYNC_READ_PIXELS_SGIX = 33630;
pub const GL_INT_IMAGE_2D_ARRAY = 36958;
pub const GL_SUBSAMPLE_DISTANCE_AMD = 34879;
pub const GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD = 2;
pub const GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE = 35331;
pub const GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = 37079;
pub const GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES = 35739;
pub const GL_POINT_SPRITE = 34913;
pub const GL_MATRIX3_ARB = 35011;
pub const GL_MODELVIEW5_ARB = 34597;
pub const GL_IMAGE_BINDING_ACCESS = 36670;
pub const GL_R8I = 33329;
pub const GL_R1UI_T2F_C4F_N3F_V3F_SUN = 34251;
pub const GL_ONE_MINUS_DST_ALPHA = 773;
pub const GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV = 37020;
pub const GL_CONSERVE_MEMORY_HINT_PGI = 107005;
pub const GL_TEXTURE_SHARED_SIZE_EXT = 35903;
pub const GL_UNPACK_CLIENT_STORAGE_APPLE = 34226;
pub const GL_DEBUG_TYPE_POP_GROUP = 33386;
pub const GL_TESS_EVALUATION_SHADER_INVOCATIONS = 33522;
pub const GL_4PASS_0_EXT = 32932;
pub const GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 36055;
pub const GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT = 16384;
pub const GL_COMPRESSED_RGBA_ASTC_5x5_KHR = 37810;
pub const GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT = 34762;
pub const GL_VERTEX_ATTRIB_ARRAY7_NV = 34391;
pub const GL_BLEND_SRC_ALPHA = 32971;
pub const GL_STENCIL_BACK_FAIL_ATI = 34817;
pub const GL_SINGLE_COLOR = 33273;
pub const GL_COUNT_DOWN_NV = 37001;
pub const GL_FLOAT_MAT2x3 = 35685;
pub const GL_LINEAR_DETAIL_COLOR_SGIS = 32921;
pub const GL_SHADER_IMAGE_ATOMIC = 33446;
pub const GL_RETURN = 258;
pub const GL_EXT_external_buffer = 1;
pub const GL_PRIMITIVES_SUBMITTED = 33519;
pub const GL_MAP2_VERTEX_ATTRIB5_4_NV = 34421;
pub const GL_QUERY_RESULT_NO_WAIT = 37268;
pub const GL_GREEN_NV = 6404;
pub const GL_RGBA8UI_EXT = 36220;
pub const GL_PIXEL_MAP_I_TO_G_SIZE = 3251;
pub const GL_ARRAY_ELEMENT_LOCK_FIRST_EXT = 33192;
pub const GL_SEPARATE_ATTRIBS = 35981;
pub const GL_ARB_texture_mirrored_repeat = 1;
pub const GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT = 36320;
pub const GL_LIGHT_MODEL_TWO_SIDE = 2898;
pub const GL_TEXTURE29 = 34013;
pub const GL_IMAGE_BINDING_ACCESS_EXT = 36670;
pub const GL_TRANSPOSE_PROJECTION_MATRIX = 34020;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR = 37840;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 36051;
pub const GL_EMBOSS_MAP_NV = 34143;
pub const GL_SYSTEM_FONT_NAME_NV = 36979;
pub const GL_MIRROR_CLAMP_ATI = 34626;
pub const GL_HISTOGRAM_GREEN_SIZE_EXT = 32809;
pub const GL_POINT_FADE_THRESHOLD_SIZE = 33064;
pub const GL_CONVOLUTION_1D = 32784;
pub const GL_TEXTURE_COMPARE_MODE_ARB = 34892;
pub const GL_HANDLE_TYPE_D3D11_IMAGE_EXT = 38283;
pub const GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB = 33346;
pub const GL_PATH_TRANSPOSE_PROJECTION_MATRIX_NV = 34020;
pub const GL_CONTEXT_FLAGS = 33310;
pub const GL_SAMPLER_BUFFER_EXT = 36290;
pub const GL_NEGATIVE_Y_EXT = 34778;
pub const GL_FRAGMENT_SHADER_ARB = 35632;
pub const GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV = 36902;
pub const GL_COLOR_ATTACHMENT13 = 36077;
pub const GL_DEBUG_TYPE_PERFORMANCE = 33360;
pub const GL_FOG_INDEX = 2913;
pub const GL_VERTEX_PROGRAM_ARB = 34336;
pub const GL_ELEMENT_ARRAY_ATI = 34664;
pub const GL_COMPRESSED_RGBA_ASTC_10x8_KHR = 37818;
pub const GL_SGIX_sprite = 1;
pub const GL_PALETTE8_RGBA4_OES = 35736;
pub const GL_SHADER_TYPE = 35663;
pub const GL_PROGRAM_TEMPORARIES_ARB = 34980;
pub const GL_MAX_SHININESS_NV = 34052;
pub const GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE = 35330;
pub const GL_CONVOLUTION_FILTER_BIAS = 32789;
pub const GL_PROJECTION_MATRIX = 2983;
pub const GL_UNIFORM_BUFFER = 35345;
pub const GL_STENCIL_INDEX16 = 36169;
pub const GL_PIXEL_TILE_GRID_WIDTH_SGIX = 33090;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_START_NV = 35972;
pub const GL_MAX_ASYNC_HISTOGRAM_SGIX = 33581;
pub const GL_FOG_COORDINATE_ARRAY_STRIDE = 33877;
pub const GL_SRC2_ALPHA = 34186;
pub const GL_SAMPLER_1D_ARRAY = 36288;
pub const GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN = 34242;
pub const GL_UNIFORM_BARRIER_BIT_EXT = 4;
pub const GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB = 35885;
pub const GL_EXT_vertex_shader = 1;
pub const GL_ARB_conservative_depth = 1;
pub const GL_VERTEX_ATTRIB_ARRAY13_NV = 34397;
pub const GL_RGBA16F = 34842;
pub const GL_TIME_ELAPSED_EXT = 35007;
pub const GL_APPLE_ycbcr_422 = 1;
pub const GL_UNSIGNED_INT_5_9_9_9_REV = 35902;
pub const GL_TESS_EVALUATION_TEXTURE = 33437;
pub const GL_TEXTURE_INDEX_SIZE_EXT = 33005;
pub const GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT = 36970;
pub const GL_AMD_stencil_operation_extended = 1;
pub const GL_SRC_OUT_NV = 37516;
pub const GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = 35394;
pub const GL_TESS_GEN_VERTEX_ORDER = 36472;
pub const GL_TEXTURE28_ARB = 34012;
pub const GL_CONVOLUTION_1D_EXT = 32784;
pub const GL_EVAL_TRIANGULAR_2D_NV = 34497;
pub const GL_PALETTE4_RGBA4_OES = 35731;
pub const GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV = 36638;
pub const GL_PREVIOUS_ARB = 34168;
pub const GL_COLOR_ATTACHMENT5 = 36069;
pub const GL_FOG_OFFSET_SGIX = 33176;
pub const GL_OUTPUT_TEXTURE_COORD27_EXT = 34744;
pub const GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS = 36423;
pub const GL_INTERNALFORMAT_GREEN_SIZE = 33394;
pub const GL_MATRIX_INDEX_ARRAY_SIZE_ARB = 34886;
pub const GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT = 37279;
pub const GL_TEXTURE_CUBE_MAP_ARRAY = 36873;
pub const GL_MATRIX6_ARB = 35014;
pub const GL_FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT = 35410;
pub const GL_BITMAP_TOKEN = 1796;
pub const GL_SAMPLER_2D_SHADOW = 35682;
pub const GL_REFLECTION_MAP_ARB = 34066;
pub const GL_PACK_SKIP_ROWS = 3331;
pub const GL_NV_geometry_program4 = 1;
pub const GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 34824;
pub const GL_AMD_shader_image_load_store_lod = 1;
pub const GL_ARB_multi_bind = 1;
pub const GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 34994;
pub const GL_INTENSITY4_EXT = 32842;
pub const GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB = 35658;
pub const GL_MAP1_VERTEX_ATTRIB5_4_NV = 34405;
pub const GL_DOUBLE_MAT2x4_EXT = 36682;
pub const GL_MAX_FRAMEBUFFER_WIDTH = 37653;
pub const GL_OBJECT_LINEAR = 9217;
pub const GL_RGBA16UI_EXT = 36214;
pub const GL_CURRENT_RASTER_SECONDARY_COLOR = 33887;
pub const GL_IMAGE_2D_ARRAY_EXT = 36947;
pub const GL_DST_ATOP_NV = 37519;
pub const GL_CURRENT_BINORMAL_EXT = 33852;
pub const GL_ALPHA_MAX_CLAMP_INGR = 34151;
pub const GL_TESS_EVALUATION_PROGRAM_NV = 35103;
pub const GL_TEXTURE_TARGET = 4102;
pub const GL_DOUBLE_MAT3x4_EXT = 36684;
pub const GL_MAX_TEXTURE_IMAGE_UNITS_ARB = 34930;
pub const GL_MAX_PROGRAM_SUBROUTINE_NUM_NV = 36677;
pub const GL_ARB_robustness_isolation = 1;
pub const GL_RGBA4_EXT = 32854;
pub const GL_UNSIGNED_SHORT_5_5_5_1_EXT = 32820;
pub const GL_ARB_vertex_type_2_10_10_10_rev = 1;
pub const GL_TRANSPOSE_PROGRAM_MATRIX_EXT = 36398;
pub const GL_SOURCE0_ALPHA_EXT = 34184;
pub const GL_MAP2_VERTEX_ATTRIB11_4_NV = 34427;
pub const GL_FLOAT_MAT2x4 = 35686;
pub const GL_RENDERBUFFER_DEPTH_SIZE = 36180;
pub const GL_NV_copy_depth_to_color = 1;
pub const GL_INTERNALFORMAT_RED_TYPE = 33400;
pub const GL_QUERY_COUNTER_BITS_ARB = 34916;
pub const GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE = 35336;
pub const GL_AMD_texture_gather_bias_lod = 1;
pub const GL_STENCIL_BACK_VALUE_MASK = 36004;
pub const GL_EXT_memory_object_win32 = 1;
pub const GL_SIGNED_INTENSITY8_NV = 34568;
pub const GL_FIXED_ONLY = 35101;
pub const GL_TEXTURE_1D_BINDING_EXT = 32872;
pub const GL_CONTRAST_NV = 37537;
pub const GL_COLOR_ATTACHMENT13_EXT = 36077;
pub const GL_PROGRAM_ERROR_POSITION_NV = 34379;
pub const GL_ARB_texture_cube_map_array = 1;
pub const GL_RGB_SCALE_EXT = 34163;
pub const GL_AND = 5377;
pub const GL_MODELVIEW7_ARB = 34599;
pub const GL_DSDT_NV = 34549;
pub const GL_DOUBLE_MAT2x4 = 36682;
pub const GL_CURRENT_RASTER_POSITION = 2823;
pub const GL_INT_IMAGE_3D_EXT = 36953;
pub const GL_MAX_PROGRAM_IF_DEPTH_NV = 35062;
pub const GL_GEOMETRY_DEFORMATION_BIT_SGIX = 2;
pub const GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI = 32978;
pub const GL_TEXTURE_CUBE_MAP_SEAMLESS = 34895;
pub const GL_ARB_pipeline_statistics_query = 1;
pub const GL_VOLATILE_APPLE = 35354;
pub const GL_REG_5_ATI = 35110;
pub const GL_SPRITE_TRANSLATION_SGIX = 33099;
pub const GL_VIEW_CLASS_S3TC_DXT3_RGBA = 33486;
pub const GL_ACTIVE_VARYINGS_NV = 35969;
pub const GL_EXT_direct_state_access = 1;
pub const GL_ACCUM_BLUE_BITS = 3418;
pub const GL_TEXTURE_COORD_ARRAY_COUNT_EXT = 32907;
pub const GL_DEPTH_BOUNDS_EXT = 34961;
pub const GL_FRAGMENT_SHADER_INVOCATIONS_ARB = 33524;
pub const GL_TEXTURE31 = 34015;
pub const GL_COLOR_INDEX4_EXT = 32996;
pub const GL_FRAGMENT_LIGHT6_SGIX = 33810;
pub const GL_LINEARBURN_NV = 37541;
pub const GL_COLOR_ATTACHMENT12 = 36076;
pub const GL_EXT_depth_bounds_test = 1;
pub const GL_INVARIANT_DATATYPE_EXT = 34795;
pub const GL_LARGE_CCW_ARC_TO_NV = 22;
pub const GL_EXTENSIONS = 7939;
pub const GL_RENDERBUFFER_GREEN_SIZE_EXT = 36177;
pub const GL_SGIX_calligraphic_fragment = 1;
pub const GL_COLOR_ATTACHMENT5_EXT = 36069;
pub const GL_DRAW_BUFFER13_ATI = 34866;
pub const GL_RGB8UI = 36221;
pub const GL_EXT_packed_pixels = 1;
pub const GL_DEBUG_TYPE_MARKER = 33384;
pub const GL_RGB16I = 36233;
pub const GL_ATTRIB_ARRAY_SIZE_NV = 34339;
pub const GL_TEXTURE_MIN_FILTER = 10241;
pub const GL_OUTPUT_TEXTURE_COORD22_EXT = 34739;
pub const GL_PERFQUERY_COUNTER_RAW_INTEL = 38132;
pub const GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = 36480;
pub const GL_S = 8192;
pub const GL_CON_1_ATI = 35138;
pub const GL_COMPRESSED_RGBA_ASTC_5x4_KHR = 37809;
pub const GL_TEXTURE_CLIPMAP_DEPTH_SGIX = 33142;
pub const GL_OPERAND2_RGB = 34194;
pub const GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV = 35069;
pub const GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI = 34804;
pub const GL_RESAMPLE_DECIMATE_OML = 35209;
pub const GL_INDEX_BITS = 3409;
pub const GL_POINT_SMOOTH_HINT = 3153;
pub const GL_TEXTURE_BINDING_RECTANGLE = 34038;
pub const GL_LUMINANCE16UI_EXT = 36218;
pub const GL_EXT_secondary_color = 1;
pub const GL_MAX_SAMPLES = 36183;
pub const GL_ARB_texture_storage_multisample = 1;
pub const GL_UNIFORM_BUFFER_BINDING_EXT = 36335;
pub const GL_QUERY_WAIT_INVERTED = 36375;
pub const GL_CON_5_ATI = 35142;
pub const GL_OBJECT_ACTIVE_ATTRIBUTES_ARB = 35721;
pub const GL_OVERLAY_KHR = 37526;
pub const GL_VIEWPORT_SWIZZLE_NEGATIVE_W_NV = 37719;
pub const GL_RGB4 = 32847;
pub const GL_POINT_SMOOTH = 2832;
pub const GL_NV_present_video = 1;
pub const GL_FRONT_LEFT = 1024;
pub const GL_TEXTURE_LOD_BIAS_S_SGIX = 33166;
pub const GL_RGB_FLOAT16_APPLE = 34843;
pub const GL_FLOAT_RGB_NV = 34946;
pub const GL_BLEND_SRC_RGB_EXT = 32969;
pub const GL_IMAGE_BINDING_NAME = 36666;
pub const GL_3D_COLOR_TEXTURE = 1539;
pub const GL_DRAW_BUFFER7_ATI = 34860;
pub const GL_MODELVIEW26_ARB = 34618;
pub const GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB = 34338;
pub const GL_CURRENT_RASTER_COLOR = 2820;
pub const GL_PIXEL_MAP_R_TO_R = 3190;
pub const GL_CON_29_ATI = 35166;
pub const GL_MAP1_NORMAL = 3474;
pub const GL_BUFFER_SERIALIZED_MODIFY_APPLE = 35346;
pub const GL_INT_VEC2_ARB = 35667;
pub const GL_TRANSFORM_FEEDBACK_OVERFLOW = 33516;
pub const GL_TEXTURE_VIEW_NUM_LAYERS = 33502;
pub const GL_INTERPOLATE_ARB = 34165;
pub const GL_CONVOLUTION_FILTER_BIAS_EXT = 32789;
pub const GL_FONT_UNAVAILABLE_NV = 37738;
pub const GL_MODELVIEW22_ARB = 34614;
pub const GL_CALLIGRAPHIC_FRAGMENT_SGIX = 33155;
pub const GL_DISCARD_NV = 34096;
pub const GL_POLYGON_STIPPLE = 2882;
pub const GL_INDEX_ARRAY_TYPE = 32901;
pub const GL_ROUNDED_RECT2_NV = 234;
pub const GL_DSDT_MAG_VIB_NV = 34551;
pub const GL_SPRITE_MODE_SGIX = 33097;
pub const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE = 36971;
pub const GL_RELATIVE_HORIZONTAL_LINE_TO_NV = 7;
pub const GL_TEXTURE_CUBE_MAP_EXT = 34067;
pub const GL_FORMAT_SUBSAMPLE_244_244_OML = 35203;
pub const GL_ATTENUATION_EXT = 33613;
pub const GL_IMAGE_2D_MULTISAMPLE_EXT = 36949;
pub const GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB = 37698;
pub const GL_SPARE0_PLUS_SECONDARY_COLOR_NV = 34098;
pub const GL_TESS_CONTROL_TEXTURE = 33436;
pub const GL_MOV_ATI = 35169;
pub const GL_LINEAR_CLIPMAP_LINEAR_SGIX = 33136;
pub const GL_TRANSFORM_FEEDBACK_VARYING = 37620;
pub const GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV = 15;
pub const GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 34978;
pub const GL_POST_CONVOLUTION_RED_BIAS_EXT = 32800;
pub const GL_RGB8I = 36239;
pub const GL_NV_conservative_raster_pre_snap = 1;
pub const GL_CLIPPING_OUTPUT_PRIMITIVES_ARB = 33527;
pub const GL_TRANSFORM_FEEDBACK_RECORD_NV = 35974;
pub const GL_SRC1_ALPHA = 34185;
pub const GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS = 33621;
pub const GL_EYE_PLANE_ABSOLUTE_NV = 34140;
pub const GL_MULTISAMPLE_BIT_3DFX = 536870912;
pub const GL_FONT_ASCENDER_BIT_NV = 2097152;
pub const GL_LUMINANCE_ALPHA = 6410;
pub const GL_TRIANGLE_FAN = 6;
pub const GL_VIRTUAL_PAGE_SIZE_INDEX_ARB = 37287;
pub const GL_AMD_shader_explicit_vertex_parameter = 1;
pub const GL_VERTEX_PRECLIP_SGIX = 33774;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR = 38448;
pub const GL_TEXTURE_GEN_T = 3169;
pub const GL_COMPRESSED_SRGB_ALPHA = 35913;
pub const GL_INT_SAMPLER_2D = 36298;
pub const GL_AMD_sample_positions = 1;
pub const GL_NUM_INSTRUCTIONS_TOTAL_ATI = 35186;
pub const GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT = 36323;
pub const GL_TEXTURE_STENCIL_SIZE_EXT = 35057;
pub const GL_DUAL_INTENSITY12_SGIS = 33050;
pub const GL_OBJECT_POINT_SGIS = 33269;
pub const GL_MAX_FRAGMENT_UNIFORM_VECTORS = 36349;
pub const GL_MODELVIEW0_STACK_DEPTH_EXT = 2979;
pub const GL_ALPHA16 = 32830;
pub const GL_SUPERSAMPLE_SCALE_X_NV = 37746;
pub const GL_COLOR_ATTACHMENT7_EXT = 36071;
pub const GL_LUMINANCE_ALPHA32UI_EXT = 36213;
pub const GL_ELEMENT_ARRAY_APPLE = 35340;
pub const GL_TEXTURE_ALPHA_SIZE = 32863;
pub const GL_COMPRESSED_SIGNED_R11_EAC = 37489;
pub const GL_VIEW_CLASS_128_BITS = 33476;
pub const GL_PATH_DASH_ARRAY_COUNT_NV = 37023;
pub const GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV = 36922;
pub const GL_EXT_rescale_normal = 1;
pub const GL_GEOMETRY_INPUT_TYPE = 35095;
pub const GL_DOT_PRODUCT_DEPTH_REPLACE_NV = 34541;
pub const GL_ARB_multisample = 1;
pub const GL_T2F_C4UB_V3F = 10793;
pub const GL_NV_geometry_shader4 = 1;
pub const GL_OBJECT_TYPE_ARB = 35662;
pub const GL_SCALEBIAS_HINT_SGIX = 33570;
pub const GL_SUN_convolution_border_modes = 1;
pub const GL_RGB_FLOAT16_ATI = 34843;
pub const GL_DEPTH_CLAMP_FAR_AMD = 36895;
pub const GL_AMD_query_buffer_object = 1;
pub const GL_VERTEX_ATTRIB_ARRAY2_NV = 34386;
pub const GL_TEXTURE_POST_SPECULAR_HP = 33128;
pub const GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX = 33795;
pub const GL_DEPTH_COMPONENT24_ARB = 33190;
pub const GL_CURRENT_COLOR = 2816;
pub const GL_CON_7_ATI = 35144;
pub const GL_COMBINER7_NV = 34135;
pub const GL_PIXEL_MAP_S_TO_S = 3185;
pub const GL_MIRROR_CLAMP_EXT = 34626;
pub const GL_EXT_texture_env_dot3 = 1;
pub const GL_COMBINE_RGB = 34161;
pub const GL_COLOR_ARRAY_TYPE_EXT = 32898;
pub const GL_DEBUG_SOURCE_API_ARB = 33350;
pub const GL_MAX_TEXTURE_BUFFER_SIZE = 35883;
pub const GL_VERTEX_SHADER_VARIANTS_EXT = 34768;
pub const GL_FIXED_OES = 5132;
pub const GL_TEXTURE25_ARB = 34009;
pub const GL_ENABLE_BIT = 8192;
pub const GL_UNPACK_RESAMPLE_SGIX = 33839;
pub const GL_OBJECT_INFO_LOG_LENGTH_ARB = 35716;
pub const GL_TEXTURE30 = 34014;
pub const GL_POST_COLOR_MATRIX_RED_BIAS_SGI = 32952;
pub const GL_ARB_matrix_palette = 1;
pub const GL_COLOR_ATTACHMENT15 = 36079;
pub const GL_MATRIX9_ARB = 35017;
pub const GL_SWIZZLE_STQ_ATI = 35191;
pub const GL_BUFFER_MAP_POINTER = 35005;
pub const GL_SGIS_texture_edge_clamp = 1;
pub const GL_DEPTH_ATTACHMENT = 36096;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR = 37850;
pub const GL_SAMPLE_MASK_INVERT_EXT = 32939;
pub const GL_OUTPUT_COLOR0_EXT = 34715;
pub const GL_AMD_shader_ballot = 1;
pub const GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB = 34466;
pub const GL_AFFINE_2D_NV = 37010;
pub const GL_NV_fragment_program4 = 1;
pub const GL_SGIS_point_line_texgen = 1;
pub const GL_LINEAR_SHARPEN_COLOR_SGIS = 32943;
pub const GL_STACK_OVERFLOW = 1283;
pub const GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD = 37216;
pub const GL_SGIS_texture4D = 1;
pub const GL_TESS_GEN_MODE = 36470;
pub const GL_INTEL_map_texture = 1;
pub const GL_MAP_COLOR = 3344;
pub const GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 33301;
pub const GL_OP_FRAC_EXT = 34697;
pub const GL_PATH_STROKE_MASK_NV = 36996;
pub const GL_MAX_SAMPLES_EXT = 36183;
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = 36264;
pub const GL_PIXEL_MAP_I_TO_B_SIZE = 3252;
pub const GL_READ_FRAMEBUFFER = 36008;
pub const GL_WIN_phong_shading = 1;
pub const GL_R = 8194;
pub const GL_MINUS_CLAMPED_NV = 37555;
pub const GL_LINE_WIDTH_RANGE = 2850;
pub const GL_MATRIX24_ARB = 35032;
pub const GL_4PASS_2_SGIS = 32934;
pub const GL_TEXTURE_BINDING_1D_ARRAY = 35868;
pub const GL_AMD_draw_buffers_blend = 1;
pub const GL_ARB_window_pos = 1;
pub const GL_ELEMENT_ARRAY_TYPE_ATI = 34665;
pub const GL_INVALID_ENUM = 1280;
pub const GL_MESA_resize_buffers = 1;
pub const GL_SPRITE_OBJECT_ALIGNED_SGIX = 33101;
pub const GL_PATH_GEN_COLOR_FORMAT_NV = 37042;
pub const GL_MATRIX3_NV = 34355;
pub const GL_ARB_shading_language_420pack = 1;
pub const GL_CURRENT_TEXTURE_COORDS = 2819;
pub const GL_UUID_SIZE_EXT = 16;
pub const GL_RGB5 = 32848;
pub const GL_ARB_shader_draw_parameters = 1;
pub const GL_PROGRAM_MATRIX_STACK_DEPTH_EXT = 36399;
pub const GL_RGBA8_EXT = 32856;
pub const GL_SAMPLE_POSITION_NV = 36432;
pub const GL_DRAW_BUFFER11_ARB = 34864;
pub const GL_EMBOSS_LIGHT_NV = 34141;
pub const GL_PATH_GEN_COMPONENTS_NV = 37043;
pub const GL_SIGNED_HILO16_NV = 34554;
pub const GL_DEBUG_SOURCE_THIRD_PARTY = 33353;
pub const GL_OVR_multiview2 = 1;
pub const GL_TEXCOORD1_BIT_PGI = 268435456;
pub const GL_DECAL = 8449;
pub const GL_VERTEX_PROGRAM_TWO_SIDE_NV = 34371;
pub const GL_TRACK_MATRIX_NV = 34376;
pub const GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 37494;
pub const GL_ALPHA_MIN_CLAMP_INGR = 34147;
pub const GL_EXT_polygon_offset_clamp = 1;
pub const GL_SMOOTH = 7425;
pub const GL_FLOAT_RGBA_NV = 34947;
pub const GL_MAX_VARYING_COMPONENTS = 35659;
pub const GL_DEVICE_UUID_EXT = 38295;
pub const GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV = 37699;
pub const GL_ARB_robustness = 1;
pub const GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD = 37194;
pub const GL_CLIP_VOLUME_CLIPPING_HINT_EXT = 33008;
pub const GL_ARB_draw_elements_base_vertex = 1;
pub const GL_ARRAY_BUFFER_BINDING = 34964;
pub const GL_SGIX_async_histogram = 1;
pub const GL_INT_SAMPLER_2D_RECT = 36301;
pub const GL_COLOR_ATTACHMENT2_EXT = 36066;
pub const GL_RENDERBUFFER_INTERNAL_FORMAT_EXT = 36164;
pub const GL_FLOAT_VEC3_ARB = 35665;
pub const GL_ARB_shader_viewport_layer_array = 1;
pub const GL_TRANSPOSE_PROJECTION_MATRIX_ARB = 34020;
pub const GL_LINEAR_DETAIL_SGIS = 32919;
pub const GL_COLOR_WRITEMASK = 3107;
pub const GL_AMD_gpu_shader_int16 = 1;
pub const GL_DOUBLE_VEC2_EXT = 36860;
pub const GL_OPERAND0_ALPHA_ARB = 34200;
pub const GL_NORMAL_MAP_NV = 34065;
pub const GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI = 32980;
pub const GL_FRAGMENT_SHADER = 35632;
pub const GL_UNKNOWN_CONTEXT_RESET = 33365;
pub const GL_SOURCE1_ALPHA_ARB = 34185;
pub const GL_UNIFORM_TYPE = 35383;
pub const GL_HALF_APPLE = 5131;
pub const GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT = 36324;
pub const GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 36054;
pub const GL_CLAMP_TO_BORDER_ARB = 33069;
pub const GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB = 34996;
pub const GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB = 34350;
pub const GL_STREAM_READ_ARB = 35041;
pub const GL_DT_SCALE_NV = 34577;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_EXT = 35982;
pub const GL_ARB_fragment_layer_viewport = 1;
pub const GL_PROXY_POST_CONVOLUTION_COLOR_TABLE = 32980;
pub const GL_DEPTH_ATTACHMENT_EXT = 36096;
pub const GL_DEPTH_COMPONENT16_ARB = 33189;
pub const GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB = 34993;
pub const GL_SUBPIXEL_BITS = 3408;
pub const GL_PROGRAM_ALU_INSTRUCTIONS_ARB = 34821;
pub const GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV = 34521;
pub const GL_MAX_VERTEX_HINT_PGI = 107053;
pub const GL_INT_IMAGE_2D_ARRAY_EXT = 36958;
pub const GL_STATIC_VERTEX_ARRAY_IBM = 103061;
pub const GL_VERTEX_PRECLIP_HINT_SGIX = 33775;
pub const GL_INCR_WRAP = 34055;
pub const GL_MAX_ASYNC_READ_PIXELS_SGIX = 33633;
pub const GL_TEXTURE_PRIORITY = 32870;
pub const GL_LUMINANCE32F_ARB = 34840;
pub const GL_VERTEX_ATTRIB_MAP1_APPLE = 35328;
pub const GL_BLEND_PREMULTIPLIED_SRC_NV = 37504;
pub const GL_SHADER_STORAGE_BUFFER_START = 37076;
pub const GL_LUMINANCE16_SNORM = 36889;
pub const GL_TESS_CONTROL_SHADER_PATCHES_ARB = 33521;
pub const GL_INT_VEC3 = 35668;
pub const GL_INT_SAMPLER_2D_RECT_EXT = 36301;
pub const GL_VERTEX_STREAM4_ATI = 34672;
pub const GL_EXT_memory_object = 1;
pub const GL_PATH_COMMAND_COUNT_NV = 37021;
pub const GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT = 34076;
pub const GL_SLUMINANCE8_EXT = 35911;
pub const GL_PLUS_CLAMPED_ALPHA_NV = 37554;
pub const GL_BLEND_EQUATION_ALPHA_EXT = 34877;
pub const GL_SCREEN_COORDINATES_REND = 33936;
pub const GL_SWIZZLE_STR_DR_ATI = 35192;
pub const GL_EVAL_VERTEX_ATTRIB14_NV = 34516;
pub const GL_FOG_COORD_ARRAY_TYPE = 33876;
pub const GL_MAX_ARRAY_TEXTURE_LAYERS_EXT = 35071;
pub const GL_BLEND_COLOR_COMMAND_NV = 11;
pub const GL_ELEMENT_ARRAY_BUFFER_BINDING = 34965;
pub const GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX = 33794;
pub const GL_NV_multisample_coverage = 1;
pub const GL_STREAM_COPY_ARB = 35042;
pub const GL_MAX_RECTANGLE_TEXTURE_SIZE_NV = 34040;
pub const GL_COLOR_ATTACHMENT14 = 36078;
pub const GL_RENDERBUFFER_BLUE_SIZE_EXT = 36178;
pub const GL_PATH_FILL_BOUNDING_BOX_NV = 37025;
pub const GL_ALLOW_DRAW_MEM_HINT_PGI = 107025;
pub const GL_NV_shader_atomic_counters = 1;
pub const GL_OES_read_format = 1;
pub const GL_MAX_TRACK_MATRICES_NV = 34351;
pub const GL_PACK_SKIP_IMAGES_EXT = 32875;
pub const GL_FOG_COORDINATE_ARRAY_TYPE_EXT = 33876;
pub const GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT = 36968;
pub const GL_LUMINANCE_ALPHA8I_EXT = 36243;
pub const GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL = 38133;
pub const GL_ATOMIC_COUNTER_BARRIER_BIT_EXT = 4096;
pub const GL_PACK_SUBSAMPLE_RATE_SGIX = 34208;
pub const GL_MINOR_VERSION = 33308;
pub const GL_PIXEL_PACK_BUFFER_BINDING = 35053;
pub const GL_SRGB8_ALPHA8_EXT = 35907;
pub const GL_SUN_vertex = 1;
pub const GL_NV_conservative_raster_pre_snap_triangles = 1;
pub const GL_POST_CONVOLUTION_GREEN_SCALE = 32797;
pub const GL_OPERAND1_RGB_ARB = 34193;
pub const GL_PATH_DASH_CAPS_NV = 36987;
pub const GL_TEXTURE_BINDING_2D_MULTISAMPLE = 37124;
pub const GL_SGIX_reference_plane = 1;
pub const GL_QUERY_BY_REGION_WAIT = 36373;
pub const GL_NEXT_BUFFER_NV = -2;
pub const GL_Q = 8195;
pub const GL_WEIGHT_ARRAY_STRIDE_ARB = 34474;
pub const GL_TEXTURE_STACK_DEPTH = 2981;
pub const GL_COMPUTE_WORK_GROUP_SIZE = 33383;
pub const GL_TEXTURE19 = 34003;
pub const GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL = 38129;
pub const GL_COLOR_ARRAY_BUFFER_BINDING_ARB = 34968;
pub const GL_PATH_OBJECT_BOUNDING_BOX_NV = 37002;
pub const GL_NV_register_combiners = 1;
pub const GL_READ_FRAMEBUFFER_BINDING = 36010;
pub const GL_PER_STAGE_CONSTANTS_NV = 34101;
pub const GL_PATH_GEN_COEFF_NV = 37041;
pub const GL_INDEX_TEST_EXT = 33205;
pub const GL_MAX_COMPUTE_UNIFORM_COMPONENTS = 33379;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = 35973;
pub const GL_TESS_CONTROL_PROGRAM_NV = 35102;
pub const GL_HISTOGRAM = 32804;
pub const GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI = 107011;
pub const GL_RED_SCALE = 3348;
pub const GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS = 37067;
pub const GL_SOURCE0_RGB_ARB = 34176;
pub const GL_MATRIX18_ARB = 35026;
pub const GL_CON_2_ATI = 35139;
pub const GL_VERTEX_ARRAY_EXT = 32884;
pub const GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV = 36446;
pub const GL_EXT_bindable_uniform = 1;
pub const GL_EXT_texture_snorm = 1;
pub const GL_TEXTURE_DEPTH_TYPE = 35862;
pub const GL_COLOR_ATTACHMENT8 = 36072;
pub const GL_MODELVIEW11_ARB = 34603;
pub const GL_PROXY_TEXTURE_RECTANGLE = 34039;
pub const GL_LUMINANCE_ALPHA_FLOAT32_ATI = 34841;
pub const GL_GET_TEXTURE_IMAGE_TYPE = 33426;
pub const GL_FONT_DESCENDER_BIT_NV = 4194304;
pub const GL_ATOMIC_COUNTER_BUFFER_INDEX = 37633;
pub const GL_STORAGE_PRIVATE_APPLE = 34237;
pub const GL_VIDEO_BUFFER_BINDING_NV = 36897;
pub const GL_TEXTURE_STENCIL_SIZE = 35057;
pub const GL_TEXTURE_COMPARE_OPERATOR_SGIX = 33179;
pub const GL_INGR_color_clamp = 1;
pub const GL_TESS_EVALUATION_SHADER = 36487;
pub const GL_POST_CONVOLUTION_BLUE_SCALE = 32798;
pub const GL_UNSIGNED_BYTE_3_3_2_EXT = 32818;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE = 36388;
pub const GL_MODELVIEW28_ARB = 34620;
pub const GL_DEPTH_TEXTURE_MODE = 34891;
pub const GL_RETAINED_APPLE = 35355;
pub const GL_FUNC_SUBTRACT_EXT = 32778;
pub const GL_COMPRESSED_INTENSITY = 34028;
pub const GL_SHADER_IMAGE_ACCESS_BARRIER_BIT = 32;
pub const GL_DEPTH_BITS = 3414;
pub const GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV = 36436;
pub const GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX = 33148;
pub const GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB = 36317;
pub const GL_DOT3_RGBA = 34479;
pub const GL_RGB4_S3TC = 33697;
pub const GL_BLEND_EQUATION_RGB_EXT = 32777;
pub const GL_MATRIX1_ARB = 35009;
pub const GL_ARB_fragment_program_shadow = 1;
pub const GL_VIRTUAL_PAGE_SIZE_X_AMD = 37269;
pub const GL_TEXTURE12_ARB = 33996;
pub const GL_DRAW_BUFFER6_ARB = 34859;
pub const GL_LINES_ADJACENCY_ARB = 10;
pub const GL_EXT_draw_buffers2 = 1;
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB = 36264;
pub const GL_DRAW_INDIRECT_LENGTH_NV = 36674;
pub const GL_TEXTURE_FILTER_CONTROL = 34048;
pub const GL_POST_CONVOLUTION_RED_BIAS = 32800;
pub const GL_STENCIL_BITS = 3415;
pub const GL_ARB_texture_compression = 1;
pub const GL_DEVICE_LUID_EXT = 38297;
pub const GL_DEBUG_GROUP_STACK_DEPTH = 33389;
pub const GL_TEXTURE2 = 33986;
pub const GL_SHADER_INCLUDE_ARB = 36270;
pub const GL_RGB10_A2 = 32857;
pub const GL_TEXTURE_STORAGE_SPARSE_BIT_AMD = 1;
pub const GL_WARPS_PER_SM_NV = 37690;
pub const GL_OBJECT_DISTANCE_TO_POINT_SGIS = 33265;
pub const GL_DRAW_BUFFER2_ATI = 34855;
pub const GL_SIGNED_ALPHA_NV = 34565;
pub const GL_NUM_SHADING_LANGUAGE_VERSIONS = 33513;
pub const GL_ACTIVE_TEXTURE = 34016;
pub const GL_DYNAMIC_DRAW = 35048;
pub const GL_INVALID_OPERATION = 1282;
pub const GL_CONTEXT_RELEASE_BEHAVIOR = 33531;
pub const GL_MATRIX21_ARB = 35029;
pub const GL_TEXTURE_3D_EXT = 32879;
pub const GL_ARB_conditional_render_inverted = 1;
pub const GL_FULL_STIPPLE_HINT_PGI = 107033;
pub const GL_INVERT_RGB_NV = 37539;
pub const GL_VIDEO_COLOR_CONVERSION_OFFSET_NV = 36908;
pub const GL_ACTIVE_UNIFORM_BLOCKS = 35382;
pub const GL_NAMED_STRING_TYPE_ARB = 36330;
pub const GL_QUERY_WAIT_NV = 36371;
pub const GL_SAMPLER_3D_ARB = 35679;
pub const GL_INT_VEC2 = 35667;
pub const GL_QUERY_RESOURCE_SYS_RESERVED_NV = 38212;
pub const GL_INT_SAMPLER_3D_EXT = 36299;
pub const GL_T4F_C4F_N3F_V4F = 10797;
pub const GL_PIXEL_TILE_GRID_DEPTH_SGIX = 33092;
pub const GL_EVAL_VERTEX_ATTRIB3_NV = 34505;
pub const GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV = 36443;
pub const GL_TEXCOORD3_BIT_PGI = 1073741824;
pub const GL_FLOAT_MAT4x2 = 35689;
pub const GL_POST_COLOR_MATRIX_GREEN_SCALE = 32949;
pub const GL_ARB_shadow = 1;
pub const GL_FULL_SUPPORT = 33463;
pub const GL_EXT_draw_instanced = 1;
pub const GL_INTENSITY16I_EXT = 36235;
pub const GL_TEXTURE_CLIPMAP_FRAME_SGIX = 33138;
pub const GL_EXT_pixel_transform_color_table = 1;
pub const GL_QUADRATIC_CURVE_TO_NV = 10;
pub const GL_PIXEL_MAP_G_TO_G = 3191;
pub const GL_ELEMENT_ARRAY_LENGTH_NV = 36659;
pub const GL_REG_20_ATI = 35125;
pub const GL_RED_BITS = 3410;
pub const GL_READ_ONLY = 35000;
pub const GL_COLOR_ATTACHMENT17 = 36081;
pub const GL_TEXTURE_BORDER_VALUES_NV = 34586;
pub const GL_1PASS_SGIS = 32929;
pub const GL_PIXEL_UNPACK_BUFFER_ARB = 35052;
pub const GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES = 37574;
pub const GL_NV_fragment_program2 = 1;
pub const GL_PROGRAM_TARGET_NV = 34374;
pub const GL_COLOR_MATERIAL_FACE = 2901;
pub const GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 34922;
pub const GL_PIXEL_TILE_GRID_HEIGHT_SGIX = 33091;
pub const GL_LINE_STRIP_ADJACENCY_EXT = 11;
pub const GL_ACTIVE_SUBROUTINES = 36325;
pub const GL_VERTEX_ATTRIB_ARRAY11_NV = 34395;
pub const GL_PROXY_HISTOGRAM_EXT = 32805;
pub const GL_DEBUG_LOGGED_MESSAGES_ARB = 37189;
pub const GL_TEXTURE_RED_SIZE_EXT = 32860;
pub const GL_SLUMINANCE8_ALPHA8_EXT = 35909;
pub const GL_MINMAX_FORMAT = 32815;
pub const GL_EXT_shader_framebuffer_fetch_non_coherent = 1;
pub const GL_DEPTH_CLAMP = 34383;
pub const GL_STENCIL_TEST = 2960;
pub const GL_COLOR4_BIT_PGI = 131072;
pub const GL_TEXTURE18 = 34002;
pub const GL_PROGRAM_POINT_SIZE = 34370;
pub const GL_MATRIX11_ARB = 35019;
pub const GL_MATRIX16_ARB = 35024;
pub const GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB = 36263;
pub const GL_POST_TEXTURE_FILTER_SCALE_SGIX = 33146;
pub const GL_MAX_DEBUG_MESSAGE_LENGTH_AMD = 37187;
pub const GL_BUFFER_MAP_LENGTH = 37152;
pub const GL_MAP1_VERTEX_ATTRIB10_4_NV = 34410;
pub const GL_ATI_meminfo = 1;
pub const GL_TANGENT_ARRAY_TYPE_EXT = 33854;
pub const GL_REG_1_ATI = 35106;
pub const GL_DUAL_ALPHA12_SGIS = 33042;
pub const GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = 36878;
pub const GL_ARB_transform_feedback3 = 1;
pub const GL_NV_point_sprite = 1;
pub const GL_FLOAT16_NV = 36856;
pub const GL_TEXTURE_GATHER = 33442;
pub const GL_ARB_bindless_texture = 1;
pub const GL_INTERLEAVED_ATTRIBS_EXT = 35980;
pub const GL_OBJECT_VALIDATE_STATUS_ARB = 35715;
pub const GL_TEXTURE_BINDING_2D = 32873;
pub const GL_AVERAGE_HP = 33120;
pub const GL_EXT_index_func = 1;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT = 34070;
pub const GL_OPERAND1_ALPHA_ARB = 34201;
pub const GL_CONVOLUTION_FILTER_SCALE_EXT = 32788;
pub const GL_DISPATCH_INDIRECT_BUFFER_BINDING = 37103;
pub const GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL = 33784;
pub const GL_TEXTURE_BUFFER_FORMAT_EXT = 35886;
pub const GL_PERCENTAGE_AMD = 35779;
pub const GL_LUMINANCE_ALPHA_INTEGER_EXT = 36253;
pub const GL_COLOR_ATTACHMENT9 = 36073;
pub const GL_UNIFORM_ARRAY_STRIDE = 35388;
pub const GL_EXT_misc_attribute = 1;
pub const GL_SRC_ATOP_NV = 37518;
pub const GL_VERTEX_BLEND_ARB = 34471;
pub const GL_MIRRORED_REPEAT_ARB = 33648;
pub const GL_REG_15_ATI = 35120;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV = 35967;
pub const GL_OBJECT_DELETE_STATUS_ARB = 35712;
pub const GL_UNSIGNED_BYTE_2_3_3_REV = 33634;
pub const GL_TEXTURE_ENV_BIAS_SGIX = 32958;
pub const GL_SAMPLER_1D = 35677;
pub const GL_OUTPUT_TEXTURE_COORD16_EXT = 34733;
pub const GL_EVAL_VERTEX_ATTRIB5_NV = 34507;
pub const GL_ARB_texture_swizzle = 1;
pub const GL_FOG_FUNC_SGIS = 33066;
pub const GL_GREEN_BITS = 3411;
pub const GL_RED_INTEGER = 36244;
pub const GL_QUERY_BY_REGION_NO_WAIT_INVERTED = 36378;
pub const GL_UNPACK_SKIP_PIXELS = 3316;
pub const GL_KHR_debug = 1;
pub const GL_PROGRAM_PIPELINE_OBJECT_EXT = 35407;
pub const GL_SELECT = 7170;
pub const GL_TEXTURE_BUFFER_SIZE = 37278;
pub const GL_ACCUM_GREEN_BITS = 3417;
pub const GL_NV_evaluators = 1;
pub const GL_MAX_GEOMETRY_INPUT_COMPONENTS = 37155;
pub const GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD = 4;
pub const GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL = 38131;
pub const GL_INT8_VEC2_NV = 36833;
pub const GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE = 33455;
pub const GL_MAX_LIGHTS = 3377;
pub const GL_SOURCE0_ALPHA_ARB = 34184;
pub const GL_TRANSPOSE_MODELVIEW_MATRIX_ARB = 34019;
pub const GL_MAX_PROGRAM_LOOP_DEPTH_NV = 35063;
pub const GL_LIGHTING_BIT = 64;
pub const GL_RGBA_INTEGER = 36249;
pub const GL_MAX_RASTER_SAMPLES_EXT = 37673;
pub const GL_QUARTER_BIT_ATI = 16;
pub const GL_ELEMENT_ARRAY_TYPE_APPLE = 35341;
pub const GL_TEXTURE_BINDING_BUFFER_EXT = 35884;
pub const GL_QUERY_ALL_EVENT_BITS_AMD = 4294967295;
pub const GL_CONSTANT_EXT = 34166;
pub const GL_VERTEX_WEIGHT_ARRAY_EXT = 34060;
pub const GL_LINEAR_MIPMAP_LINEAR = 9987;
pub const GL_TEXTURE3 = 33987;
pub const GL_ALPHA_TEST_REF = 3010;
pub const GL_ANY_SAMPLES_PASSED_CONSERVATIVE = 36202;
pub const GL_TEXTURE_LOD_BIAS_R_SGIX = 33168;
pub const GL_EXT_texture_env_combine = 1;
pub const GL_VIEWPORT_INDEX_PROVOKING_VERTEX = 33375;
pub const GL_VIEW_CLASS_S3TC_DXT1_RGB = 33484;
pub const GL_DEPTH_COMPONENT32 = 33191;
pub const GL_INTENSITY8UI_EXT = 36223;
pub const GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV = 36916;
pub const GL_MAX_ASYNC_DRAW_PIXELS_SGIX = 33632;
pub const GL_N3F_V3F = 10789;
pub const GL_NV_sample_mask_override_coverage = 1;
pub const GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV = 37704;
pub const GL_TEXTURE_UPDATE_BARRIER_BIT = 256;
pub const GL_BUFFER_SIZE = 34660;
pub const GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT = 1;
pub const GL_CONSTANT_COLOR_EXT = 32769;
pub const GL_RGB16F_ARB = 34843;
pub const GL_TEXCOORD2_BIT_PGI = 536870912;
pub const GL_MAX_TEXTURE_IMAGE_UNITS_NV = 34930;
pub const GL_FLOAT_MAT4x3 = 35690;
pub const GL_SMOOTH_POINT_SIZE_GRANULARITY = 2835;
pub const GL_LUMINANCE8UI_EXT = 36224;
pub const GL_INT_IMAGE_BUFFER_EXT = 36956;
pub const GL_MAX_VERTEX_SHADER_LOCALS_EXT = 34761;
pub const GL_8X_BIT_ATI = 4;
pub const GL_UNIFORM = 37601;
pub const GL_DRAW_BUFFER4_ARB = 34857;
pub const GL_KHR_context_flush_control = 1;
pub const GL_HP_convolution_border_modes = 1;
pub const GL_COLOR_COMPONENTS = 33411;
pub const GL_ACTIVE_PROGRAM = 33369;
pub const GL_CURRENT_FOG_COORDINATE = 33875;
pub const GL_MAP1_VERTEX_ATTRIB12_4_NV = 34412;
pub const GL_COLOR_SUM = 33880;
pub const GL_CLIP_DISTANCE_NV = 35962;
pub const GL_FONT_NUM_GLYPH_INDICES_BIT_NV = 536870912;
pub const GL_MAT_COLOR_INDEXES_BIT_PGI = 16777216;
pub const GL_RESTART_PATH_NV = 240;
pub const GL_SPARE1_NV = 34095;
pub const GL_TEXTURE_MAX_CLAMP_T_SGIX = 33642;
pub const GL_VERTEX_PROGRAM_TWO_SIDE_ARB = 34371;
pub const GL_DRAW_FRAMEBUFFER_BINDING_EXT = 36006;
pub const GL_TEXTURE15_ARB = 33999;
pub const GL_COLOR_ATTACHMENT16 = 36080;
pub const GL_STENCIL_TAG_BITS_EXT = 35058;
pub const GL_LIGHT_MODEL_COLOR_CONTROL = 33272;
pub const GL_NORMAL_ARRAY = 32885;
pub const GL_FRAMEZOOM_FACTOR_SGIX = 33164;
pub const GL_MAX_COMBINED_IMAGE_UNIFORMS = 37071;
pub const GL_MAP2_TEXTURE_COORD_2 = 3508;
pub const GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB = 34339;
pub const GL_TEXTURE_1D_STACK_MESAX = 34649;
pub const GL_NV_conditional_render = 1;
pub const GL_MAX_PROGRAM_INSTRUCTIONS_ARB = 34977;
pub const GL_INTERNALFORMAT_SUPPORTED = 33391;
pub const GL_FRAMEBUFFER = 36160;
pub const GL_COMP_BIT_ATI = 2;
pub const GL_SAMPLES_PASSED = 35092;
pub const GL_REFLECTION_MAP = 34066;
pub const GL_CONSTANT_COLOR1_NV = 34091;
pub const GL_QUERY_OBJECT_EXT = 37203;
pub const GL_DEBUG_SOURCE_SHADER_COMPILER = 33352;
pub const GL_DEBUG_TYPE_PORTABILITY_ARB = 33359;
pub const GL_IMAGE_1D_EXT = 36940;
pub const GL_PRIMARY_COLOR_ARB = 34167;
pub const GL_OP_DOT4_EXT = 34693;
pub const GL_CONVOLUTION_HEIGHT = 32793;
pub const GL_LOGIC_OP = 3057;
pub const GL_SGIS_point_parameters = 1;
pub const GL_CONTEXT_ROBUST_ACCESS = 37107;
pub const GL_SAMPLER_2D_ARRAY_SHADOW = 36292;
pub const GL_UNSIGNED_BYTE_3_3_2 = 32818;
pub const GL_TESS_CONTROL_SHADER = 36488;
pub const GL_DOT3_RGB_EXT = 34624;
pub const GL_CURRENT_VERTEX_EXT = 34786;
pub const GL_ARB_transform_feedback2 = 1;
pub const GL_MINMAX_EXT = 32814;
pub const GL_COPY = 5379;
pub const GL_TEXTURE_GREEN_SIZE_EXT = 32861;
pub const GL_REG_26_ATI = 35131;
pub const GL_TIMEOUT_IGNORED = c_ulonglong(18446744073709551615);
pub const GL_ARB_texture_multisample = 1;
pub const GL_VERTEX_ARRAY_LENGTH_NV = 36651;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR = 37852;
pub const GL_EMBOSS_CONSTANT_NV = 34142;
pub const GL_READ_WRITE = 35002;
pub const GL_COMPUTE_SHADER = 37305;
pub const GL_ARRAY_OBJECT_OFFSET_ATI = 34663;
pub const GL_RGB5_EXT = 32848;
pub const GL_OVERLAY_NV = 37526;
pub const GL_OP_MIN_EXT = 34699;
pub const GL_SYNC_CL_EVENT_ARB = 33344;
pub const GL_INTERPOLATE_EXT = 34165;
pub const GL_VERTEX_ARRAY_BUFFER_BINDING = 34966;
pub const GL_HALF_BIAS_NORMAL_NV = 34106;
pub const GL_EXT_shader_framebuffer_fetch = 1;
pub const GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV = 35080;
pub const GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM = 103085;
pub const GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB = 33358;
pub const GL_4PASS_1_EXT = 32933;
pub const GL_MULTISAMPLE_SGIS = 32925;
pub const GL_ATTACHED_SHADERS = 35717;
pub const GL_TEXTURE_LOD_BIAS_EXT = 34049;
pub const GL_COMPRESSED_RGBA_ASTC_10x10_KHR = 37819;
pub const GL_STEREO = 3123;
pub const GL_PACK_LSB_FIRST = 3329;
pub const GL_INDEX = 33314;
pub const GL_IMAGE_BINDING_LEVEL_EXT = 36667;
pub const GL_HISTOGRAM_BLUE_SIZE = 32810;
pub const GL_NV_texture_env_combine4 = 1;
pub const GL_MODELVIEW9_ARB = 34601;
pub const GL_OP_MUL_EXT = 34694;
pub const GL_OUTPUT_TEXTURE_COORD10_EXT = 34727;
pub const GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV = 34902;
pub const GL_RGBA = 6408;
pub const GL_VIRTUAL_PAGE_SIZE_Z_ARB = 37271;
pub const GL_PACK_SWAP_BYTES = 3328;
pub const GL_BUMP_ENVMAP_ATI = 34683;
pub const GL_PROGRAMMABLE_SAMPLE_LOCATION_NV = 37697;
pub const GL_INDEX_ARRAY_EXT = 32887;
pub const GL_MAX_VERTEX_ATTRIBS = 34921;
pub const GL_MULTIPLY_NV = 37524;
pub const GL_CLIPPING_INPUT_PRIMITIVES_ARB = 33526;
pub const GL_POLYGON_TOKEN = 1795;
pub const GL_ARB_fragment_shader = 1;
pub const GL_DSDT8_MAG8_NV = 34570;
pub const GL_RGBA12_EXT = 32858;
pub const GL_TEXTURE0 = 33984;
pub const GL_TEXTURE29_ARB = 34013;
pub const GL_ALPHA12 = 32829;
pub const GL_SURFACE_MAPPED_NV = 34560;
pub const GL_SRC_ALPHA_SATURATE = 776;
pub const GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV = 34544;
pub const GL_TEXTURE_COMPRESSED = 34465;
pub const GL_STENCIL_VALUE_MASK = 2963;
pub const GL_COMPRESSED_LUMINANCE_ALPHA_ARB = 34027;
pub const GL_RGBA8I_EXT = 36238;
pub const GL_MAX_FRAGMENT_ATOMIC_COUNTERS = 37590;
pub const GL_ARB_spirv_extensions = 1;
pub const GL_MAX_IMAGE_UNITS = 36664;
pub const GL_TEXTURE_IMAGE_FORMAT = 33423;
pub const GL_ACCUM_BUFFER_BIT = 512;
pub const GL_VIEWPORT_POSITION_W_SCALE_NV = 37756;
pub const GL_MATRIX14_ARB = 35022;
pub const GL_ARB_sparse_texture = 1;
pub const GL_SPARSE_BUFFER_PAGE_SIZE_ARB = 33528;
pub const GL_DST_ALPHA = 772;
pub const GL_EXT_semaphore_win32 = 1;
pub const GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB = 37694;
pub const GL_SECONDARY_COLOR_ARRAY = 33886;
pub const GL_WIN_specular_fog = 1;
pub const GL_SURFACE_STATE_NV = 34539;
pub const GL_COLOR_TABLE_LUMINANCE_SIZE_SGI = 32990;
pub const GL_FLOAT_VEC2 = 35664;
pub const GL_DOUBLE_MAT2x3 = 36681;
pub const GL_GENERATE_MIPMAP_HINT_SGIS = 33170;
pub const GL_INT_VEC4 = 35669;
pub const GL_UNSIGNED_INT_IMAGE_1D_EXT = 36962;
pub const GL_MODELVIEW20_ARB = 34612;
pub const GL_FRAMEBUFFER_COMPLETE_EXT = 36053;
pub const GL_IBM_rasterpos_clip = 1;
pub const GL_SGIS_texture_lod = 1;
pub const GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS = 32944;
pub const GL_STENCIL_INDEX = 6401;
pub const GL_COLOR_ARRAY_LIST_STRIDE_IBM = 103082;
pub const GL_LIGHT5 = 16389;
pub const GL_SHADER_IMAGE_LOAD = 33444;
pub const GL_VERTEX_ARRAY_POINTER_EXT = 32910;
pub const GL_POINT_SIZE_MIN_SGIS = 33062;
pub const GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = 37080;
pub const GL_INVALID_VALUE = 1281;
pub const GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT = 36322;
pub const GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 35381;
pub const GL_PIXEL_MODE_BIT = 32;
pub const GL_MAX_PROGRAM_ENV_PARAMETERS_ARB = 34997;
pub const GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT = 37675;
pub const GL_SOURCE1_RGB_EXT = 34177;
pub const GL_MIN_PROGRAM_TEXEL_OFFSET_NV = 35076;
pub const GL_MAP1_TEXTURE_COORD_1 = 3475;
pub const GL_VERTEX_ATTRIB_ARRAY5_NV = 34389;
pub const GL_UNSIGNED_INT_SAMPLER_3D_EXT = 36307;
pub const GL_MAX_GEOMETRY_OUTPUT_COMPONENTS = 37156;
pub const GL_PURGED_CONTEXT_RESET_NV = 37563;
pub const GL_CON_27_ATI = 35164;
pub const GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT = 36965;
pub const GL_MAP2_TEXTURE_COORD_3 = 3509;
pub const GL_POINT_SIZE_RANGE = 2834;
pub const GL_SECONDARY_COLOR_ARRAY_STRIDE = 33884;
pub const GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB = 37700;
pub const GL_UNSIGNED_INT_IMAGE_2D_ARRAY = 36969;
pub const GL_ELEMENT_ARRAY_POINTER_APPLE = 35342;
pub const GL_TEXTURE_RANGE_POINTER_APPLE = 34232;
pub const GL_DEPTH_CLAMP_NEAR_AMD = 36894;
pub const GL_ARB_texture_stencil8 = 1;
pub const GL_COLORBURN_NV = 37530;
pub const GL_DEPTH_TEST = 2929;
pub const GL_SGIX_texture_multi_buffer = 1;
pub const GL_UNIFORM_BUFFER_START = 35369;
pub const GL_SGIX_ir_instrument1 = 1;
pub const GL_IMAGE_PIXEL_TYPE = 33450;
pub const GL_CON_9_ATI = 35146;
pub const GL_LUMINANCE12_ALPHA12 = 32839;
pub const GL_LOCATION = 37646;
pub const GL_DEBUG_SOURCE_OTHER_ARB = 33355;
pub const GL_SGIX_texture_scale_bias = 1;
pub const GL_RENDERBUFFER_BINDING = 36007;
pub const GL_422_AVERAGE_EXT = 32974;
pub const GL_MAX_VERTEX_ATTRIB_STRIDE = 33509;
pub const GL_MIRROR_CLAMP_TO_EDGE = 34627;
pub const GL_NV_texture_rectangle = 1;
pub const GL_OP_MADD_EXT = 34696;
pub const GL_SAMPLE_SHADING = 35894;
pub const GL_MAX_COLOR_TEXTURE_SAMPLES = 37134;
pub const GL_COLOR_ATTACHMENT0_EXT = 36064;
pub const GL_ARB_shader_precision = 1;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT = 35972;
pub const GL_CIRCULAR_CW_ARC_TO_NV = 250;
pub const GL_WRAP_BORDER_SUN = 33236;
pub const GL_EXT_multi_draw_arrays = 1;
pub const GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL = 38138;
pub const GL_COPY_PIXEL_TOKEN = 1798;
pub const GL_PATH_TRANSPOSE_MODELVIEW_MATRIX_NV = 34019;
pub const GL_FRAGMENT_PROGRAM_BINDING_NV = 34931;
pub const GL_COMPRESSED_RGBA_ASTC_8x8_KHR = 37815;
pub const GL_AMBIENT_AND_DIFFUSE = 5634;
pub const GL_BOOL_VEC4_ARB = 35673;
pub const GL_FIELDS_NV = 36391;
pub const GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT = 36057;
pub const GL_PROGRAM_STRING_NV = 34344;
pub const GL_INTERNALFORMAT_BLUE_SIZE = 33395;
pub const GL_MODELVIEW19_ARB = 34611;
pub const GL_LIGHTEN_NV = 37528;
pub const GL_HSL_LUMINOSITY_NV = 37552;
pub const GL_TRANSPOSE_TEXTURE_MATRIX_ARB = 34021;
pub const GL_FRAGMENT_LIGHT0_SGIX = 33804;
pub const GL_PRIMARY_COLOR_NV = 34092;
pub const GL_LIST_INDEX = 2867;
pub const GL_ALL_BARRIER_BITS = 4294967295;
pub const GL_PASS_THROUGH_TOKEN = 1792;
pub const GL_OPERAND3_ALPHA_NV = 34203;
pub const GL_PROJECTION = 5889;
pub const GL_ALL_STATIC_DATA_IBM = 103060;
pub const GL_TEXTURE_RESIDENT = 32871;
pub const GL_DECR = 7683;
pub const GL_DEBUG_CATEGORY_DEPRECATION_AMD = 37195;
pub const GL_SAMPLER_1D_ARRAY_SHADOW_EXT = 36291;
pub const GL_SHADER_STORAGE_BUFFER_BINDING = 37075;
pub const GL_ZERO_EXT = 34781;
pub const GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX = 33801;
pub const GL_SHADING_LANGUAGE_VERSION_ARB = 35724;
pub const GL_OES_query_matrix = 1;
pub const GL_LEQUAL = 515;
pub const GL_OUTPUT_TEXTURE_COORD26_EXT = 34743;
pub const GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 35978;
pub const GL_COMPRESSED_RGBA_ASTC_12x10_KHR = 37820;
pub const GL_ARB_clear_buffer_object = 1;
pub const GL_FOG = 2912;
pub const GL_QUERY_BUFFER_BINDING = 37267;
pub const GL_COMPRESSED_SLUMINANCE_ALPHA = 35915;
pub const GL_CONFORMANT_NV = 37748;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 36052;
pub const GL_TRANSFORM_FEEDBACK_VARYINGS_EXT = 35971;
pub const GL_SHADING_LANGUAGE_VERSION = 35724;
pub const GL_TEXTURE_GEN_Q = 3171;
pub const GL_SMOOTH_LINE_WIDTH_RANGE = 2850;
pub const GL_SUBTRACT = 34023;
pub const GL_TEXTURE1 = 33985;
pub const GL_UNSIGNED_INT_24_8_NV = 34042;
pub const GL_FONT_Y_MIN_BOUNDS_BIT_NV = 131072;
pub const GL_VERTEX_ATTRIB_ARRAY_TYPE = 34341;
pub const GL_DEBUG_SOURCE_WINDOW_SYSTEM = 33351;
pub const GL_UNSIGNED_INVERT_NV = 34103;
pub const GL_MATRIX5_NV = 34357;
pub const GL_DRAW_FRAMEBUFFER_BINDING = 36006;
pub const GL_PALETTE8_RGB5_A1_OES = 35737;
pub const GL_TEXTURE_GATHER_SHADOW = 33443;
pub const GL_TEXTURE_MULTI_BUFFER_HINT_SGIX = 33070;
pub const GL_SRGB = 35904;
pub const GL_NAME_LENGTH = 37625;
pub const GL_BUFFER_USAGE_ARB = 34661;
pub const GL_NV_sample_locations = 1;
pub const GL_VIEW_CLASS_24_BITS = 33481;
pub const GL_RED_INTEGER_EXT = 36244;
pub const GL_STATIC_DRAW = 35044;
pub const GL_SIGNED_HILO8_NV = 34911;
pub const GL_FOG_COORD_SRC = 33872;
pub const GL_POST_CONVOLUTION_COLOR_TABLE = 32977;
pub const GL_ACTIVE_VARYING_MAX_LENGTH_NV = 35970;
pub const GL_TEXTURE_ENV = 8960;
pub const GL_FLOAT_VEC3 = 35665;
pub const GL_DYNAMIC_READ_ARB = 35049;
pub const GL_BLEND_ADVANCED_COHERENT_NV = 37509;
pub const GL_DSDT_MAG_INTENSITY_NV = 34524;
pub const GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB = 34974;
pub const GL_DARKEN_KHR = 37527;
pub const GL_OPERAND2_ALPHA_ARB = 34202;
pub const GL_VERTEX_SHADER_BIT = 1;
pub const GL_CONJOINT_NV = 37508;
pub const GL_COMPUTE_PROGRAM_NV = 37115;
pub const GL_SUPPORTED_MULTISAMPLE_MODES_AMD = 37303;
pub const GL_UNDEFINED_APPLE = 35356;
pub const GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE = 35334;
pub const GL_MULTISAMPLE_BIT_ARB = 536870912;
pub const GL_COMPRESSED_RGBA_ASTC_8x6_KHR = 37814;
pub const GL_IMAGE_CLASS_1_X_8 = 33473;
pub const GL_LIGHT4 = 16388;
pub const GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB = 34373;
pub const GL_RESAMPLE_REPLICATE_SGIX = 33843;
pub const GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB = 36495;
pub const GL_BOLD_BIT_NV = 1;
pub const GL_CON_23_ATI = 35160;
pub const GL_ARB_transform_feedback_overflow_query = 1;
pub const GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 36950;
pub const GL_VERTEX_SHADER_INVARIANTS_EXT = 34769;
pub const GL_ARB_texture_barrier = 1;
pub const GL_COMPRESSED_RGBA_ASTC_8x5_KHR = 37813;
pub const GL_SHADER_BINARY_FORMAT_SPIR_V = 38225;
pub const GL_FONT_X_MAX_BOUNDS_BIT_NV = 262144;
pub const GL_MULTISAMPLE_LINE_WIDTH_RANGE_ARB = 37761;
pub const GL_PIXEL_UNPACK_BUFFER_BINDING = 35055;
pub const GL_MAP2_VERTEX_4 = 3512;
pub const GL_CLIPPING_OUTPUT_PRIMITIVES = 33527;
pub const GL_INGR_interlace_read = 1;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR = 37847;
pub const GL_CONVOLUTION_2D_EXT = 32785;
pub const GL_UNSIGNED_INT16_VEC4_NV = 36851;
pub const GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 35377;
pub const GL_MAX_FRAMEBUFFER_LAYERS = 37655;
pub const GL_SGIS_texture_select = 1;
pub const GL_CLEAR_TEXTURE = 37733;
pub const GL_OBJECT_BUFFER_USAGE_ATI = 34661;
pub const GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = 35378;
pub const GL_EYE_DISTANCE_TO_LINE_SGIS = 33266;
pub const GL_QUAD_ALPHA4_SGIS = 33054;
pub const GL_PRIMARY_COLOR_EXT = 34167;
pub const GL_EXT_texture_sRGB = 1;
pub const GL_TEXTURE_LIGHT_EXT = 33616;
pub const GL_MAP2_VERTEX_ATTRIB6_4_NV = 34422;
pub const GL_GEOMETRY_OUTPUT_TYPE_EXT = 36316;
pub const GL_EQUIV = 5385;
pub const GL_SRC_ALPHA = 770;
pub const GL_VERTEX_ARRAY_RANGE_LENGTH_NV = 34078;
pub const GL_MAX_PROJECTION_STACK_DEPTH = 3384;
pub const GL_VERSION_2_1 = 1;
pub const GL_DRAW_BUFFER13_ARB = 34866;
pub const GL_MODELVIEW0_EXT = 5888;
pub const GL_RGB_FLOAT32_APPLE = 34837;
pub const GL_ACCUM_ALPHA_BITS = 3419;
pub const GL_PRIMITIVES_GENERATED = 35975;
pub const GL_INT_SAMPLER_RENDERBUFFER_NV = 36439;
pub const GL_MATRIX30_ARB = 35038;
pub const GL_VIRTUAL_PAGE_SIZE_X_ARB = 37269;
pub const GL_DRAW_BUFFER15_ARB = 34868;
pub const GL_TEXTURE_APPLICATION_MODE_EXT = 33615;
pub const GL_RGBA16I = 36232;
pub const GL_VIEW_CLASS_96_BITS = 33477;
pub const GL_NONE = 0;
pub const GL_ELEMENT_ADDRESS_COMMAND_NV = 8;
pub const GL_BUFFER_VARIABLE = 37605;
pub const GL_TRIANGLE_STRIP_ADJACENCY = 13;
pub const GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS = 37274;
pub const GL_PATH_STROKE_COVER_MODE_NV = 36995;
pub const GL_CURRENT_INDEX = 2817;
pub const GL_FRAMEBUFFER_DEFAULT_WIDTH = 37648;
pub const GL_DUAL_LUMINANCE8_SGIS = 33045;
pub const GL_RGB32UI = 36209;
pub const GL_DRAW_BUFFER9_ARB = 34862;
pub const GL_COVERAGE_MODULATION_TABLE_NV = 37681;
pub const GL_FILTER = 33434;
pub const GL_CONSERVATIVE_RASTER_MODE_NV = 38221;
pub const GL_BINORMAL_ARRAY_POINTER_EXT = 33859;
pub const GL_HSL_SATURATION_NV = 37550;
pub const GL_GUILTY_CONTEXT_RESET_ARB = 33363;
pub const GL_UNDEFINED_VERTEX = 33376;
pub const GL_OUT_OF_MEMORY = 1285;
pub const GL_TEXTURE_COLOR_TABLE_SGI = 32956;
pub const GL_INDEX_ARRAY_BUFFER_BINDING_ARB = 34969;
pub const GL_MATRIX2_ARB = 35010;
pub const GL_OBJECT_DISTANCE_TO_LINE_SGIS = 33267;
pub const GL_NV_texgen_emboss = 1;
pub const GL_IBM_cull_vertex = 1;
pub const GL_COMPUTE_SHADER_BIT = 32;
pub const GL_TEXTURE_MIN_LOD_SGIS = 33082;
pub const GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV = 37705;
pub const GL_TEXTURE_LOD_BIAS = 34049;
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = 35917;
pub const GL_3_BYTES_NV = 5128;
pub const GL_D3D12_FENCE_VALUE_EXT = 38293;
pub const GL_FRAMEZOOM_SGIX = 33163;
pub const GL_TEXTURE_IMAGE_TYPE = 33424;
pub const GL_MAX_PROGRAM_MATRICES_ARB = 34351;
pub const GL_WEIGHTED_AVERAGE_ARB = 37735;
pub const GL_POINT_SIZE_MAX_SGIS = 33063;
pub const GL_LAYOUT_TRANSFER_SRC_EXT = 38290;
pub const GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB = 34972;
pub const GL_ACCUM_RED_BITS = 3416;
pub const GL_ATI_envmap_bumpmap = 1;
pub const GL_TEXTURE_2D_BINDING_EXT = 32873;
pub const GL_OBJECT_SHADER_SOURCE_LENGTH_ARB = 35720;
pub const GL_NORMAL_MAP_ARB = 34065;
pub const GL_QUAD_INTENSITY4_SGIS = 33058;
pub const GL_INTERNALFORMAT_ALPHA_SIZE = 33396;
pub const GL_MESA_tile_raster_order = 1;
pub const GL_EXPAND_NORMAL_NV = 34104;
pub const GL_FOG_COORDINATE_EXT = 33873;
pub const GL_INSTRUMENT_BUFFER_POINTER_SGIX = 33152;
pub const GL_EVAL_BIT = 65536;
pub const GL_PROXY_TEXTURE_2D_ARRAY_EXT = 35867;
pub const GL_ARB_debug_output = 1;
pub const GL_RENDERBUFFER_ALPHA_SIZE = 36179;
pub const GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = 37087;
pub const GL_MATRIX23_ARB = 35031;
pub const GL_VIEW_CLASS_RGTC1_RED = 33488;
pub const GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI = 32953;
pub const GL_INDEX_MATERIAL_PARAMETER_EXT = 33209;
pub const GL_LUMINANCE8_EXT = 32832;
pub const GL_TEXTURE_GEN_R = 3170;
pub const GL_LO_BIAS_NV = 34581;
pub const GL_TEXTURE6 = 33990;
pub const GL_UNSIGNED_INT_24_8_EXT = 34042;
pub const GL_CURRENT_RASTER_INDEX = 2821;
pub const GL_SIGNED_NEGATE_NV = 34109;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT = 35973;
pub const GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT = 34757;
pub const GL_TEXTURE_RED_SIZE = 32860;
pub const GL_SAMPLES_SGIS = 32937;
pub const GL_ARB_indirect_parameters = 1;
pub const GL_BLUE_BIT_ATI = 4;
pub const GL_4PASS_3_EXT = 32935;
pub const GL_INT_SAMPLER_BUFFER_AMD = 36866;
pub const GL_ALPHA4 = 32827;
pub const GL_SOURCE2_ALPHA_EXT = 34186;
pub const GL_UNSIGNED_SHORT_8_8_REV_APPLE = 34235;
pub const GL_FRAMEBUFFER_COMPLETE = 36053;
pub const GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV = 36442;
pub const GL_RESTART_SUN = 1;
pub const GL_HANDLE_TYPE_D3D12_RESOURCE_EXT = 38282;
pub const GL_MESA_window_pos = 1;
pub const GL_TEXTURE_BLUE_TYPE = 35858;
pub const GL_TEXTURE_MAX_LOD = 33083;
pub const GL_TRANSFORM_FEEDBACK_ATTRIBS_NV = 35966;
pub const GL_PATH_PROJECTION_NV = 5889;
pub const GL_VERTEX_ATTRIB_ARRAY_ENABLED = 34338;
pub const GL_STATIC_ATI = 34656;
pub const GL_SIGNED_RGB8_NV = 34559;
pub const GL_QUAD_MESH_SUN = 34324;
pub const GL_TEXTURE_VIEW_MIN_LAYER = 33501;
pub const GL_ARB_geometry_shader4 = 1;
pub const GL_DEBUG_CALLBACK_FUNCTION_ARB = 33348;
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 36049;
pub const GL_PIXEL_COUNT_NV = 34918;
pub const GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB = 34983;
pub const GL_RENDERBUFFER_GREEN_SIZE = 36177;
pub const GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB = 36493;
pub const GL_TEXTURE_WIDTH = 4096;
pub const GL_STENCIL_BACK_OP_VALUE_AMD = 34637;
pub const GL_TEXTURE_2D_ARRAY = 35866;
pub const GL_NORMAL_ARRAY_LENGTH_NV = 36652;
pub const GL_TABLE_TOO_LARGE = 32817;
pub const GL_RENDER_GPU_MASK_NV = 38232;
pub const GL_FLOAT16_VEC2_NV = 36857;
pub const GL_NORMAL_ARRAY_BUFFER_BINDING = 34967;
pub const GL_TEXTURE_LIGHTING_MODE_HP = 33127;
pub const GL_LIGHT7 = 16391;
pub const GL_UNSIGNED_SHORT_8_8_MESA = 34234;
pub const GL_RENDERBUFFER_WIDTH = 36162;
pub const GL_TEXTURE_COORD_ARRAY = 32888;
pub const GL_ARB_shader_image_load_store = 1;
pub const GL_MATRIX15_ARB = 35023;
pub const GL_MANUAL_GENERATE_MIPMAP = 33428;
pub const GL_LINES_ADJACENCY_EXT = 10;
pub const GL_MATRIX10_ARB = 35018;
pub const GL_MAX_COLOR_ATTACHMENTS_EXT = 36063;
pub const GL_MAP2_VERTEX_3 = 3511;
pub const GL_NV_query_resource = 1;
pub const GL_IS_ROW_MAJOR = 37632;
pub const GL_NAMED_STRING_LENGTH_ARB = 36329;
pub const GL_INDEX_ARRAY_ADDRESS_NV = 36644;
pub const GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE = 35337;
pub const GL_CONVOLUTION_WIDTH_EXT = 32792;
pub const GL_PACK_SKIP_IMAGES = 32875;
pub const GL_FOG_COORDINATE_ARRAY_TYPE = 33876;
pub const GL_EVAL_VERTEX_ATTRIB13_NV = 34515;
pub const GL_TEXTURE21_ARB = 34005;
pub const GL_MAP1_TEXTURE_COORD_3 = 3477;
pub const GL_TIMEOUT_EXPIRED = 37147;
pub const GL_MODULATE_SUBTRACT_ATI = 34630;
pub const GL_QUERY_NO_WAIT_INVERTED = 36376;
pub const GL_TEXTURE_MAX_ANISOTROPY = 34046;
pub const GL_ARB_texture_gather = 1;
pub const GL_MAP2_TEXTURE_COORD_1 = 3507;
pub const GL_ALIASED_LINE_WIDTH_RANGE = 33902;
pub const GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB = 34973;
pub const GL_DOT_PRODUCT_TEXTURE_2D_NV = 34542;
pub const GL_TANGENT_ARRAY_POINTER_EXT = 33858;
pub const GL_PROVOKING_VERTEX_EXT = 36431;
pub const GL_EXT_texture_env_add = 1;
pub const GL_VERSION_2_0 = 1;
pub const GL_HARDMIX_NV = 37545;
pub const GL_DECR_WRAP = 34056;
pub const GL_MAP1_COLOR_4 = 3472;
pub const GL_FLOAT_RGBA32_NV = 34955;
pub const GL_T = 8193;
pub const GL_SGIS_texture_color_mask = 1;
pub const GL_UNSIGNED_SHORT_15_1_MESA = 34643;
pub const GL_DEBUG_SOURCE_THIRD_PARTY_ARB = 33353;
pub const GL_VERTEX_ARRAY_STRIDE = 32892;
pub const GL_EXT_separate_specular_color = 1;
pub const GL_GREATER = 516;
pub const GL_NUM_COMPRESSED_TEXTURE_FORMATS = 34466;
pub const GL_UNIFORM_BUFFER_BINDING = 35368;
pub const GL_COLOR_ARRAY_SIZE_EXT = 32897;
pub const GL_INVERTED_SCREEN_W_REND = 33937;
pub const GL_TEXTURE22_ARB = 34006;
pub const GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV = 36915;
pub const GL_OP_ROUND_EXT = 34704;
pub const GL_OES_fixed_point = 1;
pub const GL_HSL_LUMINOSITY_KHR = 37552;
pub const GL_GEQUAL = 518;
pub const GL_UNSIGNED_INT_8_8_8_8 = 32821;
pub const GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING = 34972;
pub const GL_ARB_seamless_cubemap_per_texture = 1;
pub const GL_ATI_blend_equation_separate = 1;
pub const GL_APPLE_specular_vector = 1;
pub const GL_NUM_EXTENSIONS = 33309;
pub const GL_TEXTURE_DEPTH_TYPE_ARB = 35862;
pub const GL_MAX_PIXEL_MAP_TABLE = 3380;
pub const GL_SGIX_blend_alpha_minmax = 1;
pub const GL_STATIC_DRAW_ARB = 35044;
pub const GL_HALF_FLOAT_NV = 5131;
pub const GL_ARB_texture_env_crossbar = 1;
pub const GL_INDEX_MODE = 3120;
pub const GL_MITER_REVERT_NV = 37031;
pub const GL_FONT_UNINTELLIGIBLE_NV = 37739;
pub const GL_MATRIX22_ARB = 35030;
pub const GL_DEPTH32F_STENCIL8_NV = 36268;
pub const GL_UNSIGNED_INT_ATOMIC_COUNTER = 37595;
pub const GL_MULTISAMPLE_3DFX = 34482;
pub const GL_INDEX_BIT_PGI = 524288;
pub const GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = 36311;
pub const GL_MULTISAMPLE_FILTER_HINT_NV = 34100;
pub const GL_SPRITE_AXIS_SGIX = 33098;
pub const GL_COMPRESSED_RED = 33317;
pub const GL_RGB32F_ARB = 34837;
pub const GL_HISTOGRAM_ALPHA_SIZE = 32811;
pub const GL_SRGB8_ALPHA8 = 35907;
pub const GL_COLOR_TABLE_FORMAT = 32984;
pub const GL_INT_SAMPLER_CUBE_MAP_ARRAY = 36878;
pub const GL_MATRIX28_ARB = 35036;
pub const GL_SRC0_RGB = 34176;
pub const GL_EXT_stencil_clear_tag = 1;
pub const GL_R16 = 33322;
pub const GL_DEPENDENT_HILO_TEXTURE_2D_NV = 34904;
pub const GL_FRAGMENT_LIGHT1_SGIX = 33805;
pub const GL_ARB_ES3_1_compatibility = 1;
pub const GL_TILE_RASTER_ORDER_INCREASING_X_MESA = 35769;
pub const GL_INTENSITY_FLOAT32_APPLE = 34839;
pub const GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB = 34971;
pub const GL_EXT_pixel_transform = 1;
pub const GL_HISTOGRAM_LUMINANCE_SIZE_EXT = 32812;
pub const GL_MAX_3D_TEXTURE_SIZE = 32883;
pub const GL_REG_25_ATI = 35130;
pub const GL_NV_shader_buffer_store = 1;
pub const GL_PROGRAM_BINDING_ARB = 34423;
pub const GL_MAX_PROGRAM_ATTRIBS_ARB = 34989;
pub const GL_RELEASED_APPLE = 35353;
pub const GL_QUERY_RESULT_ARB = 34918;
pub const GL_COMBINE = 34160;
pub const GL_INDEX_TEST_REF_EXT = 33207;
pub const GL_SEPARABLE_2D_EXT = 32786;
pub const GL_TEXTURE_GEN_S = 3168;
pub const GL_SUN_slice_accum = 1;
pub const GL_TEXTURE7 = 33991;
pub const GL_AMD_multi_draw_indirect = 1;
pub const GL_VERTEX_ATTRIB_ARRAY_SIZE = 34339;
pub const GL_EXP2 = 2049;
pub const GL_NV_deep_texture3D = 1;
pub const GL_NV_stereo_view_rendering = 1;
pub const GL_ALPHA_TO_COVERAGE_DITHER_ENABLE_NV = 37710;
pub const GL_CURRENT_TANGENT_EXT = 33851;
pub const GL_NV_path_rendering_shared_edge = 1;
pub const GL_POST_CONVOLUTION_RED_SCALE = 32796;
pub const GL_DONT_CARE = 4352;
pub const GL_ARRAY_STRIDE = 37630;
pub const GL_REPLACE_OLDEST_SUN = 3;
pub const GL_RGB_FLOAT32_ATI = 34837;
pub const GL_MAP2_INDEX = 3505;
pub const GL_RGB5_A1_EXT = 32855;
pub const GL_COMPRESSED_ALPHA_ARB = 34025;
pub const GL_FUNC_SUBTRACT = 32778;
pub const GL_SHADE_MODEL = 2900;
pub const GL_STATIC_READ = 35045;
pub const GL_EYE_DISTANCE_TO_POINT_SGIS = 33264;
pub const GL_TEXTURE_2D_MULTISAMPLE_ARRAY = 37122;
pub const GL_PRIMITIVE_RESTART_INDEX_NV = 34137;
pub const GL_MAP1_VERTEX_ATTRIB3_4_NV = 34403;
pub const GL_FRAMEBUFFER_BLEND = 33419;
pub const GL_DRAW_BUFFER8_ATI = 34861;
pub const GL_RGB_SCALE = 34163;
pub const GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS = 36328;
pub const GL_SHADER_STORAGE_BUFFER = 37074;
pub const GL_PATH_FORMAT_SVG_NV = 36976;
pub const GL_SKIP_COMPONENTS1_NV = -6;
pub const GL_YCRCBA_SGIX = 33561;
pub const GL_TESS_EVALUATION_SUBROUTINE_UNIFORM = 37616;
pub const GL_VECTOR_EXT = 34751;
pub const GL_IUI_V3F_EXT = 33198;
pub const GL_SRGB_READ = 33431;
pub const GL_SGIX_flush_raster = 1;
pub const GL_BUFFER_BINDING = 37634;
pub const GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB = 35723;
pub const GL_SAMPLE_BUFFERS_ARB = 32936;
pub const GL_INTERPOLATE = 34165;
pub const GL_INTENSITY16_SNORM = 36891;
pub const GL_4PASS_0_SGIS = 32932;
pub const GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV = 36924;
pub const GL_DRAW_BUFFER4 = 34857;
pub const GL_AMD_pinned_memory = 1;
pub const GL_NV_shader_storage_buffer_object = 1;
pub const GL_LIGHT6 = 16390;
pub const GL_SOURCE3_ALPHA_NV = 34187;
pub const GL_TEXTURE_SPARSE_ARB = 37286;
pub const GL_TEXTURE_BINDING_1D = 32872;
pub const GL_OP_SUB_EXT = 34710;
pub const GL_UNSIGNED_INT_8_24_REV_MESA = 34642;
pub const GL_AMD_gpu_shader_half_float = 1;
pub const GL_TEXTURE_2D_STACK_MESAX = 34650;
pub const GL_EXT_blend_equation_separate = 1;
pub const GL_FOG_END = 2916;
pub const GL_SGIX_shadow_ambient = 1;
pub const GL_ADD_ATI = 35171;
pub const GL_FOG_OFFSET_VALUE_SGIX = 33177;
pub const GL_INT = 5124;
pub const GL_LUMINANCE = 6409;
pub const GL_CONVOLUTION_WIDTH = 32792;
pub const GL_TEXTURE_MEMORY_LAYOUT_INTEL = 33791;
pub const GL_UNSIGNED_SHORT_5_6_5 = 33635;
pub const GL_MAP1_TEXTURE_COORD_2 = 3476;
pub const GL_TABLE_TOO_LARGE_EXT = 32817;
pub const GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB = 34340;
pub const GL_NORMAL_ARRAY_POINTER = 32911;
pub const GL_EXT_blend_minmax = 1;
pub const GL_MAP2_GRID_SEGMENTS = 3539;
pub const GL_HISTOGRAM_WIDTH_EXT = 32806;
pub const GL_CON_10_ATI = 35147;
pub const GL_ARRAY_OBJECT_BUFFER_ATI = 34662;
pub const GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB = 34970;
pub const GL_MULTICAST_PROGRAMMABLE_SAMPLE_LOCATION_NV = 38217;
pub const GL_HISTOGRAM_ALPHA_SIZE_EXT = 32811;
pub const GL_TESS_CONTROL_OUTPUT_VERTICES = 36469;
pub const GL_SAMPLER_2D_RECT_SHADOW_ARB = 35684;
pub const GL_UNSIGNED_INT_SAMPLER_CUBE = 36308;
pub const GL_ARB_framebuffer_sRGB = 1;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 37497;
pub const GL_VERTEX_SHADER_LOCALS_EXT = 34771;
pub const GL_VARIABLE_F_NV = 34088;
pub const GL_MAX_SHADER_BUFFER_ADDRESS_NV = 36661;
pub const GL_SPIR_V_EXTENSIONS = 38227;
pub const GL_MAX_SPOT_EXPONENT_NV = 34053;
pub const GL_DEBUG_SEVERITY_MEDIUM_ARB = 37191;
pub const GL_NUM_LOOPBACK_COMPONENTS_ATI = 35188;
pub const GL_RGB16_EXT = 32852;
pub const GL_PATCHES = 14;
pub const GL_SWIZZLE_STRQ_ATI = 35194;
pub const GL_VERTEX_PROGRAM_TWO_SIDE = 34371;
pub const GL_ARB_shading_language_100 = 1;
pub const GL_SGIX_subsample = 1;
pub const GL_CON_26_ATI = 35163;
pub const GL_MODELVIEW15_ARB = 34607;
pub const GL_ASYNC_TEX_IMAGE_SGIX = 33628;
pub const GL_RGBA4_S3TC = 33699;
pub const GL_VERTEX_ARRAY_SIZE_EXT = 32890;
pub const GL_TILE_RASTER_ORDER_FIXED_MESA = 35768;
pub const GL_FOG_HINT = 3156;
pub const GL_MIPMAP = 33427;
pub const GL_INT_2_10_10_10_REV = 36255;
pub const GL_SOURCE2_ALPHA_ARB = 34186;
pub const GL_DRAW_ARRAYS_COMMAND_NV = 3;
pub const GL_FLOAT_RGBA16_NV = 34954;
pub const GL_TEXTURE_ALPHA_TYPE = 35859;
pub const GL_ARB_shader_atomic_counters = 1;
pub const GL_LINEARDODGE_NV = 37540;
pub const GL_LUMINANCE32UI_EXT = 36212;
pub const GL_MATRIX_MODE = 2976;
pub const GL_UNPACK_ROW_LENGTH = 3314;
pub const GL_EDGE_FLAG = 2883;
pub const GL_IBM_vertex_array_lists = 1;
pub const GL_HSL_SATURATION_KHR = 37550;
pub const GL_FLOAT_MAT2_ARB = 35674;
pub const GL_ARB_copy_buffer = 1;
pub const GL_QUAD_LUMINANCE4_SGIS = 33056;
pub const GL_TEXTURE27_ARB = 34011;
pub const GL_VIEWPORT_POSITION_W_SCALE_X_COEFF_NV = 37757;
pub const GL_SPRITE_SGIX = 33096;
pub const GL_UNSIGNED_INT_SAMPLER_1D_ARRAY = 36310;
pub const GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT = 36263;
pub const GL_FRAGMENT_NORMAL_EXT = 33610;
pub const GL_SAMPLER_CUBE_SHADOW = 36293;
pub const GL_3_BYTES = 5128;
pub const GL_MIN_EXT = 32775;
pub const GL_RGB4_EXT = 32847;
pub const GL_TEXTURE_SAMPLES = 37126;
pub const GL_TRANSFORM_FEEDBACK_BARRIER_BIT = 2048;
pub const GL_TEXTURE4 = 33988;
pub const GL_OP_CROSS_PRODUCT_EXT = 34711;
pub const GL_NAME_STACK_DEPTH = 3440;
pub const GL_TEXTURE_BINDING_CUBE_MAP_ARB = 34068;
pub const GL_MAX_TEXTURE_COORDS_ARB = 34929;
pub const GL_LINEAR_CLIPMAP_NEAREST_SGIX = 33871;
pub const GL_CURRENT_RASTER_POSITION_VALID = 2824;
pub const GL_TEXTURE_SHADOW = 33441;
pub const GL_HILO16_NV = 34552;
pub const GL_LUMINANCE4_EXT = 32831;
pub const GL_ALPHA_TO_COVERAGE_DITHER_DEFAULT_NV = 37709;
pub const GL_VERTEX_ARRAY_POINTER = 32910;
pub const GL_PIXEL_MAP_I_TO_R = 3186;
pub const GL_AMD_sparse_texture = 1;
pub const GL_MODELVIEW = 5888;
pub const GL_EXPAND_NEGATE_NV = 34105;
pub const GL_SAMPLE_ALPHA_TO_MASK_EXT = 32926;
pub const GL_UNPACK_SWAP_BYTES = 3312;
pub const GL_MAP2_VERTEX_ATTRIB2_4_NV = 34418;
pub const GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = 33778;
pub const GL_VERTEX_ID_NV = 35963;
pub const GL_ARB_ES2_compatibility = 1;
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT = 36265;
pub const GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB = 35660;
pub const GL_LUMINANCE12_EXT = 32833;
pub const GL_T2F_C4F_N3F_V3F = 10796;
pub const GL_MAX_VERTEX_ATTRIB_BINDINGS = 33498;
pub const GL_DRAW_BUFFER5 = 34858;
pub const GL_APPLE_texture_range = 1;
pub const GL_LIGHT1 = 16385;
pub const GL_SAMPLER_OBJECT_AMD = 37205;
pub const GL_INTEL_framebuffer_CMAA = 1;
pub const GL_FOG_BIT = 128;
pub const GL_NORMAL_ARRAY_TYPE = 32894;
pub const GL_LESS = 513;
pub const GL_VERTEX_ATTRIB_MAP2_APPLE = 35329;
pub const GL_BUFFER = 33504;
pub const GL_SAMPLER_2D_ARB = 35678;
pub const GL_DRAW_BUFFER12_ATI = 34865;
pub const GL_DUP_FIRST_CUBIC_CURVE_TO_NV = 242;
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT = 35979;
pub const GL_R1UI_T2F_V3F_SUN = 34249;
pub const GL_SGIX_pixel_texture = 1;
pub const GL_TEXTURE_BINDING_BUFFER_ARB = 35884;
pub const GL_ALPHA_INTEGER = 36247;
pub const GL_ARB_texture_query_lod = 1;
pub const GL_MAX = 32776;
pub const GL_LUMINANCE_INTEGER_EXT = 36252;
pub const GL_PACK_CMYK_HINT_EXT = 32782;
pub const GL_TEXTURE_COORD_ARRAY_POINTER_EXT = 32914;
pub const GL_TRIANGLES_ADJACENCY_ARB = 12;
pub const GL_UNPACK_COMPRESSED_BLOCK_DEPTH = 37161;
pub const GL_SGIX_vertex_preclip = 1;
pub const GL_TEXTURE_COMPARE_MODE = 34892;
pub const GL_READ_PIXELS_TYPE = 33422;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_X = 34069;
pub const GL_ARB_draw_buffers = 1;
pub const GL_422_REV_EXT = 32973;
pub const GL_E_TIMES_F_NV = 34097;
pub const GL_SKIP_MISSING_GLYPH_NV = 37033;
pub const GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD = 8;
pub const GL_COMBINER_BIAS_NV = 34121;
pub const GL_NV_path_rendering = 1;
pub const GL_INTENSITY_EXT = 32841;
pub const GL_COMBINER_SCALE_NV = 34120;
pub const GL_SAMPLES = 32937;
pub const GL_FIELD_LOWER_NV = 36899;
pub const GL_BUMP_ROT_MATRIX_SIZE_ATI = 34678;
pub const GL_FRAGMENT_SHADER_ATI = 35104;
pub const GL_UNSIGNED_INT64_VEC4_ARB = 36855;
pub const GL_RGB16I_EXT = 36233;
pub const GL_R1UI_V3F_SUN = 34244;
pub const GL_QUERY_NO_WAIT_NV = 36372;
pub const GL_NV_conservative_raster_underestimation = 1;
pub const GL_MULTISAMPLE = 32925;
pub const GL_CLIENT_ACTIVE_TEXTURE = 34017;
pub const GL_MODELVIEW10_ARB = 34602;
pub const GL_ALPHA8I_EXT = 36240;
pub const GL_SIGNED_LUMINANCE_NV = 34561;
pub const GL_DUAL_INTENSITY4_SGIS = 33048;
pub const GL_PROGRAM_OBJECT_ARB = 35648;
pub const GL_MAX_PROGRAM_TEXEL_OFFSET_EXT = 35077;
pub const GL_REPLACE_EXT = 32866;
pub const GL_READ_PIXEL_DATA_RANGE_LENGTH_NV = 34939;
pub const GL_MAX_TEXTURE_COORDS = 34929;
pub const GL_POINT_SIZE_MIN_EXT = 33062;
pub const GL_BUFFER_MAPPED = 35004;
pub const GL_CONVOLUTION_2D = 32785;
pub const GL_T4F_V4F = 10792;
pub const GL_COLOR_ATTACHMENT3_EXT = 36067;
pub const GL_TIMESTAMP = 36392;
pub const GL_COMPRESSED_RGB_S3TC_DXT1_EXT = 33776;
pub const GL_DETAIL_TEXTURE_2D_BINDING_SGIS = 32918;
pub const GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB = 34464;
pub const GL_RGBA_FLOAT32_ATI = 34836;
pub const GL_VERTEX_ATTRIB_BINDING = 33492;
pub const GL_FRACTIONAL_EVEN = 36476;
pub const GL_NUM_FRAGMENT_CONSTANTS_ATI = 35183;
pub const GL_EXT_framebuffer_object = 1;
pub const GL_LUMINANCE8 = 32832;
pub const GL_BLUE_SCALE = 3354;
pub const GL_SHADER_OPERATION_NV = 34527;
pub const GL_ALPHA_INTEGER_EXT = 36247;
pub const GL_NV_gpu_multicast = 1;
pub const GL_CLIPPING_INPUT_PRIMITIVES = 33526;
pub const GL_EXCLUSION_KHR = 37536;
pub const GL_LINE_WIDTH_GRANULARITY = 2851;
pub const GL_SGI_texture_color_table = 1;
pub const GL_RGBA16_EXT = 32859;
pub const GL_INT16_VEC3_NV = 36838;
pub const GL_2PASS_0_EXT = 32930;
pub const GL_DEPTH_CLAMP_NV = 34383;
pub const GL_QUERY_RESOURCE_MEMTYPE_VIDMEM_NV = 38210;
pub const GL_MAP_STENCIL = 3345;
pub const GL_UNSIGNED_INT_IMAGE_2D_EXT = 36963;
pub const GL_SIGNED_HILO_NV = 34553;
pub const GL_DEBUG_TYPE_PORTABILITY = 33359;
pub const GL_ARB_sparse_texture_clamp = 1;
pub const GL_TEXTURE5 = 33989;
pub const GL_SGIX_shadow = 1;
pub const GL_DOT3_RGB_ARB = 34478;
pub const GL_ARB_draw_indirect = 1;
pub const GL_COMPRESSED_RG_RGTC2 = 36285;
pub const GL_MAP_READ_BIT = 1;
pub const GL_FRAME_NV = 36390;
pub const GL_AMD_framebuffer_sample_positions = 1;
pub const GL_VIEWPORT_SWIZZLE_NEGATIVE_X_NV = 37713;
pub const GL_MAX_NAME_STACK_DEPTH = 3383;
pub const GL_ATOMIC_COUNTER_BUFFER_SIZE = 37571;
pub const GL_VIRTUAL_PAGE_SIZE_Y_AMD = 37270;
pub const GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV = 35956;
pub const GL_POINTS = 0;
pub const GL_REPLACE_MIDDLE_SUN = 2;
pub const GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 37495;
pub const GL_MAX_TEXTURE_UNITS = 34018;
pub const GL_TEXTURE_CUBE_MAP = 34067;
pub const GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI = 32955;
pub const GL_FLOAT16_VEC3_NV = 36858;
pub const GL_RESAMPLE_REPLICATE_OML = 35206;
pub const GL_TEXTURE_COORD_ARRAY_SIZE_EXT = 32904;
pub const GL_QUERY_RESOURCE_RENDERBUFFER_NV = 38214;
pub const GL_FRAGMENT_INPUT_NV = 37741;
pub const GL_ARB_occlusion_query = 1;
pub const GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS = 36479;
pub const GL_ARB_point_sprite = 1;
pub const GL_NV_fragment_program_option = 1;
pub const GL_OP_MOV_EXT = 34713;
pub const GL_DOMAIN = 2562;
pub const GL_NUM_SUPPORTED_MULTISAMPLE_MODES_AMD = 37302;
pub const GL_DOT3_RGBA_EXT = 34625;
pub const GL_EXT_texture3D = 1;
pub const GL_DRAW_BUFFER6 = 34859;
pub const GL_LIGHT0 = 16384;
pub const GL_DOUBLE_MAT4x2_EXT = 36685;
pub const GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV = 34546;
pub const GL_LINEAR_SHARPEN_SGIS = 32941;
pub const GL_ONE_MINUS_DST_COLOR = 775;
pub const GL_FOG_COORD_ARRAY_ADDRESS_NV = 36648;
pub const GL_DUAL_LUMINANCE12_SGIS = 33046;
pub const GL_TRANSPOSE_MODELVIEW_MATRIX = 34019;
pub const GL_PIXEL_SUBSAMPLE_2424_SGIX = 34211;
pub const GL_PIXEL_MAP_I_TO_A_SIZE = 3253;
pub const GL_NOP_COMMAND_NV = 1;
pub const GL_MAX_TESS_GEN_LEVEL = 36478;
pub const GL_COMPRESSED_RGBA = 34030;
pub const GL_GREEN_MAX_CLAMP_INGR = 34149;
pub const GL_CUBIC_HP = 33119;
pub const GL_MODELVIEW_STACK_DEPTH = 2979;
pub const GL_COLOR_TABLE = 32976;
pub const GL_WEIGHT_ARRAY_SIZE_ARB = 34475;
pub const GL_MAP1_TEXTURE_COORD_4 = 3478;
pub const GL_OP_POWER_EXT = 34707;
pub const GL_GLOBAL_ALPHA_SUN = 33241;
pub const GL_IMAGE_CLASS_10_10_10_2 = 33475;
pub const GL_RASTERIZER_DISCARD_EXT = 35977;
pub const GL_DOUBLE_VEC4 = 36862;
pub const GL_MAP2_TEXTURE_COORD_4 = 3510;
pub const GL_FLOAT16_MAT3x4_AMD = 37323;
pub const GL_FORMAT_SUBSAMPLE_24_24_OML = 35202;
pub const GL_EVAL_VERTEX_ATTRIB7_NV = 34509;
pub const GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV = 36260;
pub const GL_COLOR_INDEX8_EXT = 32997;
pub const GL_FLOAT_RGB32_NV = 34953;
pub const GL_VIEWPORT_SWIZZLE_NEGATIVE_Y_NV = 37715;
pub const GL_GEOMETRY_SHADER_ARB = 36313;
pub const GL_REG_4_ATI = 35109;
pub const GL_WINDOW_RECTANGLE_EXT = 36626;
pub const GL_LIGHTEN_KHR = 37528;
pub const GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV = 34897;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 34071;
pub const GL_DEBUG_SEVERITY_HIGH_AMD = 37190;
pub const GL_TEXTURE_COMPRESSED_BLOCK_WIDTH = 33457;
pub const GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB = 35661;
pub const GL_EXT_framebuffer_multisample = 1;
pub const GL_REG_8_ATI = 35113;
pub const GL_TEXTURE11 = 33995;
pub const GL_COMPRESSED_RGB_FXT1_3DFX = 34480;
pub const GL_RGB10 = 32850;
pub const GL_VIBRANCE_SCALE_NV = 34579;
pub const GL_RGBA32UI = 36208;
pub const GL_ADD_SIGNED = 34164;
pub const GL_RG_INTEGER = 33320;
pub const GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV = 37073;
pub const GL_SAMPLER = 33510;
pub const GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 35958;
pub const GL_PATCH_DEFAULT_OUTER_LEVEL = 36468;
pub const GL_INT_IMAGE_CUBE_MAP_ARRAY = 36959;
pub const GL_DYNAMIC_COPY_ARB = 35050;
pub const GL_BUFFER_USAGE = 34661;
pub const GL_MAP_WRITE_BIT = 2;
pub const GL_GEOMETRY_VERTICES_OUT = 35094;
pub const GL_MAX_TEXTURE_COORDS_NV = 34929;
pub const GL_INT8_VEC4_NV = 36835;
pub const GL_BOOL_VEC3_ARB = 35672;
pub const GL_QUERY_RESULT_AVAILABLE_ARB = 34919;
pub const GL_LUMINANCE_SNORM = 36881;
pub const GL_CIRCULAR_CCW_ARC_TO_NV = 248;
pub const GL_PACK_RESAMPLE_OML = 35204;
pub const GL_MESA_shader_integer_functions = 1;
pub const GL_BUFFER_IMMUTABLE_STORAGE = 33311;
pub const GL_LIGHTING = 2896;
pub const GL_ACTIVE_SUBROUTINE_UNIFORMS = 36326;
pub const GL_MAX_COLOR_ATTACHMENTS = 36063;
pub const GL_CURRENT_RASTER_NORMAL_SGIX = 33798;
pub const GL_VERTEX_ARRAY_OBJECT_EXT = 37204;
pub const GL_CND_ATI = 35178;
pub const GL_MAX_VIEWPORTS = 33371;
pub const GL_EXT_texture_perturb_normal = 1;
pub const GL_DEPTH_FUNC = 2932;
pub const GL_REG_17_ATI = 35122;
pub const GL_IBM_texture_mirrored_repeat = 1;
pub const GL_LINE_TO_NV = 4;
pub const GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = 37081;
pub const GL_ARRAY_ELEMENT_LOCK_COUNT_EXT = 33193;
pub const GL_MAP2_VERTEX_ATTRIB12_4_NV = 34428;
pub const GL_PALETTE4_RGB5_A1_OES = 35732;
pub const GL_422_REV_AVERAGE_EXT = 32975;
pub const GL_SAMPLER_3D = 35679;
pub const GL_MAX_IMAGE_UNITS_EXT = 36664;
pub const GL_ARB_color_buffer_float = 1;
pub const GL_CONVEX_HULL_NV = 37003;
pub const GL_SECONDARY_COLOR_ARRAY_LENGTH_NV = 36657;
pub const GL_TEXTURE_MAX_CLAMP_R_SGIX = 33643;
pub const GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV = 34350;
pub const GL_SAMPLER_2D_RECT = 35683;
pub const GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL = 33782;
pub const GL_POLYGON_OFFSET_FACTOR_EXT = 32824;
pub const GL_PATH_STENCIL_REF_NV = 37048;
pub const GL_ARB_texture_mirror_clamp_to_edge = 1;
pub const GL_OBJECT_LINE_SGIS = 33271;
pub const GL_MATRIX_INDEX_ARRAY_ARB = 34884;
pub const GL_NORMAL_ARRAY_EXT = 32885;
pub const GL_DISTANCE_ATTENUATION_EXT = 33065;
pub const GL_INTEL_parallel_arrays = 1;
pub const GL_REPLACE_VALUE_AMD = 34635;
pub const GL_DRAW_BUFFER1_ATI = 34854;
pub const GL_VBO_FREE_MEMORY_ATI = 34811;
pub const GL_PIXEL_PACK_BUFFER_BINDING_ARB = 35053;
pub const GL_NV_geometry_shader_passthrough = 1;
pub const GL_COMPILE_AND_EXECUTE = 4865;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT = 34069;
pub const GL_UTF16_NV = 37019;
pub const GL_READ_PIXEL_DATA_RANGE_NV = 34937;
pub const GL_STREAM_DRAW_ARB = 35040;
pub const GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT = 35955;
pub const GL_RGB_422_APPLE = 35359;
pub const GL_COLOR_ATTACHMENT8_EXT = 36072;
pub const GL_SAMPLES_3DFX = 34484;
pub const GL_RGBA8_SNORM = 36759;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT = 36052;
pub const GL_BLEND_SRC = 3041;
pub const GL_SWIZZLE_STQ_DQ_ATI = 35193;
pub const GL_DEPTH_COMPONENT32F_NV = 36267;
pub const GL_ARB_sample_locations = 1;
pub const GL_ARB_transpose_matrix = 1;
pub const GL_TEXTURE_FETCH_BARRIER_BIT_EXT = 8;
pub const GL_DEBUG_LOGGED_MESSAGES_AMD = 37189;
pub const GL_MAX_TEXTURE_UNITS_ARB = 34018;
pub const GL_TEXTURE_CUBE_MAP_ARB = 34067;
pub const GL_DIFFERENCE_NV = 37534;
pub const GL_CONVOLUTION_HINT_SGIX = 33558;
pub const GL_FLOAT_VEC4 = 35666;
pub const GL_COLOR_TABLE_GREEN_SIZE = 32987;
pub const GL_CURRENT_QUERY = 34917;
pub const GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 34830;
pub const GL_BLUE_INTEGER = 36246;
pub const GL_AMD_shader_atomic_counter_ops = 1;
pub const GL_COMPARE_R_TO_TEXTURE = 34894;
pub const GL_NORMAL_BIT_PGI = 134217728;
pub const GL_CULL_FACE = 2884;
pub const GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL = 33781;
pub const GL_PROGRAM_ATTRIBS_ARB = 34988;
pub const GL_ATI_element_array = 1;
pub const GL_DRAW_BUFFER7 = 34860;
pub const GL_LIGHT3 = 16387;
pub const GL_T2F_IUI_V2F_EXT = 33201;
pub const GL_ARB_depth_clamp = 1;
pub const GL_STENCIL_OP_VALUE_AMD = 34636;
pub const GL_PROXY_TEXTURE_2D_EXT = 32868;
pub const GL_DUAL_INTENSITY8_SGIS = 33049;
pub const GL_DRAW_BUFFER0_ARB = 34853;
pub const GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB = 35657;
pub const GL_SLUMINANCE_EXT = 35910;
pub const GL_FONT_X_MIN_BOUNDS_BIT_NV = 65536;
pub const GL_NORMAL_ARRAY_STRIDE = 32895;
pub const GL_FOG_COORDINATE_SOURCE = 33872;
pub const GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM = 103084;
pub const GL_DOUBLE_VEC3 = 36861;
pub const GL_MODELVIEW3_ARB = 34595;
pub const GL_3DFX_multisample = 1;
pub const GL_UNSIGNED_INT_8_8_S8_S8_REV_NV = 34523;
pub const GL_MATRIX0_ARB = 35008;
pub const GL_UNSIGNED_INT_IMAGE_3D_EXT = 36964;
pub const GL_DISPLAY_LIST = 33511;
pub const GL_POLYGON_OFFSET_BIAS_EXT = 32825;
pub const GL_MIRRORED_REPEAT_IBM = 33648;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 34073;
pub const GL_PERFQUERY_SINGLE_CONTEXT_INTEL = 0;
pub const GL_EXT_texture_shared_exponent = 1;
pub const GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL = 38144;
pub const GL_RGBA_FLOAT16_APPLE = 34842;
pub const GL_TEXTURE_WRAP_Q_SGIS = 33079;
pub const GL_TEXTURE10 = 33994;
pub const GL_PIXEL_PACK_BUFFER_EXT = 35051;
pub const GL_SECONDARY_COLOR_ARRAY_TYPE = 33883;
pub const GL_DEPTH_COMPONENT16_SGIX = 33189;
pub const GL_MAX_TRANSFORM_FEEDBACK_BUFFERS = 36464;
pub const GL_VERTICES_SUBMITTED_ARB = 33518;
pub const GL_IMAGE_PIXEL_FORMAT = 33449;
pub const GL_PROGRAM_FORMAT_ASCII_ARB = 34933;
pub const GL_COMPRESSED_INTENSITY_ARB = 34028;
pub const GL_TEXTURE_SWIZZLE_RGBA = 36422;
pub const GL_INVARIANT_VALUE_EXT = 34794;
pub const GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = 33122;
pub const GL_RASTERIZER_DISCARD_NV = 35977;
pub const GL_CURRENT_FOG_COORDINATE_EXT = 33875;
pub const GL_FONT_UNDERLINE_POSITION_BIT_NV = 67108864;
pub const GL_DRAW_PIXELS_APPLE = 35338;
pub const GL_NO_RESET_NOTIFICATION_ARB = 33377;
pub const GL_DEBUG_TYPE_ERROR = 33356;
pub const GL_RG16F = 33327;
pub const GL_INDEX_ARRAY_TYPE_EXT = 32901;
pub const GL_IMAGE_CLASS_2_X_32 = 33466;
pub const GL_PIXEL_BUFFER_BARRIER_BIT = 128;
pub const GL_VERTEX_ATTRIB_ARRAY_POINTER = 34373;
pub const GL_VIEW_CLASS_48_BITS = 33479;
pub const GL_PROJECTION_STACK_DEPTH = 2980;
pub const GL_PATH_DASH_OFFSET_NV = 36990;
pub const GL_PRIMITIVE_BOUNDING_BOX_ARB = 37566;
pub const GL_NAND = 5390;
pub const GL_COMPARE_REF_TO_TEXTURE = 34894;
pub const GL_DS_BIAS_NV = 34582;
pub const GL_CONSTANT_BORDER_HP = 33105;
pub const GL_COMBINER_COMPONENT_USAGE_NV = 34116;
pub const GL_TEXTURE_SWIZZLE_R_EXT = 36418;
pub const GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 33591;
pub const GL_MIN = 32775;
pub const GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV = 34545;
pub const GL_DEPTH_COMPONENT16 = 33189;
pub const GL_DEBUG_SOURCE_API = 33350;
pub const GL_CON_16_ATI = 35153;
pub const GL_EVAL_VERTEX_ATTRIB11_NV = 34513;
pub const GL_REG_13_ATI = 35118;
pub const GL_PATH_INITIAL_END_CAP_NV = 36983;
pub const GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 34832;
pub const GL_BLEND_SRC_RGB = 32969;
pub const GL_IBM_static_data = 1;
pub const GL_BLUE_MAX_CLAMP_INGR = 34150;
pub const GL_EXT_post_depth_coverage = 1;
pub const GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV = 36444;
pub const GL_DEPTH32F_STENCIL8 = 36013;
pub const GL_DEPTH_CLEAR_VALUE = 2931;
pub const GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = 36481;
pub const GL_CLIENT_ACTIVE_TEXTURE_ARB = 34017;
pub const GL_FEEDBACK_BUFFER_TYPE = 3570;
pub const GL_FACTOR_MAX_AMD = 36893;
pub const GL_ALL_ATTRIB_BITS = 4294967295;
pub const GL_CONSTANT_ALPHA_EXT = 32771;
pub const GL_NORMAL_ARRAY_ADDRESS_NV = 36642;
pub const GL_MODELVIEW_PROJECTION_NV = 34345;
pub const GL_GLEXT_VERSION = 20180725;
pub const GL_VERTEX_SOURCE_ATI = 34676;
pub const GL_DRAW_BUFFER11_ATI = 34864;
pub const GL_MAX_DRAW_BUFFERS = 34852;
pub const GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB = 34829;
pub const GL_COMPATIBLE_SUBROUTINES = 36427;
pub const GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV = 36923;
pub const GL_LUMINANCE6_ALPHA2_EXT = 32836;
pub const GL_FRAMEBUFFER_RENDERABLE = 33417;
pub const GL_PGI_misc_hints = 1;
pub const GL_SUNX_constant_data = 1;
pub const GL_VERTEX_PROGRAM_BINDING_NV = 34378;
pub const GL_SGIX_async = 1;
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER = 37100;
pub const GL_MAX_CONVOLUTION_HEIGHT_EXT = 32795;
pub const GL_COLOR_INDEX1_EXT = 32994;
pub const GL_HISTOGRAM_SINK = 32813;
pub const GL_EXT_polygon_offset = 1;
pub const GL_OPERAND2_ALPHA_EXT = 34202;
pub const GL_COMPRESSED_SLUMINANCE = 35914;
pub const GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV = 34896;
pub const GL_CON_17_ATI = 35154;
pub const GL_TEXTURE_LO_SIZE_NV = 34588;
pub const GL_PIXEL_MAP_I_TO_I_SIZE = 3248;
pub const GL_TEXTURE_NORMAL_EXT = 34223;
pub const GL_NV_vertex_program2_option = 1;
pub const GL_EDGE_FLAG_ARRAY_POINTER_EXT = 32915;
pub const GL_EXT_texture = 1;
pub const GL_MAX_MAP_TESSELLATION_NV = 34518;
pub const GL_LOCATION_COMPONENT = 37706;
pub const GL_COLOR_TABLE_INTENSITY_SIZE = 32991;
pub const GL_TEXTURE_DEFORMATION_SGIX = 33173;
pub const GL_ATOMIC_COUNTER_BARRIER_BIT = 4096;
pub const GL_RENDERBUFFER_DEPTH_SIZE_EXT = 36180;
pub const GL_EXT_semaphore_fd = 1;
pub const GL_AND_REVERSE = 5378;
pub const GL_RGBA2_EXT = 32853;
pub const GL_RASTERIZER_DISCARD = 35977;
pub const GL_MAP2_GRID_DOMAIN = 3538;
pub const GL_TESSELLATION_FACTOR_AMD = 36869;
pub const GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV = 34899;
pub const GL_CLIENT_PIXEL_STORE_BIT = 1;
pub const GL_SRGB8 = 35905;
pub const GL_HANDLE_TYPE_OPAQUE_FD_EXT = 38278;
pub const GL_SAMPLE_ALPHA_TO_ONE_EXT = 32927;
pub const GL_BUFFER_UPDATE_BARRIER_BIT_EXT = 512;
pub const GL_VERTEX_ATTRIB_ARRAY8_NV = 34392;
pub const GL_DRAW_BUFFER0 = 34853;
pub const GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = 35657;
pub const GL_LIGHT2 = 16386;
pub const GL_VERTICES_SUBMITTED = 33518;
pub const GL_RGBA_MODE = 3121;
pub const GL_RENDERBUFFER_BLUE_SIZE = 36178;
pub const GL_PROGRAM_PIPELINE_BINDING = 33370;
pub const GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT = 33458;
pub const GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT = 36059;
pub const GL_ALPHA32F_ARB = 34838;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED = 36387;
pub const GL_ARB_sparse_buffer = 1;
pub const GL_SGIX_depth_pass_instrument = 1;
pub const GL_SAMPLER_2D_RECT_SHADOW = 35684;
pub const GL_SAMPLER_2D_ARRAY_EXT = 36289;
pub const GL_UPPER_LEFT = 36002;
pub const GL_FRAGMENT_PROGRAM_ARB = 34820;
pub const GL_FRAGMENT_LIGHT7_SGIX = 33811;
pub const GL_BUMP_TARGET_ATI = 34684;
pub const GL_COMBINE_EXT = 34160;
pub const GL_DOUBLE_VEC2 = 36860;
pub const GL_HISTOGRAM_WIDTH = 32806;
pub const GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = 37123;
pub const GL_INT_SAMPLER_2D_MULTISAMPLE = 37129;
pub const GL_LUMINANCE12 = 32833;
pub const GL_FONT_UNDERLINE_THICKNESS_BIT_NV = 134217728;
pub const GL_COLORDODGE_NV = 37529;
pub const GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV = 37679;
pub const GL_SMALL_CW_ARC_TO_NV = 20;
pub const GL_INT_IMAGE_1D_EXT = 36951;
pub const GL_TEXTURE8_ARB = 33992;
pub const GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX = 36937;
pub const GL_TEXTURE13 = 33997;
pub const GL_KHR_robustness = 1;
pub const GL_TEXTURE_1D_ARRAY = 35864;
pub const GL_COMPRESSED_SRGB_EXT = 35912;
pub const GL_RGB12 = 32851;
pub const GL_CLAMP_TO_BORDER_SGIS = 33069;
pub const GL_AMD_shader_trinary_minmax = 1;
pub const GL_TEXTURE_RANGE_LENGTH_APPLE = 34231;
pub const GL_INVARIANT_EXT = 34754;
pub const GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS = 33620;
pub const GL_ONE_MINUS_CONSTANT_ALPHA_EXT = 32772;
pub const GL_MAX_ELEMENTS_VERTICES = 33000;
pub const GL_COLOR_ATTACHMENT9_EXT = 36073;
pub const GL_SECONDARY_COLOR_NV = 34093;
pub const GL_CURRENT_SECONDARY_COLOR = 33881;
pub const GL_CLIENT_ALL_ATTRIB_BITS = 4294967295;
pub const GL_NV_fog_distance = 1;
pub const GL_UNPACK_SKIP_ROWS = 3315;
pub const GL_DEPTH_WRITEMASK = 2930;
pub const GL_ARB_ES3_compatibility = 1;
pub const GL_MAX_CONVOLUTION_HEIGHT = 32795;
pub const GL_FLOAT16_MAT2x3_AMD = 37320;
pub const GL_PERSPECTIVE_CORRECTION_HINT = 3152;
pub const GL_ATI_texture_env_combine3 = 1;
pub const GL_MODELVIEW17_ARB = 34609;
pub const GL_MAX_DEBUG_MESSAGE_LENGTH = 37187;
pub const GL_NO_ERROR = 0;
pub const GL_STENCIL_BACK_PASS_DEPTH_FAIL = 34818;
pub const GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX = 33147;
pub const GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = 36482;
pub const GL_RASTER_POSITION_UNCLIPPED_IBM = 103010;
pub const GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT = 36665;
pub const GL_FUNC_REVERSE_SUBTRACT_EXT = 32779;
pub const GL_UNPACK_RESAMPLE_OML = 35205;
pub const GL_VERTEX_SHADER_EXT = 34688;
pub const GL_ALPHA_TEST_FUNC = 3009;
pub const GL_HIGH_INT = 36341;
pub const GL_VERTEX4_BIT_PGI = 8;
pub const GL_REG_11_ATI = 35116;
pub const GL_EQUAL = 514;
pub const GL_CONVOLUTION_BORDER_COLOR_HP = 33108;
pub const GL_EDGE_FLAG_ARRAY_STRIDE_EXT = 32908;
pub const GL_ALPHA4_EXT = 32827;
pub const GL_CONVOLUTION_BORDER_COLOR = 33108;
pub const GL_COMBINER0_NV = 34128;
pub const GL_CLIP_PLANE0 = 12288;
pub const GL_TEXTURE_COORD_ARRAY_ADDRESS_NV = 36645;
pub const GL_GREEN_MIN_CLAMP_INGR = 34145;
pub const GL_LIST_BASE = 2866;
pub const GL_CULL_VERTEX_EYE_POSITION_EXT = 33195;
pub const GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB = 37289;
pub const GL_OVR_multiview = 1;
pub const GL_VERTEX_SUBROUTINE_UNIFORM = 37614;
pub const GL_POINT_TOKEN = 1793;
pub const GL_DOT3_RGBA_ARB = 34479;
pub const GL_RENDERBUFFER_RED_SIZE_EXT = 36176;
pub const GL_LAYOUT_LINEAR_INTEL = 1;
pub const GL_TEXTURE8 = 33992;
pub const GL_REG_30_ATI = 35135;
pub const GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 35395;
pub const GL_RENDERBUFFER_COVERAGE_SAMPLES_NV = 36011;
pub const GL_APPLE_flush_buffer_range = 1;
pub const GL_POLYGON_OFFSET_POINT = 10753;
pub const GL_DEBUG_SEVERITY_NOTIFICATION = 33387;
pub const GL_X_EXT = 34773;
pub const GL_SYNC_CONDITION = 37139;
pub const GL_COMPRESSED_RED_RGTC1_EXT = 36283;
pub const GL_ACCUM_ADJACENT_PAIRS_NV = 37037;
pub const GL_FRAGMENT_SHADER_INVOCATIONS = 33524;
pub const GL_AUTO_NORMAL = 3456;
pub const GL_RENDERBUFFER_STENCIL_SIZE_EXT = 36181;
pub const GL_4X_BIT_ATI = 2;
pub const GL_NV_primitive_restart = 1;
pub const GL_UNKNOWN_CONTEXT_RESET_ARB = 33365;
pub const GL_CURRENT_MATRIX_INDEX_ARB = 34885;
pub const GL_VERTEX_ATTRIB_ARRAY10_NV = 34394;
pub const GL_UNSIGNED_SHORT_4_4_4_4_REV = 33637;
pub const GL_HISTOGRAM_LUMINANCE_SIZE = 32812;
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER = 37576;
pub const GL_COMPRESSED_RGBA_BPTC_UNORM = 36492;
pub const GL_ARB_shader_texture_image_samples = 1;
pub const GL_APPLE_object_purgeable = 1;
pub const GL_INTERNALFORMAT_SHARED_SIZE = 33399;
pub const GL_SMOOTH_POINT_SIZE_RANGE = 2834;
pub const GL_FRAMEBUFFER_SRGB_EXT = 36281;
pub const GL_ANY_SAMPLES_PASSED = 35887;
pub const GL_COMBINE_RGB_ARB = 34161;
pub const GL_PATH_MAX_MODELVIEW_STACK_DEPTH_NV = 3382;
pub const GL_BLEND_EQUATION_ALPHA = 34877;
pub const GL_DRAW_BUFFER1 = 34854;
pub const GL_NV_draw_texture = 1;
pub const GL_INT_SAMPLER_1D_ARRAY = 36302;
pub const GL_COMPRESSED_ALPHA = 34025;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT = 36051;
pub const GL_TEXTURE_2D_MULTISAMPLE = 37120;
pub const GL_NV_shader_atomic_fp16_vector = 1;
pub const GL_COLOR_SAMPLES_NV = 36384;
pub const GL_INNOCENT_CONTEXT_RESET = 33364;
pub const GL_MAX_IMAGE_SAMPLES = 36973;
pub const GL_DEPTH_COMPONENT = 6402;
pub const GL_BLEND_DST_ALPHA = 32970;
pub const GL_IMAGE_CLASS_4_X_32 = 33465;
pub const GL_RGB32I = 36227;
pub const GL_TEXTURE_BINDING_1D_ARRAY_EXT = 35868;
pub const GL_IMAGE_CUBIC_WEIGHT_HP = 33118;
pub const GL_UNIFORM_ADDRESS_COMMAND_NV = 10;
pub const GL_CULL_MODES_NV = 34528;
pub const GL_NEVER = 512;
pub const GL_MAX_ELEMENT_INDEX = 36203;
pub const GL_TEXTURE_SRGB_DECODE_EXT = 35400;
pub const GL_IMAGE_ROTATE_ORIGIN_X_HP = 33114;
pub const GL_MAX_RECTANGLE_TEXTURE_SIZE = 34040;
pub const GL_TRANSFORM_FEEDBACK = 36386;
pub const GL_ADD = 260;
pub const GL_RG32I = 33339;
pub const GL_PATH_MODELVIEW_MATRIX_NV = 2982;
pub const GL_TEXTURE_BINDING_RECTANGLE_NV = 34038;
pub const GL_PGI_vertex_hints = 1;
pub const GL_ALPHA16_EXT = 32830;
pub const GL_TRANSFORM_FEEDBACK_VARYINGS_NV = 35971;
pub const GL_TEXTURE12 = 33996;
pub const GL_SELECTION_BUFFER_POINTER = 3571;
pub const GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 35976;
pub const GL_RENDERBUFFER_ALPHA_SIZE_EXT = 36179;
pub const GL_POST_CONVOLUTION_GREEN_BIAS_EXT = 32801;
pub const GL_CONVOLUTION_BORDER_MODE_EXT = 32787;
pub const GL_RGB_S3TC = 33696;
pub const GL_MAP_TESSELLATION_NV = 34498;
pub const GL_DETAIL_TEXTURE_MODE_SGIS = 32923;
pub const GL_VERTEX_SHADER_BINDING_EXT = 34689;
pub const GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV = 4;
pub const GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM = 103086;
pub const GL_COLOR_INDEX = 6400;
pub const GL_SOURCE2_RGB = 34178;
pub const GL_RGBA16UI = 36214;
pub const GL_MAP_ATTRIB_U_ORDER_NV = 34499;
pub const GL_DUDV_ATI = 34681;
pub const GL_COUNTER_TYPE_AMD = 35776;
pub const GL_COLOR_TABLE_BIAS_SGI = 32983;
pub const GL_ACTIVE_STENCIL_FACE_EXT = 35089;
pub const GL_MITER_TRUNCATE_NV = 37032;
pub const GL_PURGEABLE_APPLE = 35357;
pub const GL_UNPACK_ROW_BYTES_APPLE = 35350;
pub const GL_CULL_VERTEX_EXT = 33194;
pub const GL_COMPLETION_STATUS_KHR = 37297;
pub const GL_COPY_INVERTED = 5388;
pub const GL_MAX_COLOR_FRAMEBUFFER_SAMPLES_AMD = 37299;
pub const GL_NUM_VIRTUAL_PAGE_SIZES_ARB = 37288;
pub const GL_CON_4_ATI = 35141;
pub const GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT = 36054;
pub const GL_IMAGE_2D_RECT = 36943;
pub const GL_SAMPLE_BUFFERS_EXT = 32936;
pub const GL_ATI_vertex_array_object = 1;
pub const GL_NICEST = 4354;
pub const GL_AMD_vertex_shader_tessellator = 1;
pub const GL_STENCIL_INDEX8 = 36168;
pub const GL_ARB_derivative_control = 1;
pub const GL_LUMINANCE4 = 32831;
pub const GL_SECONDARY_INTERPOLATOR_ATI = 35181;
pub const GL_COPY_WRITE_BUFFER_BINDING = 36663;
pub const GL_MAX_ELEMENTS_INDICES_EXT = 33001;
pub const GL_POLYGON_OFFSET_COMMAND_NV = 14;
pub const GL_DATA_BUFFER_AMD = 37201;
pub const GL_COMPRESSED_SIGNED_RED_RGTC1_EXT = 36284;
pub const GL_ARB_internalformat_query2 = 1;
pub const GL_PROGRAM_ATTRIB_COMPONENTS_NV = 35078;
pub const GL_HI_BIAS_NV = 34580;
pub const GL_FLOAT16_MAT4_AMD = 37319;
pub const GL_TEXTURE_FETCH_BARRIER_BIT = 8;
pub const GL_IMAGE_TRANSLATE_Y_HP = 33112;
pub const GL_TEXTURE_IMMUTABLE_LEVELS = 33503;
pub const GL_COMPUTE_SHADER_INVOCATIONS = 33525;
pub const GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT = 34766;
pub const GL_OFFSET_TEXTURE_RECTANGLE_NV = 34380;
pub const GL_OES_EGL_image = 1;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR = 38450;
pub const GL_CLIP_PLANE1 = 12289;
pub const GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE = 37572;
pub const GL_MAX_SHADER_COMPILER_THREADS_ARB = 37296;
pub const GL_PIXEL_TILE_CACHE_INCREMENT_SGIX = 33087;
pub const GL_PATH_INITIAL_DASH_CAP_NV = 36988;
pub const GL_VERTEX_STREAM5_ATI = 34673;
pub const GL_SAMPLE_MASK_EXT = 32928;
pub const GL_HANDLE_TYPE_OPAQUE_WIN32_KMT_EXT = 38280;
pub const GL_COLOR_TABLE_BLUE_SIZE_SGI = 32988;
pub const GL_OML_interlace = 1;
pub const GL_INT64_VEC4_ARB = 36843;
pub const GL_SECONDARY_COLOR_ARRAY_POINTER = 33885;
pub const GL_FONT_HAS_KERNING_BIT_NV = 268435456;
pub const GL_TEXTURE9 = 33993;
pub const GL_PIXEL_TILE_CACHE_SIZE_SGIX = 33093;
pub const GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = 37584;
pub const GL_INTENSITY_FLOAT32_ATI = 34839;
pub const GL_VERTEX_ARRAY_LIST_STRIDE_IBM = 103080;
pub const GL_VERTEX_ATTRIB_ARRAY14_NV = 34398;
pub const GL_VARIANT_EXT = 34753;
pub const GL_TEXTURE_STORAGE_HINT_APPLE = 34236;
pub const GL_COLOR_TABLE_LUMINANCE_SIZE = 32990;
pub const GL_SEPARABLE_2D = 32786;
pub const GL_UNSIGNED_BYTE = 5121;
pub const GL_SCREEN_NV = 37525;
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER = 37579;
pub const GL_MAX_VERTEX_UNIFORM_BLOCKS = 35371;
pub const GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB = 37273;
pub const GL_TEXTURE_UPDATE_BARRIER_BIT_EXT = 256;
pub const GL_C4UB_V3F = 10787;
pub const GL_VERTEX_PROGRAM_POINT_SIZE = 34370;
pub const GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 33296;
pub const GL_POLYGON_OFFSET_CLAMP = 36379;
pub const GL_EXT_coordinate_frame = 1;
pub const GL_REG_31_ATI = 35136;
pub const GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB = 36494;
pub const GL_OES_compressed_paletted_texture = 1;
pub const GL_MODELVIEW0_MATRIX_EXT = 2982;
pub const GL_FLOAT_MAT3_ARB = 35675;
pub const GL_TEXTURE_INTERNAL_FORMAT = 4099;
pub const GL_VERTEX23_BIT_PGI = 4;
pub const GL_TEXTURE_LOD_BIAS_T_SGIX = 33167;
pub const GL_DRAW_BUFFER2 = 34855;
pub const GL_UNSIGNED_INT_VEC4_EXT = 36296;
pub const GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT = 36055;
pub const GL_ARB_vertex_array_object = 1;
pub const GL_SAMPLER_1D_ARRAY_SHADOW = 36291;
pub const GL_LUMINANCE_ALPHA16I_EXT = 36237;
pub const GL_UNSIGNED_INT_VEC3 = 36295;
pub const GL_ARB_clear_texture = 1;
pub const GL_SRC_IN_NV = 37514;
pub const GL_INT_IMAGE_1D = 36951;
pub const GL_EYE_LINEAR_NV = 9216;
pub const GL_FRAGMENT_PROGRAM_NV = 34928;
pub const GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX = 33800;
pub const GL_BUFFER_MAP_POINTER_ARB = 35005;
pub const GL_PROXY_TEXTURE_CUBE_MAP = 34075;
pub const GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = 36485;
pub const GL_DRAW_BUFFER5_ATI = 34858;
pub const GL_EXT_texture_compression_s3tc = 1;
pub const GL_OPERAND1_ALPHA_EXT = 34201;
pub const GL_EXCLUSIVE_EXT = 36625;
pub const GL_HANDLE_TYPE_OPAQUE_WIN32_EXT = 38279;
pub const GL_RELATIVE_CUBIC_CURVE_TO_NV = 13;
pub const GL_SPOT_DIRECTION = 4612;
pub const GL_TRIANGLE_LIST_SUN = 33239;
pub const GL_LAYOUT_SHADER_READ_ONLY_EXT = 38289;
pub const GL_ALPHA8UI_EXT = 36222;
pub const GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = 1;
pub const GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV = 36917;
pub const GL_VERTEX_STATE_PROGRAM_NV = 34337;
pub const GL_AMD_gpu_shader_int64 = 1;
pub const GL_TEXTURE15 = 33999;
pub const GL_INTENSITY8_EXT = 32843;
pub const GL_IMAGE_1D_ARRAY_EXT = 36946;
pub const GL_REG_22_ATI = 35127;
pub const GL_TEXTURE_MATRIX = 2984;
pub const GL_TEXTURE_COORD_ARRAY_SIZE = 32904;
pub const GL_VIEWPORT_SWIZZLE_NEGATIVE_Z_NV = 37717;
pub const GL_OBJECT_PLANE = 9473;
pub const GL_MAP2_VERTEX_ATTRIB14_4_NV = 34430;
pub const GL_ARB_texture_border_clamp = 1;
pub const GL_ARB_timer_query = 1;
pub const GL_AMD_performance_monitor = 1;
pub const GL_EVAL_VERTEX_ATTRIB0_NV = 34502;
pub const GL_POINT_FADE_THRESHOLD_SIZE_ARB = 33064;
pub const GL_PROXY_TEXTURE_1D = 32867;
pub const GL_MULTICAST_GPUS_NV = 37562;
pub const GL_DOT3_RGB = 34478;
pub const GL_POINT_FADE_THRESHOLD_SIZE_SGIS = 33064;
pub const GL_ARB_compatibility = 1;
pub const GL_RG8UI = 33336;
pub const GL_NEAREST = 9728;
pub const GL_TEXTURE_DS_SIZE_NV = 34589;
pub const GL_LUMINANCE12_ALPHA12_EXT = 32839;
pub const GL_IMPLEMENTATION_COLOR_READ_TYPE_OES = 35738;
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT = 36048;
pub const GL_ARB_multi_draw_indirect = 1;
pub const GL_INT_IMAGE_1D_ARRAY_EXT = 36957;
pub const GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI = 32947;
pub const GL_ARB_half_float_pixel = 1;
pub const GL_UNPACK_IMAGE_DEPTH_SGIS = 33075;
pub const GL_ARB_fragment_shader_interlock = 1;
pub const GL_NV_copy_image = 1;
pub const GL_COLOR_TABLE_SCALE = 32982;
pub const GL_OCCLUSION_QUERY_EVENT_MASK_AMD = 34639;
pub const GL_CONTEXT_LOST = 1287;
pub const GL_MAX_ASYNC_TEX_IMAGE_SGIX = 33631;
pub const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT = 36182;
pub const GL_TRIANGLES_ADJACENCY_EXT = 12;
pub const GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV = 34920;
pub const GL_AMD_name_gen_delete = 1;
pub const GL_TEXTURE0_ARB = 33984;
pub const GL_PROXY_TEXTURE_2D_ARRAY = 35867;
pub const GL_MAP2_VERTEX_ATTRIB9_4_NV = 34425;
pub const GL_NUM_SAMPLE_COUNTS = 37760;
pub const GL_SAMPLE_MASK_INVERT_SGIS = 32939;
pub const GL_LAYOUT_GENERAL_EXT = 38285;
pub const GL_COLOR_ENCODING = 33430;
pub const GL_PIXEL_MAP_S_TO_S_SIZE = 3249;
pub const GL_VIEW_CLASS_BPTC_UNORM = 33490;
pub const GL_EXT_texture_buffer_object = 1;
pub const GL_RGB16_SNORM = 36762;
pub const GL_CLIP_PLANE2 = 12290;
pub const GL_TEXTURE_GREEN_TYPE_ARB = 35857;
pub const GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX = 33144;
pub const GL_NV_fragment_shader_interlock = 1;
pub const GL_TEXCOORD4_BIT_PGI = 2147483648;
pub const GL_READ_FRAMEBUFFER_BINDING_EXT = 36010;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_START = 35972;
pub const GL_NV_query_resource_tag = 1;
pub const GL_LIST_BIT = 131072;
pub const GL_INTEL_blackhole_render = 1;
pub const GL_MIN_SPARSE_LEVEL_AMD = 37275;
pub const GL_SUPERSAMPLE_SCALE_Y_NV = 37747;
pub const GL_CON_13_ATI = 35150;
pub const GL_DEBUG_SEVERITY_MEDIUM = 37191;
pub const GL_COMPRESSED_SIGNED_RG_RGTC2 = 36286;
pub const GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = 36879;
pub const GL_MAP1_VERTEX_4 = 3480;
pub const GL_NUM_WINDOW_RECTANGLES_EXT = 36629;
pub const GL_FRACTIONAL_ODD = 36475;
pub const GL_HI_SCALE_NV = 34574;
pub const GL_PIXEL_MAP_G_TO_G_SIZE = 3255;
pub const GL_BUFFER_STORAGE_FLAGS = 33312;
pub const GL_4PASS_1_SGIS = 32933;
pub const GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV = 37694;
pub const GL_QUERY_RESULT = 34918;
pub const GL_QUERY_BUFFER = 37266;
pub const GL_COLOR_TABLE_WIDTH_SGI = 32985;
pub const GL_PROXY_TEXTURE_CUBE_MAP_EXT = 34075;
pub const GL_NV_texture_multisample = 1;
pub const GL_COLOR_TABLE_GREEN_SIZE_SGI = 32987;
pub const GL_MAX_DRAW_BUFFERS_ARB = 34852;
pub const GL_GEOMETRY_OUTPUT_TYPE_ARB = 36316;
pub const GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV = 37116;
pub const GL_NUM_PASSES_ATI = 35184;
pub const GL_BACK_LEFT = 1026;
pub const GL_FLOAT_R32_NV = 34949;
pub const GL_EXT_texture_integer = 1;
pub const GL_SAMPLE_ALPHA_TO_COVERAGE = 32926;
pub const GL_LUMINANCE_ALPHA_FLOAT16_ATI = 34847;
pub const GL_DST_OVER_NV = 37513;
pub const GL_TEXTURE_DEPTH_SIZE_ARB = 34890;
pub const GL_MAX_DEPTH = 33408;
pub const GL_TEXTURE_BINDING_3D = 32874;
pub const GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV = 36258;
pub const GL_ARB_depth_texture = 1;
pub const GL_ALL_CLIENT_ATTRIB_BITS = 4294967295;
pub const GL_OUTPUT_TEXTURE_COORD15_EXT = 34732;
pub const GL_FOG_COORD_ARRAY = 33879;
pub const GL_NORMAL_ARRAY_COUNT_EXT = 32896;
pub const GL_NV_alpha_to_coverage_dither_control = 1;
pub const GL_IMAGE_CUBE = 36944;
pub const GL_DRAW_BUFFER3 = 34856;
pub const GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB = 34828;
pub const GL_BGR_EXT = 32992;
pub const GL_FUNC_ADD = 32774;
pub const GL_UNSIGNED_INT_VEC2 = 36294;
pub const GL_SGIX_clipmap = 1;
pub const GL_ATOMIC_COUNTER_BUFFER = 37568;
pub const GL_MATRIX27_ARB = 35035;
pub const GL_2D = 1536;
pub const GL_COMPRESSED_SLUMINANCE_EXT = 35914;
pub const GL_OBJECT_BUFFER_SIZE_ATI = 34660;
pub const GL_PATCH_VERTICES = 36466;
pub const GL_FRAGMENT_DEPTH_EXT = 33874;
pub const GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI = 35187;
pub const GL_COLOR3_BIT_PGI = 65536;
pub const GL_COMBINER3_NV = 34131;
pub const GL_NV_shader_buffer_load = 1;
pub const GL_MAX_FRAGMENT_UNIFORM_BLOCKS = 35373;
pub const GL_REFERENCE_PLANE_EQUATION_SGIX = 33150;
pub const GL_DSDT8_NV = 34569;
pub const GL_NV_vertex_attrib_integer_64bit = 1;
pub const GL_MODULATE_SIGNED_ADD_ATI = 34629;
pub const GL_RGBA8I = 36238;
pub const GL_UNSIGNED_INT_VEC2_EXT = 36294;
pub const GL_MAX_TEXTURE_SIZE = 3379;
pub const GL_VARIABLE_B_NV = 34084;
pub const GL_NOTEQUAL = 517;
pub const GL_CLAMP_FRAGMENT_COLOR = 35099;
pub const GL_MAX_ELEMENTS_VERTICES_EXT = 33000;
pub const GL_CURRENT_RASTER_DISTANCE = 2825;
pub const GL_MAX_COMPUTE_SHARED_MEMORY_SIZE = 33378;
pub const GL_SGIS_pixel_texture = 1;
pub const GL_POST_COLOR_MATRIX_BLUE_BIAS = 32954;
pub const GL_ALLOW_DRAW_OBJ_HINT_PGI = 107022;
pub const GL_UNIFORM_BUFFER_LENGTH_NV = 37744;
pub const GL_MAP_UNSYNCHRONIZED_BIT = 32;
pub const GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT = 35885;
pub const GL_TEXTURE14 = 33998;
pub const GL_MAX_CULL_DISTANCES = 33529;
pub const GL_LUMINANCE16_ALPHA16 = 32840;
pub const GL_LOW_INT = 36339;
pub const GL_TEXTURE_INTENSITY_SIZE = 32865;
pub const GL_MAX_SHADER_COMPILER_THREADS_KHR = 37296;
pub const GL_SPHERE_MAP = 9218;
pub const GL_HALF_FLOAT_ARB = 5131;
pub const GL_REG_16_ATI = 35121;
pub const GL_POST_COLOR_MATRIX_BLUE_SCALE = 32950;
pub const GL_VERTEX_ARRAY = 32884;
pub const GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS = 37083;
pub const GL_UNSIGNED_INT8_VEC2_NV = 36845;
pub const GL_DISCRETE_AMD = 36870;
pub const GL_AMBIENT = 4608;
pub const GL_R1UI_T2F_N3F_V3F_SUN = 34250;
pub const GL_EDGE_FLAG_ARRAY_EXT = 32889;
pub const GL_GLYPH_HAS_KERNING_BIT_NV = 256;
pub const GL_RGB8_SNORM = 36758;
pub const GL_PIXEL_MAP_A_TO_A = 3193;
pub const GL_VIEWPORT_SWIZZLE_POSITIVE_W_NV = 37718;
pub const GL_PIXEL_TRANSFORM_2D_EXT = 33584;
pub const GL_MAX_VARYING_FLOATS_ARB = 35659;
pub const GL_MAX_VERTEX_IMAGE_UNIFORMS = 37066;
pub const GL_PREVIOUS_EXT = 34168;
pub const GL_NUM_ACTIVE_VARIABLES = 37636;
pub const GL_DEPTH_SCALE = 3358;
pub const GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = 36321;
pub const GL_PALETTE8_RGB8_OES = 35733;
pub const GL_FLOAT16_MAT4x2_AMD = 37324;
pub const GL_REND_screen_coordinates = 1;
pub const GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB = 34076;
pub const GL_TEXTURE_MAX_LEVEL_SGIS = 33085;
pub const GL_R1UI_C4F_N3F_V3F_SUN = 34248;
pub const GL_UNPACK_SKIP_IMAGES = 32877;
pub const GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX = 33803;
pub const GL_INTENSITY_FLOAT16_ATI = 34845;
pub const GL_TEXTURE_WRAP_R = 32882;
pub const GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT = 35978;
pub const GL_LUMINANCE8_ALPHA8 = 32837;
pub const GL_GET_TEXTURE_IMAGE_FORMAT = 33425;
pub const GL_GREEN_BIT_ATI = 2;
pub const GL_MAX_RENDERBUFFER_SIZE_EXT = 34024;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_NV = 35982;
pub const GL_DST_OUT_NV = 37517;
pub const GL_TEXTURE_MAG_SIZE_NV = 34591;
pub const GL_SPIR_V_BINARY_ARB = 38226;
pub const GL_UNSIGNED_INT16_VEC3_NV = 36850;
pub const GL_HISTOGRAM_RED_SIZE = 32808;
pub const GL_MAP1_BINORMAL_EXT = 33862;
pub const GL_MAX_VARYING_COMPONENTS_EXT = 35659;
pub const GL_BACK_RIGHT = 1027;
pub const GL_WEIGHT_ARRAY_ARB = 34477;
pub const GL_FORCE_BLUE_TO_ONE_NV = 34912;
pub const GL_TEXTURE_UNSIGNED_REMAP_MODE_NV = 34959;
pub const GL_RGBA4_DXT5_S3TC = 33701;
pub const GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT = 36286;
pub const GL_TEXTURE_COMPRESSION_HINT = 34031;
pub const GL_MATRIX13_ARB = 35021;
pub const GL_BOOL = 35670;
pub const GL_CLIP_PLANE3 = 12291;
pub const GL_TEXTURE_SWIZZLE_A = 36421;
pub const GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 35723;
pub const GL_SAMPLE_BUFFERS = 32936;
pub const GL_CURRENT_TIME_NV = 36392;
pub const GL_DARKEN_NV = 37527;
pub const GL_INVERSE_NV = 34347;
pub const GL_DEBUG_CATEGORY_APPLICATION_AMD = 37199;
pub const GL_R3_G3_B2 = 10768;
pub const GL_GEOMETRY_SHADER_EXT = 36313;
pub const GL_DT_BIAS_NV = 34583;
pub const GL_EXT_texture_swizzle = 1;
pub const GL_PIXEL_MAG_FILTER_EXT = 33585;
pub const GL_BLUE_INTEGER_EXT = 36246;
pub const GL_TEXTURE_BUFFER_BINDING = 35882;
pub const GL_NV_fill_rectangle = 1;
pub const GL_INGR_blend_func_separate = 1;
pub const GL_INDEX_ARRAY_LIST_IBM = 103073;
pub const GL_UNSIGNED_SHORT_5_6_5_REV = 33636;
pub const GL_QUERY_BUFFER_BARRIER_BIT = 32768;
pub const GL_MOVE_TO_NV = 2;
pub const GL_NORMALIZED_RANGE_EXT = 34784;
pub const GL_ALL_BARRIER_BITS_EXT = 4294967295;
pub const GL_MAP2_TANGENT_EXT = 33861;
pub const GL_DRAW_ARRAYS_INSTANCED_COMMAND_NV = 7;
pub const GL_NUM_COMPATIBLE_SUBROUTINES = 36426;
pub const GL_SHADER_COMPILER = 36346;
pub const GL_ALPHA_REF_COMMAND_NV = 15;
pub const GL_DEBUG_OUTPUT_SYNCHRONOUS = 33346;
pub const GL_COORD_REPLACE = 34914;
pub const GL_VIEW_CLASS_S3TC_DXT5_RGBA = 33487;
pub const GL_APPLE_client_storage = 1;
pub const GL_BLUE_BIAS = 3355;
pub const GL_VERTEX_ATTRIB_ARRAY0_NV = 34384;
pub const GL_WEIGHT_ARRAY_TYPE_ARB = 34473;
pub const GL_PATH_STENCIL_FUNC_NV = 37047;
pub const GL_DEPTH_RANGE = 2928;
pub const GL_TEXTURE_4D_SGIS = 33076;
pub const GL_BLUE = 6405;
pub const GL_CONVOLUTION_FORMAT = 32791;
pub const GL_CLEAR_BUFFER = 33460;
pub const GL_OUTPUT_TEXTURE_COORD8_EXT = 34725;
pub const GL_DUAL_LUMINANCE4_SGIS = 33044;
pub const GL_PACK_IMAGE_HEIGHT = 32876;
pub const GL_FULL_RANGE_EXT = 34785;
pub const GL_TEXT_FRAGMENT_SHADER_ATI = 33280;
pub const GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE = 37064;
pub const GL_COLOR_TABLE_BIAS = 32983;
pub const GL_VIEW_CLASS_S3TC_DXT1_RGBA = 33485;
pub const GL_LINEAR_TILING_EXT = 38277;
pub const GL_IMAGE_CLASS_2_X_8 = 33472;
pub const GL_DEBUG_SEVERITY_MEDIUM_AMD = 37191;
pub const GL_RG8I = 33335;
pub const GL_REPEAT = 10497;
pub const GL_INTENSITY32I_EXT = 36229;
pub const GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV = 34901;
pub const GL_INT8_VEC3_NV = 36834;
pub const GL_SRC0_ALPHA = 34184;
pub const GL_FLOAT_RG_NV = 34945;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT = 34073;
pub const GL_PROVOKING_VERTEX = 36431;
pub const GL_FRAMEBUFFER_DEFAULT_HEIGHT = 37649;
pub const GL_EVAL_VERTEX_ATTRIB1_NV = 34503;
pub const GL_TEXTURE_4DSIZE_SGIS = 33078;
pub const GL_RGBA12 = 32858;
pub const GL_NV_texgen_reflection = 1;
pub const GL_EXT_draw_range_elements = 1;
pub const GL_MAX_UNIFORM_LOCATIONS = 33390;
pub const GL_MAX_CLIPMAP_DEPTH_SGIX = 33143;
pub const GL_EXT_fog_coord = 1;
pub const GL_LUMINANCE16 = 32834;
pub const GL_EVAL_VERTEX_ATTRIB8_NV = 34510;
pub const GL_PREVIOUS_TEXTURE_INPUT_NV = 34532;
pub const GL_INTENSITY8_SNORM = 36887;
pub const GL_PATH_MODELVIEW_NV = 5888;
pub const GL_INTERNALFORMAT_STENCIL_TYPE = 33405;
pub const GL_NV_fragment_program = 1;
pub const GL_RGBA32F_ARB = 34836;
pub const GL_TEXTURE_1D = 3552;
pub const GL_R16_SNORM = 36760;
pub const GL_MODELVIEW14_ARB = 34606;
pub const GL_MIRRORED_REPEAT = 33648;
pub const GL_MESA_program_binary_formats = 1;
pub const GL_TEXTURE17 = 34001;
pub const GL_MODELVIEW23_ARB = 34615;
pub const GL_INCR_WRAP_EXT = 34055;
pub const GL_VERTEX_BINDING_OFFSET = 33495;
pub const GL_RGB16 = 32852;
pub const GL_ARB_shading_language_packing = 1;
pub const GL_BLEND_COLOR_EXT = 32773;
pub const GL_INT_IMAGE_BUFFER = 36956;
pub const GL_STENCIL_INDEX8_EXT = 36168;
pub const GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST = 33453;
pub const GL_CLIP_DISTANCE5 = 12293;
pub const GL_DOUBLE_MAT3x4 = 36684;
pub const GL_MAX_PROGRAM_TEXEL_OFFSET_NV = 35077;
pub const GL_POST_COLOR_MATRIX_GREEN_BIAS = 32953;
pub const GL_RASTER_SAMPLES_EXT = 37672;
pub const GL_OCCLUSION_TEST_RESULT_HP = 33126;
pub const GL_FRAGMENT_INTERPOLATION_OFFSET_BITS = 36445;
pub const GL_PIXEL_TILE_WIDTH_SGIX = 33088;
pub const GL_INTERNALFORMAT_STENCIL_SIZE = 33398;
pub const GL_VERTEX_STREAM2_ATI = 34670;
pub const GL_DOUBLE_MAT2x3_EXT = 36681;
pub const GL_COMPRESSED_RGBA_BPTC_UNORM_ARB = 36492;
pub const GL_RG16I = 33337;
pub const GL_LUMINANCE_ALPHA8UI_EXT = 36225;
pub const GL_COMPRESSED_TEXTURE_FORMATS_ARB = 34467;
pub const GL_ONE_EXT = 34782;
pub const GL_LINEAR_MIPMAP_NEAREST = 9985;
pub const GL_MUL_ATI = 35172;
pub const GL_DEPTH_BUFFER_BIT = 256;
pub const GL_UNIFORM_BLOCK_NAME_LENGTH = 35393;
pub const GL_MATRIX31_ARB = 35039;
pub const GL_ALL_PIXELS_AMD = 4294967295;
pub const GL_RG_SNORM = 36753;
pub const GL_INTERLACE_READ_INGR = 34152;
pub const GL_CURRENT_MATRIX_ARB = 34369;
pub const GL_STRICT_SCISSOR_HINT_PGI = 107032;
pub const GL_ARB_map_buffer_range = 1;
pub const GL_COMBINER_MUX_SUM_NV = 34119;
pub const GL_NV_bindless_multi_draw_indirect = 1;
pub const GL_SAMPLE_MASK_SGIS = 32928;
pub const GL_CURRENT_ATTRIB_NV = 34342;
pub const GL_MATRIX20_ARB = 35028;
pub const GL_PACK_ROW_BYTES_APPLE = 35349;
pub const GL_RGBA_INTEGER_MODE_EXT = 36254;
pub const GL_MAX_LABEL_LENGTH = 33512;
pub const GL_DYNAMIC_DRAW_ARB = 35048;
pub const GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV = 36369;
pub const GL_FRAMEBUFFER_BARRIER_BIT = 1024;
pub const GL_MAP_INVALIDATE_RANGE_BIT = 4;
pub const GL_TEXTURE_WRAP_S = 10242;
pub const GL_COMPRESSED_LUMINANCE_ALPHA = 34027;
pub const GL_TEXTURE_CLIPMAP_OFFSET_SGIX = 33139;
pub const GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS = 36489;
pub const GL_UNSIGNED_INT64_VEC3_NV = 36854;
pub const GL_UNPACK_COMPRESSED_BLOCK_HEIGHT = 37160;
pub const GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 33590;
pub const GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 33303;
pub const GL_LUMINANCE_ALPHA16UI_EXT = 36219;
pub const GL_OUTPUT_TEXTURE_COORD14_EXT = 34731;
pub const GL_MAX_COMPUTE_ATOMIC_COUNTERS = 33381;
pub const GL_WAIT_FAILED = 37149;
pub const GL_CLIP_FAR_HINT_PGI = 107041;
pub const GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL = 38140;
pub const GL_DISJOINT_NV = 37507;
pub const GL_MATRIX_INDEX_ARRAY_TYPE_ARB = 34887;
pub const GL_VERTEX_BINDING_BUFFER = 36687;
pub const GL_INT_IMAGE_2D_RECT_EXT = 36954;
pub const GL_CURRENT_OCCLUSION_QUERY_ID_NV = 34917;
pub const GL_UNPACK_SUBSAMPLE_RATE_SGIX = 34209;
pub const GL_MODELVIEW1_ARB = 34058;
pub const GL_AMD_occlusion_query_event = 1;
pub const GL_RELATIVE_LARGE_CCW_ARC_TO_NV = 23;
pub const GL_SQUARE_NV = 37027;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT = 35983;
pub const GL_CLIP_PLANE4 = 12292;
pub const GL_PN_TRIANGLES_ATI = 34800;
pub const GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE = 34078;
pub const GL_TEXTURE_MAG_FILTER = 10240;
pub const GL_TEXTURE_SWIZZLE_B = 36420;
pub const GL_SGIX_resample = 1;
pub const GL_CIRCULAR_TANGENT_ARC_TO_NV = 252;
pub const GL_SHORT = 5122;
pub const GL_TEXTURE30_ARB = 34014;
pub const GL_POINT_SIZE_GRANULARITY = 2835;
pub const GL_MINMAX_SINK = 32816;
pub const GL_UNSIGNED_INT16_NV = 36848;
pub const GL_ARRAY_BUFFER_ARB = 34962;
pub const GL_FOG_COORDINATE_ARRAY = 33879;
pub const GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV = 34381;
pub const GL_REG_24_ATI = 35129;
pub const GL_PROXY_COLOR_TABLE = 32979;
pub const GL_VIRTUAL_PAGE_SIZE_Y_ARB = 37270;
pub const GL_ARB_sample_shading = 1;
pub const GL_INDEX_WRITEMASK = 3105;
pub const GL_AMD_shader_stencil_export = 1;
pub const GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV = 37680;
pub const GL_SIGNED_ALPHA8_NV = 34566;
pub const GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 33299;
pub const GL_INTENSITY_SNORM = 36883;
pub const GL_COMPLETION_STATUS_ARB = 37297;
pub const GL_COMBINER6_NV = 34134;
pub const GL_OFFSET_TEXTURE_SCALE_NV = 34530;
pub const GL_ALPHA_SCALE = 3356;
pub const GL_NV_blend_equation_advanced_coherent = 1;
pub const GL_FOG_FUNC_POINTS_SGIS = 33067;
pub const GL_MODULATE = 8448;
pub const GL_AMD_seamless_cubemap_per_texture = 1;
pub const GL_PATH_ERROR_POSITION_NV = 37035;
pub const GL_IUI_V2F_EXT = 33197;
pub const GL_STENCIL_TEST_TWO_SIDE_EXT = 35088;
pub const GL_QUERY_OBJECT_AMD = 37203;
pub const GL_PER_GPU_STORAGE_BIT_NV = 2048;
pub const GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS = 36665;
pub const GL_NUM_VIDEO_CAPTURE_STREAMS_NV = 36900;
pub const GL_WEIGHT_ARRAY_BUFFER_BINDING = 34974;
pub const GL_UNPACK_IMAGE_HEIGHT_EXT = 32878;
pub const GL_FLOAT16_MAT2x4_AMD = 37321;
pub const GL_DUP_LAST_CUBIC_CURVE_TO_NV = 244;
pub const GL_RED_BIT_ATI = 1;
pub const GL_OFFSET_TEXTURE_2D_BIAS_NV = 34531;
pub const GL_VERTEX_ARRAY_BINDING_APPLE = 34229;
pub const GL_MAX_PATCH_VERTICES = 36477;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR = 37848;
pub const GL_ARB_ES3_2_compatibility = 1;
pub const GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT = 35881;
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT = 36264;
pub const GL_SAMPLER_2D_MULTISAMPLE = 37128;
pub const GL_ARB_vertex_attrib_binding = 1;
pub const GL_PROXY_TEXTURE_1D_ARRAY = 35865;
pub const GL_NV_light_max_exponent = 1;
pub const GL_PRIMITIVE_ID_NV = 35964;
pub const GL_NV_vertex_program1_1 = 1;
pub const GL_ELEMENT_ARRAY_BUFFER = 34963;
pub const GL_PROGRAM_TEX_INDIRECTIONS_ARB = 34823;
pub const GL_TEXTURE_COVERAGE_SAMPLES_NV = 36933;
pub const GL_NV_occlusion_query = 1;
pub const GL_NV_vertex_buffer_unified_memory = 1;
pub const GL_DEBUG_SOURCE_OTHER = 33355;
pub const GL_COMPRESSED_SRGB_ALPHA_EXT = 35913;
pub const GL_TESS_CONTROL_SHADER_BIT = 8;
pub const GL_OUTPUT_VERTEX_EXT = 34714;
pub const GL_CURRENT_MATRIX_NV = 34369;
pub const GL_DRAW_BUFFER2_ARB = 34855;
pub const GL_SAMPLE_MASK = 36433;
pub const GL_VERTEX_ARRAY_STRIDE_EXT = 32892;
pub const GL_MAP_COHERENT_BIT = 128;
pub const GL_SCALED_RESOLVE_FASTEST_EXT = 37050;
pub const GL_SGIX_texture_coordinate_clamp = 1;
pub const GL_LAST_VERTEX_CONVENTION = 36430;
pub const GL_REFLECTION_MAP_NV = 34066;
pub const GL_R8_SNORM = 36756;
pub const GL_POINT_SPRITE_R_MODE_NV = 34915;
pub const GL_PATH_MITER_LIMIT_NV = 36986;
pub const GL_3DFX_texture_compression_FXT1 = 1;
pub const GL_LIGHT_MODEL_AMBIENT = 2899;
pub const GL_POINT_SIZE_MAX_EXT = 33063;
pub const GL_OUTPUT_TEXTURE_COORD13_EXT = 34730;
pub const GL_TEXTURE_CUBE_MAP_ARRAY_ARB = 36873;
pub const GL_TEXTURE_BINDING_2D_ARRAY = 35869;
pub const GL_OP_NEGATE_EXT = 34691;
pub const GL_GEOMETRY_VERTICES_OUT_EXT = 36314;
pub const GL_SAMPLE_POSITION = 36432;
pub const GL_CON_31_ATI = 35168;
pub const GL_FONT_HEIGHT_BIT_NV = 8388608;
pub const GL_CURRENT_SECONDARY_COLOR_EXT = 33881;
pub const GL_COMPRESSED_SRGB = 35912;
pub const GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB = 36767;
pub const GL_INT_IMAGE_2D_RECT = 36954;
pub const GL_TEXTURE16 = 34000;
pub const GL_INT16_VEC2_NV = 36837;
pub const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS = 37582;
pub const GL_MATRIX_PALETTE_ARB = 34880;
pub const GL_VIEWPORT_SWIZZLE_X_NV = 37720;
pub const GL_NVX_conditional_render = 1;
pub const GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV = 34940;
pub const GL_COLOR_ATTACHMENT12_EXT = 36076;
pub const GL_COLOR_TABLE_SCALE_SGI = 32982;
pub const GL_CLIP_DISTANCE4 = 12292;
pub const GL_WINDOW_RECTANGLE_MODE_EXT = 36627;
pub const GL_3D_COLOR = 1538;
pub const GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD = 36867;
pub const GL_EXT_stencil_two_side = 1;
pub const GL_MAX_VARYING_VECTORS = 36348;
pub const GL_COLOR_ATTACHMENT20 = 36084;
pub const GL_IMAGE_2D_MULTISAMPLE_ARRAY = 36950;
pub const GL_ARB_internalformat_query = 1;
pub const GL_TEXTURE_BIT = 262144;
pub const GL_INT_VEC4_ARB = 35669;
pub const GL_QUERY_BY_REGION_NO_WAIT = 36374;
pub const GL_BIAS_BY_NEGATIVE_ONE_HALF_NV = 34113;
pub const GL_NORMAL_ARRAY_BUFFER_BINDING_ARB = 34967;
pub const GL_SRC_OVER_NV = 37512;
pub const GL_READ_PIXELS_FORMAT = 33421;
pub const GL_MAP1_VERTEX_ATTRIB0_4_NV = 34400;
pub const GL_SGIX_fragment_lighting = 1;
pub const GL_FRAMEBUFFER_UNSUPPORTED = 36061;
pub const GL_EXT_x11_sync_object = 1;
pub const GL_UNIFORM_BLOCK_INDEX = 35386;
pub const GL_ARB_vertex_array_bgra = 1;
pub const GL_TEXTURE_WRAP_T = 10243;
pub const GL_STENCIL_INDEX4 = 36167;
pub const GL_MAX_VERTEX_UNITS_ARB = 34468;
pub const GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX = 36938;
pub const GL_COLOR_ARRAY_TYPE = 32898;
pub const GL_MAX_SPARSE_TEXTURE_SIZE_AMD = 37272;
pub const GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = 33382;
pub const GL_COMBINER_MAPPING_NV = 34115;
pub const GL_ARB_invalidate_subdata = 1;
pub const GL_ARB_texture_filter_minmax = 1;
pub const GL_TEXTURE_LEQUAL_R_SGIX = 33180;
pub const GL_MAX_3D_TEXTURE_SIZE_EXT = 32883;
pub const GL_Y_EXT = 34774;
pub const GL_ELEMENT_ARRAY_BUFFER_ARB = 34963;
pub const GL_CONDITION_SATISFIED = 37148;
pub const GL_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_EXT = 38192;
pub const GL_SUN_global_alpha = 1;
pub const GL_RECT_NV = 246;
pub const GL_STATIC_COPY_ARB = 35046;
pub const GL_NV_blend_minmax_factor = 1;
pub const GL_ACCUM = 256;
pub const GL_ONE_MINUS_CONSTANT_COLOR_EXT = 32770;
pub const GL_MATRIX_STRIDE = 37631;
pub const GL_CLIP_PLANE5 = 12293;
pub const GL_IGNORE_BORDER_HP = 33104;
pub const GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB = 34998;
pub const GL_ARB_gpu_shader_int64 = 1;
pub const GL_PRESENT_DURATION_NV = 36395;
pub const GL_DRIVER_UUID_EXT = 38296;
pub const GL_SRC1_COLOR = 35065;
pub const GL_FLOAT_R16_NV = 34948;
pub const GL_INDEX_ARRAY_STRIDE = 32902;
pub const GL_TEXTURE_RECTANGLE_NV = 34037;
pub const GL_KEEP = 7680;
pub const GL_RGB_INTEGER_EXT = 36248;
pub const GL_COMPRESSED_RGBA_ASTC_4x4_KHR = 37808;
pub const GL_NV_transform_feedback2 = 1;
pub const GL_DOUBLE_VEC4_EXT = 36862;
pub const GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT = 34064;
pub const GL_RGB9_E5_EXT = 35901;
pub const GL_SIGNED_INTENSITY_NV = 34567;
pub const GL_MAP1_VERTEX_3 = 3479;
pub const GL_RG16_SNORM = 36761;
pub const GL_MAT_EMISSION_BIT_PGI = 8388608;
pub const GL_TEXTURE_CLIPMAP_CENTER_SGIX = 33137;
pub const GL_ARB_sync = 1;
pub const GL_MAX_PROGRAM_PATCH_ATTRIBS_NV = 34520;
pub const GL_DEBUG_SEVERITY_HIGH_ARB = 37190;
pub const GL_TEXTURE_2D = 3553;
pub const GL_MAX_WIDTH = 33406;
pub const GL_PROGRAM_POINT_SIZE_EXT = 34370;
pub const GL_INDEX_TEST_FUNC_EXT = 33206;
pub const GL_MAX_COLOR_FRAMEBUFFER_STORAGE_SAMPLES_AMD = 37300;
pub const GL_GPU_ADDRESS_NV = 36660;
pub const GL_UNPACK_ALIGNMENT = 3317;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV = 35973;
pub const GL_IMAGE_ROTATE_ANGLE_HP = 33113;
pub const GL_VERSION_1_4 = 1;
pub const GL_SIGNED_LUMINANCE_ALPHA_NV = 34563;
pub const GL_RGB = 6407;
pub const GL_INTERLEAVED_ATTRIBS = 35980;
pub const GL_FRONT = 1028;
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER = 34033;
pub const GL_CURRENT_NORMAL = 2818;
pub const GL_STENCIL_BUFFER_BIT = 1024;
pub const GL_DRAW_BUFFER10_ATI = 34863;
pub const GL_PROGRAM_BINARY_FORMATS = 34815;
pub const GL_OP_SET_GE_EXT = 34700;
pub const GL_DRAW_INDIRECT_UNIFIED_NV = 36672;
pub const GL_ARB_arrays_of_arrays = 1;
pub const GL_RGBA_DXT5_S3TC = 33700;
pub const GL_DITHER = 3024;
pub const GL_COMPILE = 4864;
pub const GL_LOGIC_OP_MODE = 3056;
pub const GL_SAMPLE_MASK_VALUE_SGIS = 32938;
pub const GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV = 36257;
pub const GL_SAMPLE_ALPHA_TO_ONE_SGIS = 32927;
pub const GL_OUTPUT_TEXTURE_COORD25_EXT = 34742;
pub const GL_NV_texture_compression_vtc = 1;
pub const GL_RELATIVE_MOVE_TO_NV = 3;
pub const GL_UNIFORM_BUFFER_UNIFIED_NV = 37742;
pub const GL_MAX_COLOR_MATRIX_STACK_DEPTH = 32947;
pub const GL_RENDER = 7168;
pub const GL_SRGB_ALPHA = 35906;
pub const GL_MATRIX7_NV = 34359;
pub const GL_CULL_VERTEX_IBM = 103050;
pub const GL_MAP1_INDEX = 3473;
pub const GL_MAX_TESS_CONTROL_INPUT_COMPONENTS = 34924;
pub const GL_BEVEL_NV = 37030;
pub const GL_DIFFERENCE_KHR = 37534;
pub const GL_DOT4_ATI = 35175;
pub const GL_MAX_NAME_LENGTH = 37622;
pub const GL_FRAMEBUFFER_BINDING_EXT = 36006;
pub const GL_TEXTURE_HI_SIZE_NV = 34587;
pub const GL_FACTOR_MIN_AMD = 36892;
pub const GL_AUX_BUFFERS = 3072;
pub const GL_OP_RECIP_EXT = 34708;
pub const GL_IMAGE_2D_RECT_EXT = 36943;
pub const GL_CONSTANT_COLOR0_NV = 34090;
pub const GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = 36879;
pub const GL_GEOMETRY_SHADER_BIT = 4;
pub const GL_UNIFORM_BUFFER_SIZE = 35370;
pub const GL_INTERNALFORMAT_DEPTH_TYPE = 33404;
pub const GL_ARRAY_BUFFER_BINDING_ARB = 34964;
pub const GL_MIN_FRAGMENT_INTERPOLATION_OFFSET = 36443;
pub const GL_CLIP_DISTANCE7 = 12295;
pub const GL_MINMAX = 32814;
pub const GL_ADD_SIGNED_EXT = 34164;
pub const GL_HISTOGRAM_EXT = 32804;
pub const GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT = 36058;
pub const GL_T2F_IUI_V3F_EXT = 33202;
pub const GL_INTEL_performance_query = 1;
pub const GL_TEXTURE_COLOR_SAMPLES_NV = 36934;
pub const GL_2_BYTES_NV = 5127;
pub const GL_COMPRESSED_SIGNED_RG11_EAC = 37491;
pub const GL_COLOR_ATTACHMENT21 = 36085;
pub const GL_NV_framebuffer_multisample_coverage = 1;
pub const GL_NV_draw_vulkan_image = 1;
pub const GL_GEOMETRY_SUBROUTINE_UNIFORM = 37617;
pub const GL_VIEW_CLASS_8_BITS = 33483;
pub const GL_UNSIGNED_INT_IMAGE_BUFFER_EXT = 36967;
pub const GL_UNSIGNED_INT8_VEC4_NV = 36847;
pub const GL_FIRST_VERTEX_CONVENTION = 36429;
pub const GL_FLOAT_32_UNSIGNED_INT_24_8_REV = 36269;
pub const GL_MAP1_VERTEX_ATTRIB11_4_NV = 34411;
pub const GL_INVERT_OVG_NV = 37556;
pub const GL_MAP2_VERTEX_ATTRIB0_4_NV = 34416;
pub const GL_NEAREST_MIPMAP_NEAREST = 9984;
pub const GL_MAX_CLIP_DISTANCES = 3378;
pub const GL_YCBAYCR8A_4224_NV = 36914;
pub const GL_CONTEXT_COMPATIBILITY_PROFILE_BIT = 2;
pub const GL_MAX_VIEWPORT_DIMS = 3386;
pub const GL_EXT_window_rectangles = 1;
pub const GL_STENCIL = 6146;
pub const GL_POST_COLOR_MATRIX_RED_SCALE = 32948;
pub const GL_INDEX_ARRAY_POINTER_EXT = 32913;
pub const GL_XOR_NV = 5382;
pub const GL_COMPRESSED_RGBA8_ETC2_EAC = 37496;
pub const GL_OUTPUT_COLOR1_EXT = 34716;
pub const GL_SRC2_RGB = 34178;
pub const GL_3D = 1537;
pub const GL_PROXY_TEXTURE_RECTANGLE_ARB = 34039;
pub const GL_COMBINE_RGB_EXT = 34161;
pub const GL_TEXTURE_RESIDENT_EXT = 32871;
pub const GL_MODELVIEW6_ARB = 34598;
pub const GL_COMPRESSED_RGB = 34029;
pub const GL_LUID_SIZE_EXT = 8;
pub const GL_CURRENT_BIT = 1;
pub const GL_RGB8I_EXT = 36239;
pub const GL_ARB_tessellation_shader = 1;
pub const GL_VIEW_CLASS_16_BITS = 33482;
pub const GL_RENDERBUFFER_WIDTH_EXT = 36162;
pub const GL_TEXTURE_COORD_ARRAY_EXT = 32888;
pub const GL_ARB_shader_clock = 1;
pub const GL_DRAW_BUFFER9_ATI = 34862;
pub const GL_RIGHT = 1031;
pub const GL_RENDERBUFFER_BINDING_EXT = 36007;
pub const GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 34831;
pub const GL_STENCIL_COMPONENTS = 33413;
pub const GL_DEPTH_COMPONENTS = 33412;
pub const GL_ARB_explicit_attrib_location = 1;
pub const GL_SCALE_BY_TWO_NV = 34110;
pub const GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB = 4;
pub const GL_PATH_GEN_MODE_NV = 37040;
pub const GL_MAP_INVALIDATE_BUFFER_BIT = 8;
pub const GL_VIDEO_COLOR_CONVERSION_MIN_NV = 36907;
pub const GL_LOAD = 257;
pub const GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB = 37099;
pub const GL_4_BYTES = 5129;
pub const GL_ALPHA8 = 32828;
pub const GL_RELATIVE_SMALL_CW_ARC_TO_NV = 21;
pub const GL_TILING_TYPES_EXT = 38275;
pub const GL_HISTOGRAM_FORMAT_EXT = 32807;
pub const GL_UNSIGNED_SHORT_1_5_5_5_REV = 33638;
pub const GL_DEDICATED_MEMORY_OBJECT_EXT = 38273;
pub const GL_MAP2_VERTEX_ATTRIB8_4_NV = 34424;
pub const GL_SAMPLER_1D_SHADOW_ARB = 35681;
pub const GL_RED = 6403;
pub const GL_SAMPLE_COVERAGE_INVERT = 32939;
pub const GL_MAX_FRAGMENT_IMAGE_UNIFORMS = 37070;
pub const GL_SOURCE0_RGB_EXT = 34176;
pub const GL_HISTOGRAM_GREEN_SIZE = 32809;
pub const GL_VERSION_1_5 = 1;
pub const GL_ARB_sampler_objects = 1;
pub const GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT = 35976;
pub const GL_SAMPLER_CUBE = 35680;
pub const GL_MAX_EVAL_ORDER = 3376;
pub const GL_COMPRESSED_RGBA_ASTC_10x6_KHR = 37817;
pub const GL_POLYGON_SMOOTH_HINT = 3155;
pub const GL_FENCE_CONDITION_NV = 34036;
pub const GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS = 37573;
pub const GL_PRESERVE_ATI = 34658;
pub const GL_SPARSE_STORAGE_BIT_ARB = 1024;
pub const GL_RGBA_SIGNED_COMPONENTS_EXT = 35900;
pub const GL_STENCIL_BACK_FUNC = 34816;
pub const GL_PIXEL_GROUP_COLOR_SGIS = 33622;
pub const GL_MINUS_NV = 37535;
pub const GL_PACK_SKIP_VOLUMES_SGIS = 33072;
pub const GL_RESAMPLE_ZERO_FILL_OML = 35207;
pub const GL_IMAGE_CUBE_EXT = 36944;
pub const GL_DOUBLE_MAT4x3 = 36686;
pub const GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI = 32950;
pub const GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT = 35953;
pub const GL_FRAGMENT_COVERAGE_COLOR_NV = 37598;
pub const GL_CLAMP = 10496;
pub const GL_TEXTURE_BINDING_CUBE_MAP_ARRAY = 36874;
pub const GL_ALPHA8_SNORM = 36884;
pub const GL_PRIMITIVE_RESTART = 36765;
pub const GL_SAMPLER_RENDERBUFFER_NV = 36438;
pub const GL_ACTIVE_PROGRAM_EXT = 35725;
pub const GL_LOW_FLOAT = 36336;
pub const GL_LOWER_LEFT = 36001;
pub const GL_FRAMEBUFFER_ATTACHMENT_LAYERED = 36263;
pub const GL_PATH_MAX_PROJECTION_STACK_DEPTH_NV = 3384;
pub const GL_COLOR_LOGIC_OP = 3058;
pub const GL_EXT_multisample = 1;
pub const GL_EXT_gpu_shader4 = 1;
pub const GL_LARGE_CW_ARC_TO_NV = 24;
