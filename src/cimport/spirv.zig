pub const ptrdiff_t = c_long;
pub const wchar_t = c_int;
pub const max_align_t = extern struct {
    __clang_max_align_nonce1: c_longlong,
    __clang_max_align_nonce2: c_longdouble,
};
pub const SpvId = c_uint;
pub const SpvMagicNumber: c_uint = 119734787;
pub const SpvVersion: c_uint = 66560;
pub const SpvRevision: c_uint = 1;
pub const SpvOpCodeMask: c_uint = 65535;
pub const SpvWordCountShift: c_uint = 16;
pub const SpvSourceLanguageUnknown = enum_SpvSourceLanguage_.SpvSourceLanguageUnknown;
pub const SpvSourceLanguageESSL = enum_SpvSourceLanguage_.SpvSourceLanguageESSL;
pub const SpvSourceLanguageGLSL = enum_SpvSourceLanguage_.SpvSourceLanguageGLSL;
pub const SpvSourceLanguageOpenCL_C = enum_SpvSourceLanguage_.SpvSourceLanguageOpenCL_C;
pub const SpvSourceLanguageOpenCL_CPP = enum_SpvSourceLanguage_.SpvSourceLanguageOpenCL_CPP;
pub const SpvSourceLanguageHLSL = enum_SpvSourceLanguage_.SpvSourceLanguageHLSL;
pub const SpvSourceLanguageMax = enum_SpvSourceLanguage_.SpvSourceLanguageMax;
pub const enum_SpvSourceLanguage_ = extern enum {
    SpvSourceLanguageUnknown = 0,
    SpvSourceLanguageESSL = 1,
    SpvSourceLanguageGLSL = 2,
    SpvSourceLanguageOpenCL_C = 3,
    SpvSourceLanguageOpenCL_CPP = 4,
    SpvSourceLanguageHLSL = 5,
    SpvSourceLanguageMax = 2147483647,
};
pub const SpvSourceLanguage = enum_SpvSourceLanguage_;
pub const SpvExecutionModelVertex = enum_SpvExecutionModel_.SpvExecutionModelVertex;
pub const SpvExecutionModelTessellationControl = enum_SpvExecutionModel_.SpvExecutionModelTessellationControl;
pub const SpvExecutionModelTessellationEvaluation = enum_SpvExecutionModel_.SpvExecutionModelTessellationEvaluation;
pub const SpvExecutionModelGeometry = enum_SpvExecutionModel_.SpvExecutionModelGeometry;
pub const SpvExecutionModelFragment = enum_SpvExecutionModel_.SpvExecutionModelFragment;
pub const SpvExecutionModelGLCompute = enum_SpvExecutionModel_.SpvExecutionModelGLCompute;
pub const SpvExecutionModelKernel = enum_SpvExecutionModel_.SpvExecutionModelKernel;
pub const SpvExecutionModelTaskNV = enum_SpvExecutionModel_.SpvExecutionModelTaskNV;
pub const SpvExecutionModelMeshNV = enum_SpvExecutionModel_.SpvExecutionModelMeshNV;
pub const SpvExecutionModelRayGenerationNV = enum_SpvExecutionModel_.SpvExecutionModelRayGenerationNV;
pub const SpvExecutionModelIntersectionNV = enum_SpvExecutionModel_.SpvExecutionModelIntersectionNV;
pub const SpvExecutionModelAnyHitNV = enum_SpvExecutionModel_.SpvExecutionModelAnyHitNV;
pub const SpvExecutionModelClosestHitNV = enum_SpvExecutionModel_.SpvExecutionModelClosestHitNV;
pub const SpvExecutionModelMissNV = enum_SpvExecutionModel_.SpvExecutionModelMissNV;
pub const SpvExecutionModelCallableNV = enum_SpvExecutionModel_.SpvExecutionModelCallableNV;
pub const SpvExecutionModelMax = enum_SpvExecutionModel_.SpvExecutionModelMax;
pub const enum_SpvExecutionModel_ = extern enum {
    SpvExecutionModelVertex = 0,
    SpvExecutionModelTessellationControl = 1,
    SpvExecutionModelTessellationEvaluation = 2,
    SpvExecutionModelGeometry = 3,
    SpvExecutionModelFragment = 4,
    SpvExecutionModelGLCompute = 5,
    SpvExecutionModelKernel = 6,
    SpvExecutionModelTaskNV = 5267,
    SpvExecutionModelMeshNV = 5268,
    SpvExecutionModelRayGenerationNV = 5313,
    SpvExecutionModelIntersectionNV = 5314,
    SpvExecutionModelAnyHitNV = 5315,
    SpvExecutionModelClosestHitNV = 5316,
    SpvExecutionModelMissNV = 5317,
    SpvExecutionModelCallableNV = 5318,
    SpvExecutionModelMax = 2147483647,
};
pub const SpvExecutionModel = enum_SpvExecutionModel_;
pub const SpvAddressingModelLogical = enum_SpvAddressingModel_.SpvAddressingModelLogical;
pub const SpvAddressingModelPhysical32 = enum_SpvAddressingModel_.SpvAddressingModelPhysical32;
pub const SpvAddressingModelPhysical64 = enum_SpvAddressingModel_.SpvAddressingModelPhysical64;
pub const SpvAddressingModelPhysicalStorageBuffer64 = enum_SpvAddressingModel_.SpvAddressingModelPhysicalStorageBuffer64;
pub const SpvAddressingModelPhysicalStorageBuffer64EXT = enum_SpvAddressingModel_.SpvAddressingModelPhysicalStorageBuffer64EXT;
pub const SpvAddressingModelMax = enum_SpvAddressingModel_.SpvAddressingModelMax;
pub const enum_SpvAddressingModel_ = extern enum {
    SpvAddressingModelLogical = 0,
    SpvAddressingModelPhysical32 = 1,
    SpvAddressingModelPhysical64 = 2,
    SpvAddressingModelPhysicalStorageBuffer64 = 5348,
    SpvAddressingModelPhysicalStorageBuffer64EXT = 5348,
    SpvAddressingModelMax = 2147483647,
};
pub const SpvAddressingModel = enum_SpvAddressingModel_;
pub const SpvMemoryModelSimple = enum_SpvMemoryModel_.SpvMemoryModelSimple;
pub const SpvMemoryModelGLSL450 = enum_SpvMemoryModel_.SpvMemoryModelGLSL450;
pub const SpvMemoryModelOpenCL = enum_SpvMemoryModel_.SpvMemoryModelOpenCL;
pub const SpvMemoryModelVulkan = enum_SpvMemoryModel_.SpvMemoryModelVulkan;
pub const SpvMemoryModelVulkanKHR = enum_SpvMemoryModel_.SpvMemoryModelVulkanKHR;
pub const SpvMemoryModelMax = enum_SpvMemoryModel_.SpvMemoryModelMax;
pub const enum_SpvMemoryModel_ = extern enum {
    SpvMemoryModelSimple = 0,
    SpvMemoryModelGLSL450 = 1,
    SpvMemoryModelOpenCL = 2,
    SpvMemoryModelVulkan = 3,
    SpvMemoryModelVulkanKHR = 3,
    SpvMemoryModelMax = 2147483647,
};
pub const SpvMemoryModel = enum_SpvMemoryModel_;
pub const SpvExecutionModeInvocations = enum_SpvExecutionMode_.SpvExecutionModeInvocations;
pub const SpvExecutionModeSpacingEqual = enum_SpvExecutionMode_.SpvExecutionModeSpacingEqual;
pub const SpvExecutionModeSpacingFractionalEven = enum_SpvExecutionMode_.SpvExecutionModeSpacingFractionalEven;
pub const SpvExecutionModeSpacingFractionalOdd = enum_SpvExecutionMode_.SpvExecutionModeSpacingFractionalOdd;
pub const SpvExecutionModeVertexOrderCw = enum_SpvExecutionMode_.SpvExecutionModeVertexOrderCw;
pub const SpvExecutionModeVertexOrderCcw = enum_SpvExecutionMode_.SpvExecutionModeVertexOrderCcw;
pub const SpvExecutionModePixelCenterInteger = enum_SpvExecutionMode_.SpvExecutionModePixelCenterInteger;
pub const SpvExecutionModeOriginUpperLeft = enum_SpvExecutionMode_.SpvExecutionModeOriginUpperLeft;
pub const SpvExecutionModeOriginLowerLeft = enum_SpvExecutionMode_.SpvExecutionModeOriginLowerLeft;
pub const SpvExecutionModeEarlyFragmentTests = enum_SpvExecutionMode_.SpvExecutionModeEarlyFragmentTests;
pub const SpvExecutionModePointMode = enum_SpvExecutionMode_.SpvExecutionModePointMode;
pub const SpvExecutionModeXfb = enum_SpvExecutionMode_.SpvExecutionModeXfb;
pub const SpvExecutionModeDepthReplacing = enum_SpvExecutionMode_.SpvExecutionModeDepthReplacing;
pub const SpvExecutionModeDepthGreater = enum_SpvExecutionMode_.SpvExecutionModeDepthGreater;
pub const SpvExecutionModeDepthLess = enum_SpvExecutionMode_.SpvExecutionModeDepthLess;
pub const SpvExecutionModeDepthUnchanged = enum_SpvExecutionMode_.SpvExecutionModeDepthUnchanged;
pub const SpvExecutionModeLocalSize = enum_SpvExecutionMode_.SpvExecutionModeLocalSize;
pub const SpvExecutionModeLocalSizeHint = enum_SpvExecutionMode_.SpvExecutionModeLocalSizeHint;
pub const SpvExecutionModeInputPoints = enum_SpvExecutionMode_.SpvExecutionModeInputPoints;
pub const SpvExecutionModeInputLines = enum_SpvExecutionMode_.SpvExecutionModeInputLines;
pub const SpvExecutionModeInputLinesAdjacency = enum_SpvExecutionMode_.SpvExecutionModeInputLinesAdjacency;
pub const SpvExecutionModeTriangles = enum_SpvExecutionMode_.SpvExecutionModeTriangles;
pub const SpvExecutionModeInputTrianglesAdjacency = enum_SpvExecutionMode_.SpvExecutionModeInputTrianglesAdjacency;
pub const SpvExecutionModeQuads = enum_SpvExecutionMode_.SpvExecutionModeQuads;
pub const SpvExecutionModeIsolines = enum_SpvExecutionMode_.SpvExecutionModeIsolines;
pub const SpvExecutionModeOutputVertices = enum_SpvExecutionMode_.SpvExecutionModeOutputVertices;
pub const SpvExecutionModeOutputPoints = enum_SpvExecutionMode_.SpvExecutionModeOutputPoints;
pub const SpvExecutionModeOutputLineStrip = enum_SpvExecutionMode_.SpvExecutionModeOutputLineStrip;
pub const SpvExecutionModeOutputTriangleStrip = enum_SpvExecutionMode_.SpvExecutionModeOutputTriangleStrip;
pub const SpvExecutionModeVecTypeHint = enum_SpvExecutionMode_.SpvExecutionModeVecTypeHint;
pub const SpvExecutionModeContractionOff = enum_SpvExecutionMode_.SpvExecutionModeContractionOff;
pub const SpvExecutionModeInitializer = enum_SpvExecutionMode_.SpvExecutionModeInitializer;
pub const SpvExecutionModeFinalizer = enum_SpvExecutionMode_.SpvExecutionModeFinalizer;
pub const SpvExecutionModeSubgroupSize = enum_SpvExecutionMode_.SpvExecutionModeSubgroupSize;
pub const SpvExecutionModeSubgroupsPerWorkgroup = enum_SpvExecutionMode_.SpvExecutionModeSubgroupsPerWorkgroup;
pub const SpvExecutionModeSubgroupsPerWorkgroupId = enum_SpvExecutionMode_.SpvExecutionModeSubgroupsPerWorkgroupId;
pub const SpvExecutionModeLocalSizeId = enum_SpvExecutionMode_.SpvExecutionModeLocalSizeId;
pub const SpvExecutionModeLocalSizeHintId = enum_SpvExecutionMode_.SpvExecutionModeLocalSizeHintId;
pub const SpvExecutionModePostDepthCoverage = enum_SpvExecutionMode_.SpvExecutionModePostDepthCoverage;
pub const SpvExecutionModeDenormPreserve = enum_SpvExecutionMode_.SpvExecutionModeDenormPreserve;
pub const SpvExecutionModeDenormFlushToZero = enum_SpvExecutionMode_.SpvExecutionModeDenormFlushToZero;
pub const SpvExecutionModeSignedZeroInfNanPreserve = enum_SpvExecutionMode_.SpvExecutionModeSignedZeroInfNanPreserve;
pub const SpvExecutionModeRoundingModeRTE = enum_SpvExecutionMode_.SpvExecutionModeRoundingModeRTE;
pub const SpvExecutionModeRoundingModeRTZ = enum_SpvExecutionMode_.SpvExecutionModeRoundingModeRTZ;
pub const SpvExecutionModeStencilRefReplacingEXT = enum_SpvExecutionMode_.SpvExecutionModeStencilRefReplacingEXT;
pub const SpvExecutionModeOutputLinesNV = enum_SpvExecutionMode_.SpvExecutionModeOutputLinesNV;
pub const SpvExecutionModeOutputPrimitivesNV = enum_SpvExecutionMode_.SpvExecutionModeOutputPrimitivesNV;
pub const SpvExecutionModeDerivativeGroupQuadsNV = enum_SpvExecutionMode_.SpvExecutionModeDerivativeGroupQuadsNV;
pub const SpvExecutionModeDerivativeGroupLinearNV = enum_SpvExecutionMode_.SpvExecutionModeDerivativeGroupLinearNV;
pub const SpvExecutionModeOutputTrianglesNV = enum_SpvExecutionMode_.SpvExecutionModeOutputTrianglesNV;
pub const SpvExecutionModePixelInterlockOrderedEXT = enum_SpvExecutionMode_.SpvExecutionModePixelInterlockOrderedEXT;
pub const SpvExecutionModePixelInterlockUnorderedEXT = enum_SpvExecutionMode_.SpvExecutionModePixelInterlockUnorderedEXT;
pub const SpvExecutionModeSampleInterlockOrderedEXT = enum_SpvExecutionMode_.SpvExecutionModeSampleInterlockOrderedEXT;
pub const SpvExecutionModeSampleInterlockUnorderedEXT = enum_SpvExecutionMode_.SpvExecutionModeSampleInterlockUnorderedEXT;
pub const SpvExecutionModeShadingRateInterlockOrderedEXT = enum_SpvExecutionMode_.SpvExecutionModeShadingRateInterlockOrderedEXT;
pub const SpvExecutionModeShadingRateInterlockUnorderedEXT = enum_SpvExecutionMode_.SpvExecutionModeShadingRateInterlockUnorderedEXT;
pub const SpvExecutionModeMax = enum_SpvExecutionMode_.SpvExecutionModeMax;
pub const enum_SpvExecutionMode_ = extern enum {
    SpvExecutionModeInvocations = 0,
    SpvExecutionModeSpacingEqual = 1,
    SpvExecutionModeSpacingFractionalEven = 2,
    SpvExecutionModeSpacingFractionalOdd = 3,
    SpvExecutionModeVertexOrderCw = 4,
    SpvExecutionModeVertexOrderCcw = 5,
    SpvExecutionModePixelCenterInteger = 6,
    SpvExecutionModeOriginUpperLeft = 7,
    SpvExecutionModeOriginLowerLeft = 8,
    SpvExecutionModeEarlyFragmentTests = 9,
    SpvExecutionModePointMode = 10,
    SpvExecutionModeXfb = 11,
    SpvExecutionModeDepthReplacing = 12,
    SpvExecutionModeDepthGreater = 14,
    SpvExecutionModeDepthLess = 15,
    SpvExecutionModeDepthUnchanged = 16,
    SpvExecutionModeLocalSize = 17,
    SpvExecutionModeLocalSizeHint = 18,
    SpvExecutionModeInputPoints = 19,
    SpvExecutionModeInputLines = 20,
    SpvExecutionModeInputLinesAdjacency = 21,
    SpvExecutionModeTriangles = 22,
    SpvExecutionModeInputTrianglesAdjacency = 23,
    SpvExecutionModeQuads = 24,
    SpvExecutionModeIsolines = 25,
    SpvExecutionModeOutputVertices = 26,
    SpvExecutionModeOutputPoints = 27,
    SpvExecutionModeOutputLineStrip = 28,
    SpvExecutionModeOutputTriangleStrip = 29,
    SpvExecutionModeVecTypeHint = 30,
    SpvExecutionModeContractionOff = 31,
    SpvExecutionModeInitializer = 33,
    SpvExecutionModeFinalizer = 34,
    SpvExecutionModeSubgroupSize = 35,
    SpvExecutionModeSubgroupsPerWorkgroup = 36,
    SpvExecutionModeSubgroupsPerWorkgroupId = 37,
    SpvExecutionModeLocalSizeId = 38,
    SpvExecutionModeLocalSizeHintId = 39,
    SpvExecutionModePostDepthCoverage = 4446,
    SpvExecutionModeDenormPreserve = 4459,
    SpvExecutionModeDenormFlushToZero = 4460,
    SpvExecutionModeSignedZeroInfNanPreserve = 4461,
    SpvExecutionModeRoundingModeRTE = 4462,
    SpvExecutionModeRoundingModeRTZ = 4463,
    SpvExecutionModeStencilRefReplacingEXT = 5027,
    SpvExecutionModeOutputLinesNV = 5269,
    SpvExecutionModeOutputPrimitivesNV = 5270,
    SpvExecutionModeDerivativeGroupQuadsNV = 5289,
    SpvExecutionModeDerivativeGroupLinearNV = 5290,
    SpvExecutionModeOutputTrianglesNV = 5298,
    SpvExecutionModePixelInterlockOrderedEXT = 5366,
    SpvExecutionModePixelInterlockUnorderedEXT = 5367,
    SpvExecutionModeSampleInterlockOrderedEXT = 5368,
    SpvExecutionModeSampleInterlockUnorderedEXT = 5369,
    SpvExecutionModeShadingRateInterlockOrderedEXT = 5370,
    SpvExecutionModeShadingRateInterlockUnorderedEXT = 5371,
    SpvExecutionModeMax = 2147483647,
};
pub const SpvExecutionMode = enum_SpvExecutionMode_;
pub const SpvStorageClassUniformConstant = enum_SpvStorageClass_.SpvStorageClassUniformConstant;
pub const SpvStorageClassInput = enum_SpvStorageClass_.SpvStorageClassInput;
pub const SpvStorageClassUniform = enum_SpvStorageClass_.SpvStorageClassUniform;
pub const SpvStorageClassOutput = enum_SpvStorageClass_.SpvStorageClassOutput;
pub const SpvStorageClassWorkgroup = enum_SpvStorageClass_.SpvStorageClassWorkgroup;
pub const SpvStorageClassCrossWorkgroup = enum_SpvStorageClass_.SpvStorageClassCrossWorkgroup;
pub const SpvStorageClassPrivate = enum_SpvStorageClass_.SpvStorageClassPrivate;
pub const SpvStorageClassFunction = enum_SpvStorageClass_.SpvStorageClassFunction;
pub const SpvStorageClassGeneric = enum_SpvStorageClass_.SpvStorageClassGeneric;
pub const SpvStorageClassPushConstant = enum_SpvStorageClass_.SpvStorageClassPushConstant;
pub const SpvStorageClassAtomicCounter = enum_SpvStorageClass_.SpvStorageClassAtomicCounter;
pub const SpvStorageClassImage = enum_SpvStorageClass_.SpvStorageClassImage;
pub const SpvStorageClassStorageBuffer = enum_SpvStorageClass_.SpvStorageClassStorageBuffer;
pub const SpvStorageClassCallableDataNV = enum_SpvStorageClass_.SpvStorageClassCallableDataNV;
pub const SpvStorageClassIncomingCallableDataNV = enum_SpvStorageClass_.SpvStorageClassIncomingCallableDataNV;
pub const SpvStorageClassRayPayloadNV = enum_SpvStorageClass_.SpvStorageClassRayPayloadNV;
pub const SpvStorageClassHitAttributeNV = enum_SpvStorageClass_.SpvStorageClassHitAttributeNV;
pub const SpvStorageClassIncomingRayPayloadNV = enum_SpvStorageClass_.SpvStorageClassIncomingRayPayloadNV;
pub const SpvStorageClassShaderRecordBufferNV = enum_SpvStorageClass_.SpvStorageClassShaderRecordBufferNV;
pub const SpvStorageClassPhysicalStorageBuffer = enum_SpvStorageClass_.SpvStorageClassPhysicalStorageBuffer;
pub const SpvStorageClassPhysicalStorageBufferEXT = enum_SpvStorageClass_.SpvStorageClassPhysicalStorageBufferEXT;
pub const SpvStorageClassMax = enum_SpvStorageClass_.SpvStorageClassMax;
pub const enum_SpvStorageClass_ = extern enum {
    SpvStorageClassUniformConstant = 0,
    SpvStorageClassInput = 1,
    SpvStorageClassUniform = 2,
    SpvStorageClassOutput = 3,
    SpvStorageClassWorkgroup = 4,
    SpvStorageClassCrossWorkgroup = 5,
    SpvStorageClassPrivate = 6,
    SpvStorageClassFunction = 7,
    SpvStorageClassGeneric = 8,
    SpvStorageClassPushConstant = 9,
    SpvStorageClassAtomicCounter = 10,
    SpvStorageClassImage = 11,
    SpvStorageClassStorageBuffer = 12,
    SpvStorageClassCallableDataNV = 5328,
    SpvStorageClassIncomingCallableDataNV = 5329,
    SpvStorageClassRayPayloadNV = 5338,
    SpvStorageClassHitAttributeNV = 5339,
    SpvStorageClassIncomingRayPayloadNV = 5342,
    SpvStorageClassShaderRecordBufferNV = 5343,
    SpvStorageClassPhysicalStorageBuffer = 5349,
    SpvStorageClassPhysicalStorageBufferEXT = 5349,
    SpvStorageClassMax = 2147483647,
};
pub const SpvStorageClass = enum_SpvStorageClass_;
pub const SpvDim1D = enum_SpvDim_.SpvDim1D;
pub const SpvDim2D = enum_SpvDim_.SpvDim2D;
pub const SpvDim3D = enum_SpvDim_.SpvDim3D;
pub const SpvDimCube = enum_SpvDim_.SpvDimCube;
pub const SpvDimRect = enum_SpvDim_.SpvDimRect;
pub const SpvDimBuffer = enum_SpvDim_.SpvDimBuffer;
pub const SpvDimSubpassData = enum_SpvDim_.SpvDimSubpassData;
pub const SpvDimMax = enum_SpvDim_.SpvDimMax;
pub const enum_SpvDim_ = extern enum {
    SpvDim1D = 0,
    SpvDim2D = 1,
    SpvDim3D = 2,
    SpvDimCube = 3,
    SpvDimRect = 4,
    SpvDimBuffer = 5,
    SpvDimSubpassData = 6,
    SpvDimMax = 2147483647,
};
pub const SpvDim = enum_SpvDim_;
pub const SpvSamplerAddressingModeNone = enum_SpvSamplerAddressingMode_.SpvSamplerAddressingModeNone;
pub const SpvSamplerAddressingModeClampToEdge = enum_SpvSamplerAddressingMode_.SpvSamplerAddressingModeClampToEdge;
pub const SpvSamplerAddressingModeClamp = enum_SpvSamplerAddressingMode_.SpvSamplerAddressingModeClamp;
pub const SpvSamplerAddressingModeRepeat = enum_SpvSamplerAddressingMode_.SpvSamplerAddressingModeRepeat;
pub const SpvSamplerAddressingModeRepeatMirrored = enum_SpvSamplerAddressingMode_.SpvSamplerAddressingModeRepeatMirrored;
pub const SpvSamplerAddressingModeMax = enum_SpvSamplerAddressingMode_.SpvSamplerAddressingModeMax;
pub const enum_SpvSamplerAddressingMode_ = extern enum {
    SpvSamplerAddressingModeNone = 0,
    SpvSamplerAddressingModeClampToEdge = 1,
    SpvSamplerAddressingModeClamp = 2,
    SpvSamplerAddressingModeRepeat = 3,
    SpvSamplerAddressingModeRepeatMirrored = 4,
    SpvSamplerAddressingModeMax = 2147483647,
};
pub const SpvSamplerAddressingMode = enum_SpvSamplerAddressingMode_;
pub const SpvSamplerFilterModeNearest = enum_SpvSamplerFilterMode_.SpvSamplerFilterModeNearest;
pub const SpvSamplerFilterModeLinear = enum_SpvSamplerFilterMode_.SpvSamplerFilterModeLinear;
pub const SpvSamplerFilterModeMax = enum_SpvSamplerFilterMode_.SpvSamplerFilterModeMax;
pub const enum_SpvSamplerFilterMode_ = extern enum {
    SpvSamplerFilterModeNearest = 0,
    SpvSamplerFilterModeLinear = 1,
    SpvSamplerFilterModeMax = 2147483647,
};
pub const SpvSamplerFilterMode = enum_SpvSamplerFilterMode_;
pub const SpvImageFormatUnknown = enum_SpvImageFormat_.SpvImageFormatUnknown;
pub const SpvImageFormatRgba32f = enum_SpvImageFormat_.SpvImageFormatRgba32f;
pub const SpvImageFormatRgba16f = enum_SpvImageFormat_.SpvImageFormatRgba16f;
pub const SpvImageFormatR32f = enum_SpvImageFormat_.SpvImageFormatR32f;
pub const SpvImageFormatRgba8 = enum_SpvImageFormat_.SpvImageFormatRgba8;
pub const SpvImageFormatRgba8Snorm = enum_SpvImageFormat_.SpvImageFormatRgba8Snorm;
pub const SpvImageFormatRg32f = enum_SpvImageFormat_.SpvImageFormatRg32f;
pub const SpvImageFormatRg16f = enum_SpvImageFormat_.SpvImageFormatRg16f;
pub const SpvImageFormatR11fG11fB10f = enum_SpvImageFormat_.SpvImageFormatR11fG11fB10f;
pub const SpvImageFormatR16f = enum_SpvImageFormat_.SpvImageFormatR16f;
pub const SpvImageFormatRgba16 = enum_SpvImageFormat_.SpvImageFormatRgba16;
pub const SpvImageFormatRgb10A2 = enum_SpvImageFormat_.SpvImageFormatRgb10A2;
pub const SpvImageFormatRg16 = enum_SpvImageFormat_.SpvImageFormatRg16;
pub const SpvImageFormatRg8 = enum_SpvImageFormat_.SpvImageFormatRg8;
pub const SpvImageFormatR16 = enum_SpvImageFormat_.SpvImageFormatR16;
pub const SpvImageFormatR8 = enum_SpvImageFormat_.SpvImageFormatR8;
pub const SpvImageFormatRgba16Snorm = enum_SpvImageFormat_.SpvImageFormatRgba16Snorm;
pub const SpvImageFormatRg16Snorm = enum_SpvImageFormat_.SpvImageFormatRg16Snorm;
pub const SpvImageFormatRg8Snorm = enum_SpvImageFormat_.SpvImageFormatRg8Snorm;
pub const SpvImageFormatR16Snorm = enum_SpvImageFormat_.SpvImageFormatR16Snorm;
pub const SpvImageFormatR8Snorm = enum_SpvImageFormat_.SpvImageFormatR8Snorm;
pub const SpvImageFormatRgba32i = enum_SpvImageFormat_.SpvImageFormatRgba32i;
pub const SpvImageFormatRgba16i = enum_SpvImageFormat_.SpvImageFormatRgba16i;
pub const SpvImageFormatRgba8i = enum_SpvImageFormat_.SpvImageFormatRgba8i;
pub const SpvImageFormatR32i = enum_SpvImageFormat_.SpvImageFormatR32i;
pub const SpvImageFormatRg32i = enum_SpvImageFormat_.SpvImageFormatRg32i;
pub const SpvImageFormatRg16i = enum_SpvImageFormat_.SpvImageFormatRg16i;
pub const SpvImageFormatRg8i = enum_SpvImageFormat_.SpvImageFormatRg8i;
pub const SpvImageFormatR16i = enum_SpvImageFormat_.SpvImageFormatR16i;
pub const SpvImageFormatR8i = enum_SpvImageFormat_.SpvImageFormatR8i;
pub const SpvImageFormatRgba32ui = enum_SpvImageFormat_.SpvImageFormatRgba32ui;
pub const SpvImageFormatRgba16ui = enum_SpvImageFormat_.SpvImageFormatRgba16ui;
pub const SpvImageFormatRgba8ui = enum_SpvImageFormat_.SpvImageFormatRgba8ui;
pub const SpvImageFormatR32ui = enum_SpvImageFormat_.SpvImageFormatR32ui;
pub const SpvImageFormatRgb10a2ui = enum_SpvImageFormat_.SpvImageFormatRgb10a2ui;
pub const SpvImageFormatRg32ui = enum_SpvImageFormat_.SpvImageFormatRg32ui;
pub const SpvImageFormatRg16ui = enum_SpvImageFormat_.SpvImageFormatRg16ui;
pub const SpvImageFormatRg8ui = enum_SpvImageFormat_.SpvImageFormatRg8ui;
pub const SpvImageFormatR16ui = enum_SpvImageFormat_.SpvImageFormatR16ui;
pub const SpvImageFormatR8ui = enum_SpvImageFormat_.SpvImageFormatR8ui;
pub const SpvImageFormatMax = enum_SpvImageFormat_.SpvImageFormatMax;
pub const enum_SpvImageFormat_ = extern enum {
    SpvImageFormatUnknown = 0,
    SpvImageFormatRgba32f = 1,
    SpvImageFormatRgba16f = 2,
    SpvImageFormatR32f = 3,
    SpvImageFormatRgba8 = 4,
    SpvImageFormatRgba8Snorm = 5,
    SpvImageFormatRg32f = 6,
    SpvImageFormatRg16f = 7,
    SpvImageFormatR11fG11fB10f = 8,
    SpvImageFormatR16f = 9,
    SpvImageFormatRgba16 = 10,
    SpvImageFormatRgb10A2 = 11,
    SpvImageFormatRg16 = 12,
    SpvImageFormatRg8 = 13,
    SpvImageFormatR16 = 14,
    SpvImageFormatR8 = 15,
    SpvImageFormatRgba16Snorm = 16,
    SpvImageFormatRg16Snorm = 17,
    SpvImageFormatRg8Snorm = 18,
    SpvImageFormatR16Snorm = 19,
    SpvImageFormatR8Snorm = 20,
    SpvImageFormatRgba32i = 21,
    SpvImageFormatRgba16i = 22,
    SpvImageFormatRgba8i = 23,
    SpvImageFormatR32i = 24,
    SpvImageFormatRg32i = 25,
    SpvImageFormatRg16i = 26,
    SpvImageFormatRg8i = 27,
    SpvImageFormatR16i = 28,
    SpvImageFormatR8i = 29,
    SpvImageFormatRgba32ui = 30,
    SpvImageFormatRgba16ui = 31,
    SpvImageFormatRgba8ui = 32,
    SpvImageFormatR32ui = 33,
    SpvImageFormatRgb10a2ui = 34,
    SpvImageFormatRg32ui = 35,
    SpvImageFormatRg16ui = 36,
    SpvImageFormatRg8ui = 37,
    SpvImageFormatR16ui = 38,
    SpvImageFormatR8ui = 39,
    SpvImageFormatMax = 2147483647,
};
pub const SpvImageFormat = enum_SpvImageFormat_;
pub const SpvImageChannelOrderR = enum_SpvImageChannelOrder_.SpvImageChannelOrderR;
pub const SpvImageChannelOrderA = enum_SpvImageChannelOrder_.SpvImageChannelOrderA;
pub const SpvImageChannelOrderRG = enum_SpvImageChannelOrder_.SpvImageChannelOrderRG;
pub const SpvImageChannelOrderRA = enum_SpvImageChannelOrder_.SpvImageChannelOrderRA;
pub const SpvImageChannelOrderRGB = enum_SpvImageChannelOrder_.SpvImageChannelOrderRGB;
pub const SpvImageChannelOrderRGBA = enum_SpvImageChannelOrder_.SpvImageChannelOrderRGBA;
pub const SpvImageChannelOrderBGRA = enum_SpvImageChannelOrder_.SpvImageChannelOrderBGRA;
pub const SpvImageChannelOrderARGB = enum_SpvImageChannelOrder_.SpvImageChannelOrderARGB;
pub const SpvImageChannelOrderIntensity = enum_SpvImageChannelOrder_.SpvImageChannelOrderIntensity;
pub const SpvImageChannelOrderLuminance = enum_SpvImageChannelOrder_.SpvImageChannelOrderLuminance;
pub const SpvImageChannelOrderRx = enum_SpvImageChannelOrder_.SpvImageChannelOrderRx;
pub const SpvImageChannelOrderRGx = enum_SpvImageChannelOrder_.SpvImageChannelOrderRGx;
pub const SpvImageChannelOrderRGBx = enum_SpvImageChannelOrder_.SpvImageChannelOrderRGBx;
pub const SpvImageChannelOrderDepth = enum_SpvImageChannelOrder_.SpvImageChannelOrderDepth;
pub const SpvImageChannelOrderDepthStencil = enum_SpvImageChannelOrder_.SpvImageChannelOrderDepthStencil;
pub const SpvImageChannelOrdersRGB = enum_SpvImageChannelOrder_.SpvImageChannelOrdersRGB;
pub const SpvImageChannelOrdersRGBx = enum_SpvImageChannelOrder_.SpvImageChannelOrdersRGBx;
pub const SpvImageChannelOrdersRGBA = enum_SpvImageChannelOrder_.SpvImageChannelOrdersRGBA;
pub const SpvImageChannelOrdersBGRA = enum_SpvImageChannelOrder_.SpvImageChannelOrdersBGRA;
pub const SpvImageChannelOrderABGR = enum_SpvImageChannelOrder_.SpvImageChannelOrderABGR;
pub const SpvImageChannelOrderMax = enum_SpvImageChannelOrder_.SpvImageChannelOrderMax;
pub const enum_SpvImageChannelOrder_ = extern enum {
    SpvImageChannelOrderR = 0,
    SpvImageChannelOrderA = 1,
    SpvImageChannelOrderRG = 2,
    SpvImageChannelOrderRA = 3,
    SpvImageChannelOrderRGB = 4,
    SpvImageChannelOrderRGBA = 5,
    SpvImageChannelOrderBGRA = 6,
    SpvImageChannelOrderARGB = 7,
    SpvImageChannelOrderIntensity = 8,
    SpvImageChannelOrderLuminance = 9,
    SpvImageChannelOrderRx = 10,
    SpvImageChannelOrderRGx = 11,
    SpvImageChannelOrderRGBx = 12,
    SpvImageChannelOrderDepth = 13,
    SpvImageChannelOrderDepthStencil = 14,
    SpvImageChannelOrdersRGB = 15,
    SpvImageChannelOrdersRGBx = 16,
    SpvImageChannelOrdersRGBA = 17,
    SpvImageChannelOrdersBGRA = 18,
    SpvImageChannelOrderABGR = 19,
    SpvImageChannelOrderMax = 2147483647,
};
pub const SpvImageChannelOrder = enum_SpvImageChannelOrder_;
pub const SpvImageChannelDataTypeSnormInt8 = enum_SpvImageChannelDataType_.SpvImageChannelDataTypeSnormInt8;
pub const SpvImageChannelDataTypeSnormInt16 = enum_SpvImageChannelDataType_.SpvImageChannelDataTypeSnormInt16;
pub const SpvImageChannelDataTypeUnormInt8 = enum_SpvImageChannelDataType_.SpvImageChannelDataTypeUnormInt8;
pub const SpvImageChannelDataTypeUnormInt16 = enum_SpvImageChannelDataType_.SpvImageChannelDataTypeUnormInt16;
pub const SpvImageChannelDataTypeUnormShort565 = enum_SpvImageChannelDataType_.SpvImageChannelDataTypeUnormShort565;
pub const SpvImageChannelDataTypeUnormShort555 = enum_SpvImageChannelDataType_.SpvImageChannelDataTypeUnormShort555;
pub const SpvImageChannelDataTypeUnormInt101010 = enum_SpvImageChannelDataType_.SpvImageChannelDataTypeUnormInt101010;
pub const SpvImageChannelDataTypeSignedInt8 = enum_SpvImageChannelDataType_.SpvImageChannelDataTypeSignedInt8;
pub const SpvImageChannelDataTypeSignedInt16 = enum_SpvImageChannelDataType_.SpvImageChannelDataTypeSignedInt16;
pub const SpvImageChannelDataTypeSignedInt32 = enum_SpvImageChannelDataType_.SpvImageChannelDataTypeSignedInt32;
pub const SpvImageChannelDataTypeUnsignedInt8 = enum_SpvImageChannelDataType_.SpvImageChannelDataTypeUnsignedInt8;
pub const SpvImageChannelDataTypeUnsignedInt16 = enum_SpvImageChannelDataType_.SpvImageChannelDataTypeUnsignedInt16;
pub const SpvImageChannelDataTypeUnsignedInt32 = enum_SpvImageChannelDataType_.SpvImageChannelDataTypeUnsignedInt32;
pub const SpvImageChannelDataTypeHalfFloat = enum_SpvImageChannelDataType_.SpvImageChannelDataTypeHalfFloat;
pub const SpvImageChannelDataTypeFloat = enum_SpvImageChannelDataType_.SpvImageChannelDataTypeFloat;
pub const SpvImageChannelDataTypeUnormInt24 = enum_SpvImageChannelDataType_.SpvImageChannelDataTypeUnormInt24;
pub const SpvImageChannelDataTypeUnormInt101010_2 = enum_SpvImageChannelDataType_.SpvImageChannelDataTypeUnormInt101010_2;
pub const SpvImageChannelDataTypeMax = enum_SpvImageChannelDataType_.SpvImageChannelDataTypeMax;
pub const enum_SpvImageChannelDataType_ = extern enum {
    SpvImageChannelDataTypeSnormInt8 = 0,
    SpvImageChannelDataTypeSnormInt16 = 1,
    SpvImageChannelDataTypeUnormInt8 = 2,
    SpvImageChannelDataTypeUnormInt16 = 3,
    SpvImageChannelDataTypeUnormShort565 = 4,
    SpvImageChannelDataTypeUnormShort555 = 5,
    SpvImageChannelDataTypeUnormInt101010 = 6,
    SpvImageChannelDataTypeSignedInt8 = 7,
    SpvImageChannelDataTypeSignedInt16 = 8,
    SpvImageChannelDataTypeSignedInt32 = 9,
    SpvImageChannelDataTypeUnsignedInt8 = 10,
    SpvImageChannelDataTypeUnsignedInt16 = 11,
    SpvImageChannelDataTypeUnsignedInt32 = 12,
    SpvImageChannelDataTypeHalfFloat = 13,
    SpvImageChannelDataTypeFloat = 14,
    SpvImageChannelDataTypeUnormInt24 = 15,
    SpvImageChannelDataTypeUnormInt101010_2 = 16,
    SpvImageChannelDataTypeMax = 2147483647,
};
pub const SpvImageChannelDataType = enum_SpvImageChannelDataType_;
pub const SpvImageOperandsBiasShift = enum_SpvImageOperandsShift_.SpvImageOperandsBiasShift;
pub const SpvImageOperandsLodShift = enum_SpvImageOperandsShift_.SpvImageOperandsLodShift;
pub const SpvImageOperandsGradShift = enum_SpvImageOperandsShift_.SpvImageOperandsGradShift;
pub const SpvImageOperandsConstOffsetShift = enum_SpvImageOperandsShift_.SpvImageOperandsConstOffsetShift;
pub const SpvImageOperandsOffsetShift = enum_SpvImageOperandsShift_.SpvImageOperandsOffsetShift;
pub const SpvImageOperandsConstOffsetsShift = enum_SpvImageOperandsShift_.SpvImageOperandsConstOffsetsShift;
pub const SpvImageOperandsSampleShift = enum_SpvImageOperandsShift_.SpvImageOperandsSampleShift;
pub const SpvImageOperandsMinLodShift = enum_SpvImageOperandsShift_.SpvImageOperandsMinLodShift;
pub const SpvImageOperandsMakeTexelAvailableShift = enum_SpvImageOperandsShift_.SpvImageOperandsMakeTexelAvailableShift;
pub const SpvImageOperandsMakeTexelAvailableKHRShift = enum_SpvImageOperandsShift_.SpvImageOperandsMakeTexelAvailableKHRShift;
pub const SpvImageOperandsMakeTexelVisibleShift = enum_SpvImageOperandsShift_.SpvImageOperandsMakeTexelVisibleShift;
pub const SpvImageOperandsMakeTexelVisibleKHRShift = enum_SpvImageOperandsShift_.SpvImageOperandsMakeTexelVisibleKHRShift;
pub const SpvImageOperandsNonPrivateTexelShift = enum_SpvImageOperandsShift_.SpvImageOperandsNonPrivateTexelShift;
pub const SpvImageOperandsNonPrivateTexelKHRShift = enum_SpvImageOperandsShift_.SpvImageOperandsNonPrivateTexelKHRShift;
pub const SpvImageOperandsVolatileTexelShift = enum_SpvImageOperandsShift_.SpvImageOperandsVolatileTexelShift;
pub const SpvImageOperandsVolatileTexelKHRShift = enum_SpvImageOperandsShift_.SpvImageOperandsVolatileTexelKHRShift;
pub const SpvImageOperandsSignExtendShift = enum_SpvImageOperandsShift_.SpvImageOperandsSignExtendShift;
pub const SpvImageOperandsZeroExtendShift = enum_SpvImageOperandsShift_.SpvImageOperandsZeroExtendShift;
pub const SpvImageOperandsMax = enum_SpvImageOperandsShift_.SpvImageOperandsMax;
pub const enum_SpvImageOperandsShift_ = extern enum {
    SpvImageOperandsBiasShift = 0,
    SpvImageOperandsLodShift = 1,
    SpvImageOperandsGradShift = 2,
    SpvImageOperandsConstOffsetShift = 3,
    SpvImageOperandsOffsetShift = 4,
    SpvImageOperandsConstOffsetsShift = 5,
    SpvImageOperandsSampleShift = 6,
    SpvImageOperandsMinLodShift = 7,
    SpvImageOperandsMakeTexelAvailableShift = 8,
    SpvImageOperandsMakeTexelAvailableKHRShift = 8,
    SpvImageOperandsMakeTexelVisibleShift = 9,
    SpvImageOperandsMakeTexelVisibleKHRShift = 9,
    SpvImageOperandsNonPrivateTexelShift = 10,
    SpvImageOperandsNonPrivateTexelKHRShift = 10,
    SpvImageOperandsVolatileTexelShift = 11,
    SpvImageOperandsVolatileTexelKHRShift = 11,
    SpvImageOperandsSignExtendShift = 12,
    SpvImageOperandsZeroExtendShift = 13,
    SpvImageOperandsMax = 2147483647,
};
pub const SpvImageOperandsShift = enum_SpvImageOperandsShift_;
pub const SpvImageOperandsMaskNone = enum_SpvImageOperandsMask_.SpvImageOperandsMaskNone;
pub const SpvImageOperandsBiasMask = enum_SpvImageOperandsMask_.SpvImageOperandsBiasMask;
pub const SpvImageOperandsLodMask = enum_SpvImageOperandsMask_.SpvImageOperandsLodMask;
pub const SpvImageOperandsGradMask = enum_SpvImageOperandsMask_.SpvImageOperandsGradMask;
pub const SpvImageOperandsConstOffsetMask = enum_SpvImageOperandsMask_.SpvImageOperandsConstOffsetMask;
pub const SpvImageOperandsOffsetMask = enum_SpvImageOperandsMask_.SpvImageOperandsOffsetMask;
pub const SpvImageOperandsConstOffsetsMask = enum_SpvImageOperandsMask_.SpvImageOperandsConstOffsetsMask;
pub const SpvImageOperandsSampleMask = enum_SpvImageOperandsMask_.SpvImageOperandsSampleMask;
pub const SpvImageOperandsMinLodMask = enum_SpvImageOperandsMask_.SpvImageOperandsMinLodMask;
pub const SpvImageOperandsMakeTexelAvailableMask = enum_SpvImageOperandsMask_.SpvImageOperandsMakeTexelAvailableMask;
pub const SpvImageOperandsMakeTexelAvailableKHRMask = enum_SpvImageOperandsMask_.SpvImageOperandsMakeTexelAvailableKHRMask;
pub const SpvImageOperandsMakeTexelVisibleMask = enum_SpvImageOperandsMask_.SpvImageOperandsMakeTexelVisibleMask;
pub const SpvImageOperandsMakeTexelVisibleKHRMask = enum_SpvImageOperandsMask_.SpvImageOperandsMakeTexelVisibleKHRMask;
pub const SpvImageOperandsNonPrivateTexelMask = enum_SpvImageOperandsMask_.SpvImageOperandsNonPrivateTexelMask;
pub const SpvImageOperandsNonPrivateTexelKHRMask = enum_SpvImageOperandsMask_.SpvImageOperandsNonPrivateTexelKHRMask;
pub const SpvImageOperandsVolatileTexelMask = enum_SpvImageOperandsMask_.SpvImageOperandsVolatileTexelMask;
pub const SpvImageOperandsVolatileTexelKHRMask = enum_SpvImageOperandsMask_.SpvImageOperandsVolatileTexelKHRMask;
pub const SpvImageOperandsSignExtendMask = enum_SpvImageOperandsMask_.SpvImageOperandsSignExtendMask;
pub const SpvImageOperandsZeroExtendMask = enum_SpvImageOperandsMask_.SpvImageOperandsZeroExtendMask;
pub const enum_SpvImageOperandsMask_ = extern enum {
    SpvImageOperandsMaskNone = 0,
    SpvImageOperandsBiasMask = 1,
    SpvImageOperandsLodMask = 2,
    SpvImageOperandsGradMask = 4,
    SpvImageOperandsConstOffsetMask = 8,
    SpvImageOperandsOffsetMask = 16,
    SpvImageOperandsConstOffsetsMask = 32,
    SpvImageOperandsSampleMask = 64,
    SpvImageOperandsMinLodMask = 128,
    SpvImageOperandsMakeTexelAvailableMask = 256,
    SpvImageOperandsMakeTexelAvailableKHRMask = 256,
    SpvImageOperandsMakeTexelVisibleMask = 512,
    SpvImageOperandsMakeTexelVisibleKHRMask = 512,
    SpvImageOperandsNonPrivateTexelMask = 1024,
    SpvImageOperandsNonPrivateTexelKHRMask = 1024,
    SpvImageOperandsVolatileTexelMask = 2048,
    SpvImageOperandsVolatileTexelKHRMask = 2048,
    SpvImageOperandsSignExtendMask = 4096,
    SpvImageOperandsZeroExtendMask = 8192,
};
pub const SpvImageOperandsMask = enum_SpvImageOperandsMask_;
pub const SpvFPFastMathModeNotNaNShift = enum_SpvFPFastMathModeShift_.SpvFPFastMathModeNotNaNShift;
pub const SpvFPFastMathModeNotInfShift = enum_SpvFPFastMathModeShift_.SpvFPFastMathModeNotInfShift;
pub const SpvFPFastMathModeNSZShift = enum_SpvFPFastMathModeShift_.SpvFPFastMathModeNSZShift;
pub const SpvFPFastMathModeAllowRecipShift = enum_SpvFPFastMathModeShift_.SpvFPFastMathModeAllowRecipShift;
pub const SpvFPFastMathModeFastShift = enum_SpvFPFastMathModeShift_.SpvFPFastMathModeFastShift;
pub const SpvFPFastMathModeMax = enum_SpvFPFastMathModeShift_.SpvFPFastMathModeMax;
pub const enum_SpvFPFastMathModeShift_ = extern enum {
    SpvFPFastMathModeNotNaNShift = 0,
    SpvFPFastMathModeNotInfShift = 1,
    SpvFPFastMathModeNSZShift = 2,
    SpvFPFastMathModeAllowRecipShift = 3,
    SpvFPFastMathModeFastShift = 4,
    SpvFPFastMathModeMax = 2147483647,
};
pub const SpvFPFastMathModeShift = enum_SpvFPFastMathModeShift_;
pub const SpvFPFastMathModeMaskNone = enum_SpvFPFastMathModeMask_.SpvFPFastMathModeMaskNone;
pub const SpvFPFastMathModeNotNaNMask = enum_SpvFPFastMathModeMask_.SpvFPFastMathModeNotNaNMask;
pub const SpvFPFastMathModeNotInfMask = enum_SpvFPFastMathModeMask_.SpvFPFastMathModeNotInfMask;
pub const SpvFPFastMathModeNSZMask = enum_SpvFPFastMathModeMask_.SpvFPFastMathModeNSZMask;
pub const SpvFPFastMathModeAllowRecipMask = enum_SpvFPFastMathModeMask_.SpvFPFastMathModeAllowRecipMask;
pub const SpvFPFastMathModeFastMask = enum_SpvFPFastMathModeMask_.SpvFPFastMathModeFastMask;
pub const enum_SpvFPFastMathModeMask_ = extern enum {
    SpvFPFastMathModeMaskNone = 0,
    SpvFPFastMathModeNotNaNMask = 1,
    SpvFPFastMathModeNotInfMask = 2,
    SpvFPFastMathModeNSZMask = 4,
    SpvFPFastMathModeAllowRecipMask = 8,
    SpvFPFastMathModeFastMask = 16,
};
pub const SpvFPFastMathModeMask = enum_SpvFPFastMathModeMask_;
pub const SpvFPRoundingModeRTE = enum_SpvFPRoundingMode_.SpvFPRoundingModeRTE;
pub const SpvFPRoundingModeRTZ = enum_SpvFPRoundingMode_.SpvFPRoundingModeRTZ;
pub const SpvFPRoundingModeRTP = enum_SpvFPRoundingMode_.SpvFPRoundingModeRTP;
pub const SpvFPRoundingModeRTN = enum_SpvFPRoundingMode_.SpvFPRoundingModeRTN;
pub const SpvFPRoundingModeMax = enum_SpvFPRoundingMode_.SpvFPRoundingModeMax;
pub const enum_SpvFPRoundingMode_ = extern enum {
    SpvFPRoundingModeRTE = 0,
    SpvFPRoundingModeRTZ = 1,
    SpvFPRoundingModeRTP = 2,
    SpvFPRoundingModeRTN = 3,
    SpvFPRoundingModeMax = 2147483647,
};
pub const SpvFPRoundingMode = enum_SpvFPRoundingMode_;
pub const SpvLinkageTypeExport = enum_SpvLinkageType_.SpvLinkageTypeExport;
pub const SpvLinkageTypeImport = enum_SpvLinkageType_.SpvLinkageTypeImport;
pub const SpvLinkageTypeMax = enum_SpvLinkageType_.SpvLinkageTypeMax;
pub const enum_SpvLinkageType_ = extern enum {
    SpvLinkageTypeExport = 0,
    SpvLinkageTypeImport = 1,
    SpvLinkageTypeMax = 2147483647,
};
pub const SpvLinkageType = enum_SpvLinkageType_;
pub const SpvAccessQualifierReadOnly = enum_SpvAccessQualifier_.SpvAccessQualifierReadOnly;
pub const SpvAccessQualifierWriteOnly = enum_SpvAccessQualifier_.SpvAccessQualifierWriteOnly;
pub const SpvAccessQualifierReadWrite = enum_SpvAccessQualifier_.SpvAccessQualifierReadWrite;
pub const SpvAccessQualifierMax = enum_SpvAccessQualifier_.SpvAccessQualifierMax;
pub const enum_SpvAccessQualifier_ = extern enum {
    SpvAccessQualifierReadOnly = 0,
    SpvAccessQualifierWriteOnly = 1,
    SpvAccessQualifierReadWrite = 2,
    SpvAccessQualifierMax = 2147483647,
};
pub const SpvAccessQualifier = enum_SpvAccessQualifier_;
pub const SpvFunctionParameterAttributeZext = enum_SpvFunctionParameterAttribute_.SpvFunctionParameterAttributeZext;
pub const SpvFunctionParameterAttributeSext = enum_SpvFunctionParameterAttribute_.SpvFunctionParameterAttributeSext;
pub const SpvFunctionParameterAttributeByVal = enum_SpvFunctionParameterAttribute_.SpvFunctionParameterAttributeByVal;
pub const SpvFunctionParameterAttributeSret = enum_SpvFunctionParameterAttribute_.SpvFunctionParameterAttributeSret;
pub const SpvFunctionParameterAttributeNoAlias = enum_SpvFunctionParameterAttribute_.SpvFunctionParameterAttributeNoAlias;
pub const SpvFunctionParameterAttributeNoCapture = enum_SpvFunctionParameterAttribute_.SpvFunctionParameterAttributeNoCapture;
pub const SpvFunctionParameterAttributeNoWrite = enum_SpvFunctionParameterAttribute_.SpvFunctionParameterAttributeNoWrite;
pub const SpvFunctionParameterAttributeNoReadWrite = enum_SpvFunctionParameterAttribute_.SpvFunctionParameterAttributeNoReadWrite;
pub const SpvFunctionParameterAttributeMax = enum_SpvFunctionParameterAttribute_.SpvFunctionParameterAttributeMax;
pub const enum_SpvFunctionParameterAttribute_ = extern enum {
    SpvFunctionParameterAttributeZext = 0,
    SpvFunctionParameterAttributeSext = 1,
    SpvFunctionParameterAttributeByVal = 2,
    SpvFunctionParameterAttributeSret = 3,
    SpvFunctionParameterAttributeNoAlias = 4,
    SpvFunctionParameterAttributeNoCapture = 5,
    SpvFunctionParameterAttributeNoWrite = 6,
    SpvFunctionParameterAttributeNoReadWrite = 7,
    SpvFunctionParameterAttributeMax = 2147483647,
};
pub const SpvFunctionParameterAttribute = enum_SpvFunctionParameterAttribute_;
pub const SpvDecorationRelaxedPrecision = enum_SpvDecoration_.SpvDecorationRelaxedPrecision;
pub const SpvDecorationSpecId = enum_SpvDecoration_.SpvDecorationSpecId;
pub const SpvDecorationBlock = enum_SpvDecoration_.SpvDecorationBlock;
pub const SpvDecorationBufferBlock = enum_SpvDecoration_.SpvDecorationBufferBlock;
pub const SpvDecorationRowMajor = enum_SpvDecoration_.SpvDecorationRowMajor;
pub const SpvDecorationColMajor = enum_SpvDecoration_.SpvDecorationColMajor;
pub const SpvDecorationArrayStride = enum_SpvDecoration_.SpvDecorationArrayStride;
pub const SpvDecorationMatrixStride = enum_SpvDecoration_.SpvDecorationMatrixStride;
pub const SpvDecorationGLSLShared = enum_SpvDecoration_.SpvDecorationGLSLShared;
pub const SpvDecorationGLSLPacked = enum_SpvDecoration_.SpvDecorationGLSLPacked;
pub const SpvDecorationCPacked = enum_SpvDecoration_.SpvDecorationCPacked;
pub const SpvDecorationBuiltIn = enum_SpvDecoration_.SpvDecorationBuiltIn;
pub const SpvDecorationNoPerspective = enum_SpvDecoration_.SpvDecorationNoPerspective;
pub const SpvDecorationFlat = enum_SpvDecoration_.SpvDecorationFlat;
pub const SpvDecorationPatch = enum_SpvDecoration_.SpvDecorationPatch;
pub const SpvDecorationCentroid = enum_SpvDecoration_.SpvDecorationCentroid;
pub const SpvDecorationSample = enum_SpvDecoration_.SpvDecorationSample;
pub const SpvDecorationInvariant = enum_SpvDecoration_.SpvDecorationInvariant;
pub const SpvDecorationRestrict = enum_SpvDecoration_.SpvDecorationRestrict;
pub const SpvDecorationAliased = enum_SpvDecoration_.SpvDecorationAliased;
pub const SpvDecorationVolatile = enum_SpvDecoration_.SpvDecorationVolatile;
pub const SpvDecorationConstant = enum_SpvDecoration_.SpvDecorationConstant;
pub const SpvDecorationCoherent = enum_SpvDecoration_.SpvDecorationCoherent;
pub const SpvDecorationNonWritable = enum_SpvDecoration_.SpvDecorationNonWritable;
pub const SpvDecorationNonReadable = enum_SpvDecoration_.SpvDecorationNonReadable;
pub const SpvDecorationUniform = enum_SpvDecoration_.SpvDecorationUniform;
pub const SpvDecorationUniformId = enum_SpvDecoration_.SpvDecorationUniformId;
pub const SpvDecorationSaturatedConversion = enum_SpvDecoration_.SpvDecorationSaturatedConversion;
pub const SpvDecorationStream = enum_SpvDecoration_.SpvDecorationStream;
pub const SpvDecorationLocation = enum_SpvDecoration_.SpvDecorationLocation;
pub const SpvDecorationComponent = enum_SpvDecoration_.SpvDecorationComponent;
pub const SpvDecorationIndex = enum_SpvDecoration_.SpvDecorationIndex;
pub const SpvDecorationBinding = enum_SpvDecoration_.SpvDecorationBinding;
pub const SpvDecorationDescriptorSet = enum_SpvDecoration_.SpvDecorationDescriptorSet;
pub const SpvDecorationOffset = enum_SpvDecoration_.SpvDecorationOffset;
pub const SpvDecorationXfbBuffer = enum_SpvDecoration_.SpvDecorationXfbBuffer;
pub const SpvDecorationXfbStride = enum_SpvDecoration_.SpvDecorationXfbStride;
pub const SpvDecorationFuncParamAttr = enum_SpvDecoration_.SpvDecorationFuncParamAttr;
pub const SpvDecorationFPRoundingMode = enum_SpvDecoration_.SpvDecorationFPRoundingMode;
pub const SpvDecorationFPFastMathMode = enum_SpvDecoration_.SpvDecorationFPFastMathMode;
pub const SpvDecorationLinkageAttributes = enum_SpvDecoration_.SpvDecorationLinkageAttributes;
pub const SpvDecorationNoContraction = enum_SpvDecoration_.SpvDecorationNoContraction;
pub const SpvDecorationInputAttachmentIndex = enum_SpvDecoration_.SpvDecorationInputAttachmentIndex;
pub const SpvDecorationAlignment = enum_SpvDecoration_.SpvDecorationAlignment;
pub const SpvDecorationMaxByteOffset = enum_SpvDecoration_.SpvDecorationMaxByteOffset;
pub const SpvDecorationAlignmentId = enum_SpvDecoration_.SpvDecorationAlignmentId;
pub const SpvDecorationMaxByteOffsetId = enum_SpvDecoration_.SpvDecorationMaxByteOffsetId;
pub const SpvDecorationNoSignedWrap = enum_SpvDecoration_.SpvDecorationNoSignedWrap;
pub const SpvDecorationNoUnsignedWrap = enum_SpvDecoration_.SpvDecorationNoUnsignedWrap;
pub const SpvDecorationExplicitInterpAMD = enum_SpvDecoration_.SpvDecorationExplicitInterpAMD;
pub const SpvDecorationOverrideCoverageNV = enum_SpvDecoration_.SpvDecorationOverrideCoverageNV;
pub const SpvDecorationPassthroughNV = enum_SpvDecoration_.SpvDecorationPassthroughNV;
pub const SpvDecorationViewportRelativeNV = enum_SpvDecoration_.SpvDecorationViewportRelativeNV;
pub const SpvDecorationSecondaryViewportRelativeNV = enum_SpvDecoration_.SpvDecorationSecondaryViewportRelativeNV;
pub const SpvDecorationPerPrimitiveNV = enum_SpvDecoration_.SpvDecorationPerPrimitiveNV;
pub const SpvDecorationPerViewNV = enum_SpvDecoration_.SpvDecorationPerViewNV;
pub const SpvDecorationPerTaskNV = enum_SpvDecoration_.SpvDecorationPerTaskNV;
pub const SpvDecorationPerVertexNV = enum_SpvDecoration_.SpvDecorationPerVertexNV;
pub const SpvDecorationNonUniform = enum_SpvDecoration_.SpvDecorationNonUniform;
pub const SpvDecorationNonUniformEXT = enum_SpvDecoration_.SpvDecorationNonUniformEXT;
pub const SpvDecorationRestrictPointer = enum_SpvDecoration_.SpvDecorationRestrictPointer;
pub const SpvDecorationRestrictPointerEXT = enum_SpvDecoration_.SpvDecorationRestrictPointerEXT;
pub const SpvDecorationAliasedPointer = enum_SpvDecoration_.SpvDecorationAliasedPointer;
pub const SpvDecorationAliasedPointerEXT = enum_SpvDecoration_.SpvDecorationAliasedPointerEXT;
pub const SpvDecorationCounterBuffer = enum_SpvDecoration_.SpvDecorationCounterBuffer;
pub const SpvDecorationHlslCounterBufferGOOGLE = enum_SpvDecoration_.SpvDecorationHlslCounterBufferGOOGLE;
pub const SpvDecorationHlslSemanticGOOGLE = enum_SpvDecoration_.SpvDecorationHlslSemanticGOOGLE;
pub const SpvDecorationUserSemantic = enum_SpvDecoration_.SpvDecorationUserSemantic;
pub const SpvDecorationUserTypeGOOGLE = enum_SpvDecoration_.SpvDecorationUserTypeGOOGLE;
pub const SpvDecorationMax = enum_SpvDecoration_.SpvDecorationMax;
pub const enum_SpvDecoration_ = extern enum {
    SpvDecorationRelaxedPrecision = 0,
    SpvDecorationSpecId = 1,
    SpvDecorationBlock = 2,
    SpvDecorationBufferBlock = 3,
    SpvDecorationRowMajor = 4,
    SpvDecorationColMajor = 5,
    SpvDecorationArrayStride = 6,
    SpvDecorationMatrixStride = 7,
    SpvDecorationGLSLShared = 8,
    SpvDecorationGLSLPacked = 9,
    SpvDecorationCPacked = 10,
    SpvDecorationBuiltIn = 11,
    SpvDecorationNoPerspective = 13,
    SpvDecorationFlat = 14,
    SpvDecorationPatch = 15,
    SpvDecorationCentroid = 16,
    SpvDecorationSample = 17,
    SpvDecorationInvariant = 18,
    SpvDecorationRestrict = 19,
    SpvDecorationAliased = 20,
    SpvDecorationVolatile = 21,
    SpvDecorationConstant = 22,
    SpvDecorationCoherent = 23,
    SpvDecorationNonWritable = 24,
    SpvDecorationNonReadable = 25,
    SpvDecorationUniform = 26,
    SpvDecorationUniformId = 27,
    SpvDecorationSaturatedConversion = 28,
    SpvDecorationStream = 29,
    SpvDecorationLocation = 30,
    SpvDecorationComponent = 31,
    SpvDecorationIndex = 32,
    SpvDecorationBinding = 33,
    SpvDecorationDescriptorSet = 34,
    SpvDecorationOffset = 35,
    SpvDecorationXfbBuffer = 36,
    SpvDecorationXfbStride = 37,
    SpvDecorationFuncParamAttr = 38,
    SpvDecorationFPRoundingMode = 39,
    SpvDecorationFPFastMathMode = 40,
    SpvDecorationLinkageAttributes = 41,
    SpvDecorationNoContraction = 42,
    SpvDecorationInputAttachmentIndex = 43,
    SpvDecorationAlignment = 44,
    SpvDecorationMaxByteOffset = 45,
    SpvDecorationAlignmentId = 46,
    SpvDecorationMaxByteOffsetId = 47,
    SpvDecorationNoSignedWrap = 4469,
    SpvDecorationNoUnsignedWrap = 4470,
    SpvDecorationExplicitInterpAMD = 4999,
    SpvDecorationOverrideCoverageNV = 5248,
    SpvDecorationPassthroughNV = 5250,
    SpvDecorationViewportRelativeNV = 5252,
    SpvDecorationSecondaryViewportRelativeNV = 5256,
    SpvDecorationPerPrimitiveNV = 5271,
    SpvDecorationPerViewNV = 5272,
    SpvDecorationPerTaskNV = 5273,
    SpvDecorationPerVertexNV = 5285,
    SpvDecorationNonUniform = 5300,
    SpvDecorationNonUniformEXT = 5300,
    SpvDecorationRestrictPointer = 5355,
    SpvDecorationRestrictPointerEXT = 5355,
    SpvDecorationAliasedPointer = 5356,
    SpvDecorationAliasedPointerEXT = 5356,
    SpvDecorationCounterBuffer = 5634,
    SpvDecorationHlslCounterBufferGOOGLE = 5634,
    SpvDecorationHlslSemanticGOOGLE = 5635,
    SpvDecorationUserSemantic = 5635,
    SpvDecorationUserTypeGOOGLE = 5636,
    SpvDecorationMax = 2147483647,
};
pub const SpvDecoration = enum_SpvDecoration_;
pub const SpvBuiltInPosition = enum_SpvBuiltIn_.SpvBuiltInPosition;
pub const SpvBuiltInPointSize = enum_SpvBuiltIn_.SpvBuiltInPointSize;
pub const SpvBuiltInClipDistance = enum_SpvBuiltIn_.SpvBuiltInClipDistance;
pub const SpvBuiltInCullDistance = enum_SpvBuiltIn_.SpvBuiltInCullDistance;
pub const SpvBuiltInVertexId = enum_SpvBuiltIn_.SpvBuiltInVertexId;
pub const SpvBuiltInInstanceId = enum_SpvBuiltIn_.SpvBuiltInInstanceId;
pub const SpvBuiltInPrimitiveId = enum_SpvBuiltIn_.SpvBuiltInPrimitiveId;
pub const SpvBuiltInInvocationId = enum_SpvBuiltIn_.SpvBuiltInInvocationId;
pub const SpvBuiltInLayer = enum_SpvBuiltIn_.SpvBuiltInLayer;
pub const SpvBuiltInViewportIndex = enum_SpvBuiltIn_.SpvBuiltInViewportIndex;
pub const SpvBuiltInTessLevelOuter = enum_SpvBuiltIn_.SpvBuiltInTessLevelOuter;
pub const SpvBuiltInTessLevelInner = enum_SpvBuiltIn_.SpvBuiltInTessLevelInner;
pub const SpvBuiltInTessCoord = enum_SpvBuiltIn_.SpvBuiltInTessCoord;
pub const SpvBuiltInPatchVertices = enum_SpvBuiltIn_.SpvBuiltInPatchVertices;
pub const SpvBuiltInFragCoord = enum_SpvBuiltIn_.SpvBuiltInFragCoord;
pub const SpvBuiltInPointCoord = enum_SpvBuiltIn_.SpvBuiltInPointCoord;
pub const SpvBuiltInFrontFacing = enum_SpvBuiltIn_.SpvBuiltInFrontFacing;
pub const SpvBuiltInSampleId = enum_SpvBuiltIn_.SpvBuiltInSampleId;
pub const SpvBuiltInSamplePosition = enum_SpvBuiltIn_.SpvBuiltInSamplePosition;
pub const SpvBuiltInSampleMask = enum_SpvBuiltIn_.SpvBuiltInSampleMask;
pub const SpvBuiltInFragDepth = enum_SpvBuiltIn_.SpvBuiltInFragDepth;
pub const SpvBuiltInHelperInvocation = enum_SpvBuiltIn_.SpvBuiltInHelperInvocation;
pub const SpvBuiltInNumWorkgroups = enum_SpvBuiltIn_.SpvBuiltInNumWorkgroups;
pub const SpvBuiltInWorkgroupSize = enum_SpvBuiltIn_.SpvBuiltInWorkgroupSize;
pub const SpvBuiltInWorkgroupId = enum_SpvBuiltIn_.SpvBuiltInWorkgroupId;
pub const SpvBuiltInLocalInvocationId = enum_SpvBuiltIn_.SpvBuiltInLocalInvocationId;
pub const SpvBuiltInGlobalInvocationId = enum_SpvBuiltIn_.SpvBuiltInGlobalInvocationId;
pub const SpvBuiltInLocalInvocationIndex = enum_SpvBuiltIn_.SpvBuiltInLocalInvocationIndex;
pub const SpvBuiltInWorkDim = enum_SpvBuiltIn_.SpvBuiltInWorkDim;
pub const SpvBuiltInGlobalSize = enum_SpvBuiltIn_.SpvBuiltInGlobalSize;
pub const SpvBuiltInEnqueuedWorkgroupSize = enum_SpvBuiltIn_.SpvBuiltInEnqueuedWorkgroupSize;
pub const SpvBuiltInGlobalOffset = enum_SpvBuiltIn_.SpvBuiltInGlobalOffset;
pub const SpvBuiltInGlobalLinearId = enum_SpvBuiltIn_.SpvBuiltInGlobalLinearId;
pub const SpvBuiltInSubgroupSize = enum_SpvBuiltIn_.SpvBuiltInSubgroupSize;
pub const SpvBuiltInSubgroupMaxSize = enum_SpvBuiltIn_.SpvBuiltInSubgroupMaxSize;
pub const SpvBuiltInNumSubgroups = enum_SpvBuiltIn_.SpvBuiltInNumSubgroups;
pub const SpvBuiltInNumEnqueuedSubgroups = enum_SpvBuiltIn_.SpvBuiltInNumEnqueuedSubgroups;
pub const SpvBuiltInSubgroupId = enum_SpvBuiltIn_.SpvBuiltInSubgroupId;
pub const SpvBuiltInSubgroupLocalInvocationId = enum_SpvBuiltIn_.SpvBuiltInSubgroupLocalInvocationId;
pub const SpvBuiltInVertexIndex = enum_SpvBuiltIn_.SpvBuiltInVertexIndex;
pub const SpvBuiltInInstanceIndex = enum_SpvBuiltIn_.SpvBuiltInInstanceIndex;
pub const SpvBuiltInSubgroupEqMask = enum_SpvBuiltIn_.SpvBuiltInSubgroupEqMask;
pub const SpvBuiltInSubgroupEqMaskKHR = enum_SpvBuiltIn_.SpvBuiltInSubgroupEqMaskKHR;
pub const SpvBuiltInSubgroupGeMask = enum_SpvBuiltIn_.SpvBuiltInSubgroupGeMask;
pub const SpvBuiltInSubgroupGeMaskKHR = enum_SpvBuiltIn_.SpvBuiltInSubgroupGeMaskKHR;
pub const SpvBuiltInSubgroupGtMask = enum_SpvBuiltIn_.SpvBuiltInSubgroupGtMask;
pub const SpvBuiltInSubgroupGtMaskKHR = enum_SpvBuiltIn_.SpvBuiltInSubgroupGtMaskKHR;
pub const SpvBuiltInSubgroupLeMask = enum_SpvBuiltIn_.SpvBuiltInSubgroupLeMask;
pub const SpvBuiltInSubgroupLeMaskKHR = enum_SpvBuiltIn_.SpvBuiltInSubgroupLeMaskKHR;
pub const SpvBuiltInSubgroupLtMask = enum_SpvBuiltIn_.SpvBuiltInSubgroupLtMask;
pub const SpvBuiltInSubgroupLtMaskKHR = enum_SpvBuiltIn_.SpvBuiltInSubgroupLtMaskKHR;
pub const SpvBuiltInBaseVertex = enum_SpvBuiltIn_.SpvBuiltInBaseVertex;
pub const SpvBuiltInBaseInstance = enum_SpvBuiltIn_.SpvBuiltInBaseInstance;
pub const SpvBuiltInDrawIndex = enum_SpvBuiltIn_.SpvBuiltInDrawIndex;
pub const SpvBuiltInDeviceIndex = enum_SpvBuiltIn_.SpvBuiltInDeviceIndex;
pub const SpvBuiltInViewIndex = enum_SpvBuiltIn_.SpvBuiltInViewIndex;
pub const SpvBuiltInBaryCoordNoPerspAMD = enum_SpvBuiltIn_.SpvBuiltInBaryCoordNoPerspAMD;
pub const SpvBuiltInBaryCoordNoPerspCentroidAMD = enum_SpvBuiltIn_.SpvBuiltInBaryCoordNoPerspCentroidAMD;
pub const SpvBuiltInBaryCoordNoPerspSampleAMD = enum_SpvBuiltIn_.SpvBuiltInBaryCoordNoPerspSampleAMD;
pub const SpvBuiltInBaryCoordSmoothAMD = enum_SpvBuiltIn_.SpvBuiltInBaryCoordSmoothAMD;
pub const SpvBuiltInBaryCoordSmoothCentroidAMD = enum_SpvBuiltIn_.SpvBuiltInBaryCoordSmoothCentroidAMD;
pub const SpvBuiltInBaryCoordSmoothSampleAMD = enum_SpvBuiltIn_.SpvBuiltInBaryCoordSmoothSampleAMD;
pub const SpvBuiltInBaryCoordPullModelAMD = enum_SpvBuiltIn_.SpvBuiltInBaryCoordPullModelAMD;
pub const SpvBuiltInFragStencilRefEXT = enum_SpvBuiltIn_.SpvBuiltInFragStencilRefEXT;
pub const SpvBuiltInViewportMaskNV = enum_SpvBuiltIn_.SpvBuiltInViewportMaskNV;
pub const SpvBuiltInSecondaryPositionNV = enum_SpvBuiltIn_.SpvBuiltInSecondaryPositionNV;
pub const SpvBuiltInSecondaryViewportMaskNV = enum_SpvBuiltIn_.SpvBuiltInSecondaryViewportMaskNV;
pub const SpvBuiltInPositionPerViewNV = enum_SpvBuiltIn_.SpvBuiltInPositionPerViewNV;
pub const SpvBuiltInViewportMaskPerViewNV = enum_SpvBuiltIn_.SpvBuiltInViewportMaskPerViewNV;
pub const SpvBuiltInFullyCoveredEXT = enum_SpvBuiltIn_.SpvBuiltInFullyCoveredEXT;
pub const SpvBuiltInTaskCountNV = enum_SpvBuiltIn_.SpvBuiltInTaskCountNV;
pub const SpvBuiltInPrimitiveCountNV = enum_SpvBuiltIn_.SpvBuiltInPrimitiveCountNV;
pub const SpvBuiltInPrimitiveIndicesNV = enum_SpvBuiltIn_.SpvBuiltInPrimitiveIndicesNV;
pub const SpvBuiltInClipDistancePerViewNV = enum_SpvBuiltIn_.SpvBuiltInClipDistancePerViewNV;
pub const SpvBuiltInCullDistancePerViewNV = enum_SpvBuiltIn_.SpvBuiltInCullDistancePerViewNV;
pub const SpvBuiltInLayerPerViewNV = enum_SpvBuiltIn_.SpvBuiltInLayerPerViewNV;
pub const SpvBuiltInMeshViewCountNV = enum_SpvBuiltIn_.SpvBuiltInMeshViewCountNV;
pub const SpvBuiltInMeshViewIndicesNV = enum_SpvBuiltIn_.SpvBuiltInMeshViewIndicesNV;
pub const SpvBuiltInBaryCoordNV = enum_SpvBuiltIn_.SpvBuiltInBaryCoordNV;
pub const SpvBuiltInBaryCoordNoPerspNV = enum_SpvBuiltIn_.SpvBuiltInBaryCoordNoPerspNV;
pub const SpvBuiltInFragSizeEXT = enum_SpvBuiltIn_.SpvBuiltInFragSizeEXT;
pub const SpvBuiltInFragmentSizeNV = enum_SpvBuiltIn_.SpvBuiltInFragmentSizeNV;
pub const SpvBuiltInFragInvocationCountEXT = enum_SpvBuiltIn_.SpvBuiltInFragInvocationCountEXT;
pub const SpvBuiltInInvocationsPerPixelNV = enum_SpvBuiltIn_.SpvBuiltInInvocationsPerPixelNV;
pub const SpvBuiltInLaunchIdNV = enum_SpvBuiltIn_.SpvBuiltInLaunchIdNV;
pub const SpvBuiltInLaunchSizeNV = enum_SpvBuiltIn_.SpvBuiltInLaunchSizeNV;
pub const SpvBuiltInWorldRayOriginNV = enum_SpvBuiltIn_.SpvBuiltInWorldRayOriginNV;
pub const SpvBuiltInWorldRayDirectionNV = enum_SpvBuiltIn_.SpvBuiltInWorldRayDirectionNV;
pub const SpvBuiltInObjectRayOriginNV = enum_SpvBuiltIn_.SpvBuiltInObjectRayOriginNV;
pub const SpvBuiltInObjectRayDirectionNV = enum_SpvBuiltIn_.SpvBuiltInObjectRayDirectionNV;
pub const SpvBuiltInRayTminNV = enum_SpvBuiltIn_.SpvBuiltInRayTminNV;
pub const SpvBuiltInRayTmaxNV = enum_SpvBuiltIn_.SpvBuiltInRayTmaxNV;
pub const SpvBuiltInInstanceCustomIndexNV = enum_SpvBuiltIn_.SpvBuiltInInstanceCustomIndexNV;
pub const SpvBuiltInObjectToWorldNV = enum_SpvBuiltIn_.SpvBuiltInObjectToWorldNV;
pub const SpvBuiltInWorldToObjectNV = enum_SpvBuiltIn_.SpvBuiltInWorldToObjectNV;
pub const SpvBuiltInHitTNV = enum_SpvBuiltIn_.SpvBuiltInHitTNV;
pub const SpvBuiltInHitKindNV = enum_SpvBuiltIn_.SpvBuiltInHitKindNV;
pub const SpvBuiltInIncomingRayFlagsNV = enum_SpvBuiltIn_.SpvBuiltInIncomingRayFlagsNV;
pub const SpvBuiltInWarpsPerSMNV = enum_SpvBuiltIn_.SpvBuiltInWarpsPerSMNV;
pub const SpvBuiltInSMCountNV = enum_SpvBuiltIn_.SpvBuiltInSMCountNV;
pub const SpvBuiltInWarpIDNV = enum_SpvBuiltIn_.SpvBuiltInWarpIDNV;
pub const SpvBuiltInSMIDNV = enum_SpvBuiltIn_.SpvBuiltInSMIDNV;
pub const SpvBuiltInMax = enum_SpvBuiltIn_.SpvBuiltInMax;
pub const enum_SpvBuiltIn_ = extern enum {
    SpvBuiltInPosition = 0,
    SpvBuiltInPointSize = 1,
    SpvBuiltInClipDistance = 3,
    SpvBuiltInCullDistance = 4,
    SpvBuiltInVertexId = 5,
    SpvBuiltInInstanceId = 6,
    SpvBuiltInPrimitiveId = 7,
    SpvBuiltInInvocationId = 8,
    SpvBuiltInLayer = 9,
    SpvBuiltInViewportIndex = 10,
    SpvBuiltInTessLevelOuter = 11,
    SpvBuiltInTessLevelInner = 12,
    SpvBuiltInTessCoord = 13,
    SpvBuiltInPatchVertices = 14,
    SpvBuiltInFragCoord = 15,
    SpvBuiltInPointCoord = 16,
    SpvBuiltInFrontFacing = 17,
    SpvBuiltInSampleId = 18,
    SpvBuiltInSamplePosition = 19,
    SpvBuiltInSampleMask = 20,
    SpvBuiltInFragDepth = 22,
    SpvBuiltInHelperInvocation = 23,
    SpvBuiltInNumWorkgroups = 24,
    SpvBuiltInWorkgroupSize = 25,
    SpvBuiltInWorkgroupId = 26,
    SpvBuiltInLocalInvocationId = 27,
    SpvBuiltInGlobalInvocationId = 28,
    SpvBuiltInLocalInvocationIndex = 29,
    SpvBuiltInWorkDim = 30,
    SpvBuiltInGlobalSize = 31,
    SpvBuiltInEnqueuedWorkgroupSize = 32,
    SpvBuiltInGlobalOffset = 33,
    SpvBuiltInGlobalLinearId = 34,
    SpvBuiltInSubgroupSize = 36,
    SpvBuiltInSubgroupMaxSize = 37,
    SpvBuiltInNumSubgroups = 38,
    SpvBuiltInNumEnqueuedSubgroups = 39,
    SpvBuiltInSubgroupId = 40,
    SpvBuiltInSubgroupLocalInvocationId = 41,
    SpvBuiltInVertexIndex = 42,
    SpvBuiltInInstanceIndex = 43,
    SpvBuiltInSubgroupEqMask = 4416,
    SpvBuiltInSubgroupEqMaskKHR = 4416,
    SpvBuiltInSubgroupGeMask = 4417,
    SpvBuiltInSubgroupGeMaskKHR = 4417,
    SpvBuiltInSubgroupGtMask = 4418,
    SpvBuiltInSubgroupGtMaskKHR = 4418,
    SpvBuiltInSubgroupLeMask = 4419,
    SpvBuiltInSubgroupLeMaskKHR = 4419,
    SpvBuiltInSubgroupLtMask = 4420,
    SpvBuiltInSubgroupLtMaskKHR = 4420,
    SpvBuiltInBaseVertex = 4424,
    SpvBuiltInBaseInstance = 4425,
    SpvBuiltInDrawIndex = 4426,
    SpvBuiltInDeviceIndex = 4438,
    SpvBuiltInViewIndex = 4440,
    SpvBuiltInBaryCoordNoPerspAMD = 4992,
    SpvBuiltInBaryCoordNoPerspCentroidAMD = 4993,
    SpvBuiltInBaryCoordNoPerspSampleAMD = 4994,
    SpvBuiltInBaryCoordSmoothAMD = 4995,
    SpvBuiltInBaryCoordSmoothCentroidAMD = 4996,
    SpvBuiltInBaryCoordSmoothSampleAMD = 4997,
    SpvBuiltInBaryCoordPullModelAMD = 4998,
    SpvBuiltInFragStencilRefEXT = 5014,
    SpvBuiltInViewportMaskNV = 5253,
    SpvBuiltInSecondaryPositionNV = 5257,
    SpvBuiltInSecondaryViewportMaskNV = 5258,
    SpvBuiltInPositionPerViewNV = 5261,
    SpvBuiltInViewportMaskPerViewNV = 5262,
    SpvBuiltInFullyCoveredEXT = 5264,
    SpvBuiltInTaskCountNV = 5274,
    SpvBuiltInPrimitiveCountNV = 5275,
    SpvBuiltInPrimitiveIndicesNV = 5276,
    SpvBuiltInClipDistancePerViewNV = 5277,
    SpvBuiltInCullDistancePerViewNV = 5278,
    SpvBuiltInLayerPerViewNV = 5279,
    SpvBuiltInMeshViewCountNV = 5280,
    SpvBuiltInMeshViewIndicesNV = 5281,
    SpvBuiltInBaryCoordNV = 5286,
    SpvBuiltInBaryCoordNoPerspNV = 5287,
    SpvBuiltInFragSizeEXT = 5292,
    SpvBuiltInFragmentSizeNV = 5292,
    SpvBuiltInFragInvocationCountEXT = 5293,
    SpvBuiltInInvocationsPerPixelNV = 5293,
    SpvBuiltInLaunchIdNV = 5319,
    SpvBuiltInLaunchSizeNV = 5320,
    SpvBuiltInWorldRayOriginNV = 5321,
    SpvBuiltInWorldRayDirectionNV = 5322,
    SpvBuiltInObjectRayOriginNV = 5323,
    SpvBuiltInObjectRayDirectionNV = 5324,
    SpvBuiltInRayTminNV = 5325,
    SpvBuiltInRayTmaxNV = 5326,
    SpvBuiltInInstanceCustomIndexNV = 5327,
    SpvBuiltInObjectToWorldNV = 5330,
    SpvBuiltInWorldToObjectNV = 5331,
    SpvBuiltInHitTNV = 5332,
    SpvBuiltInHitKindNV = 5333,
    SpvBuiltInIncomingRayFlagsNV = 5351,
    SpvBuiltInWarpsPerSMNV = 5374,
    SpvBuiltInSMCountNV = 5375,
    SpvBuiltInWarpIDNV = 5376,
    SpvBuiltInSMIDNV = 5377,
    SpvBuiltInMax = 2147483647,
};
pub const SpvBuiltIn = enum_SpvBuiltIn_;
pub const SpvSelectionControlFlattenShift = enum_SpvSelectionControlShift_.SpvSelectionControlFlattenShift;
pub const SpvSelectionControlDontFlattenShift = enum_SpvSelectionControlShift_.SpvSelectionControlDontFlattenShift;
pub const SpvSelectionControlMax = enum_SpvSelectionControlShift_.SpvSelectionControlMax;
pub const enum_SpvSelectionControlShift_ = extern enum {
    SpvSelectionControlFlattenShift = 0,
    SpvSelectionControlDontFlattenShift = 1,
    SpvSelectionControlMax = 2147483647,
};
pub const SpvSelectionControlShift = enum_SpvSelectionControlShift_;
pub const SpvSelectionControlMaskNone = enum_SpvSelectionControlMask_.SpvSelectionControlMaskNone;
pub const SpvSelectionControlFlattenMask = enum_SpvSelectionControlMask_.SpvSelectionControlFlattenMask;
pub const SpvSelectionControlDontFlattenMask = enum_SpvSelectionControlMask_.SpvSelectionControlDontFlattenMask;
pub const enum_SpvSelectionControlMask_ = extern enum {
    SpvSelectionControlMaskNone = 0,
    SpvSelectionControlFlattenMask = 1,
    SpvSelectionControlDontFlattenMask = 2,
};
pub const SpvSelectionControlMask = enum_SpvSelectionControlMask_;
pub const SpvLoopControlUnrollShift = enum_SpvLoopControlShift_.SpvLoopControlUnrollShift;
pub const SpvLoopControlDontUnrollShift = enum_SpvLoopControlShift_.SpvLoopControlDontUnrollShift;
pub const SpvLoopControlDependencyInfiniteShift = enum_SpvLoopControlShift_.SpvLoopControlDependencyInfiniteShift;
pub const SpvLoopControlDependencyLengthShift = enum_SpvLoopControlShift_.SpvLoopControlDependencyLengthShift;
pub const SpvLoopControlMinIterationsShift = enum_SpvLoopControlShift_.SpvLoopControlMinIterationsShift;
pub const SpvLoopControlMaxIterationsShift = enum_SpvLoopControlShift_.SpvLoopControlMaxIterationsShift;
pub const SpvLoopControlIterationMultipleShift = enum_SpvLoopControlShift_.SpvLoopControlIterationMultipleShift;
pub const SpvLoopControlPeelCountShift = enum_SpvLoopControlShift_.SpvLoopControlPeelCountShift;
pub const SpvLoopControlPartialCountShift = enum_SpvLoopControlShift_.SpvLoopControlPartialCountShift;
pub const SpvLoopControlMax = enum_SpvLoopControlShift_.SpvLoopControlMax;
pub const enum_SpvLoopControlShift_ = extern enum {
    SpvLoopControlUnrollShift = 0,
    SpvLoopControlDontUnrollShift = 1,
    SpvLoopControlDependencyInfiniteShift = 2,
    SpvLoopControlDependencyLengthShift = 3,
    SpvLoopControlMinIterationsShift = 4,
    SpvLoopControlMaxIterationsShift = 5,
    SpvLoopControlIterationMultipleShift = 6,
    SpvLoopControlPeelCountShift = 7,
    SpvLoopControlPartialCountShift = 8,
    SpvLoopControlMax = 2147483647,
};
pub const SpvLoopControlShift = enum_SpvLoopControlShift_;
pub const SpvLoopControlMaskNone = enum_SpvLoopControlMask_.SpvLoopControlMaskNone;
pub const SpvLoopControlUnrollMask = enum_SpvLoopControlMask_.SpvLoopControlUnrollMask;
pub const SpvLoopControlDontUnrollMask = enum_SpvLoopControlMask_.SpvLoopControlDontUnrollMask;
pub const SpvLoopControlDependencyInfiniteMask = enum_SpvLoopControlMask_.SpvLoopControlDependencyInfiniteMask;
pub const SpvLoopControlDependencyLengthMask = enum_SpvLoopControlMask_.SpvLoopControlDependencyLengthMask;
pub const SpvLoopControlMinIterationsMask = enum_SpvLoopControlMask_.SpvLoopControlMinIterationsMask;
pub const SpvLoopControlMaxIterationsMask = enum_SpvLoopControlMask_.SpvLoopControlMaxIterationsMask;
pub const SpvLoopControlIterationMultipleMask = enum_SpvLoopControlMask_.SpvLoopControlIterationMultipleMask;
pub const SpvLoopControlPeelCountMask = enum_SpvLoopControlMask_.SpvLoopControlPeelCountMask;
pub const SpvLoopControlPartialCountMask = enum_SpvLoopControlMask_.SpvLoopControlPartialCountMask;
pub const enum_SpvLoopControlMask_ = extern enum {
    SpvLoopControlMaskNone = 0,
    SpvLoopControlUnrollMask = 1,
    SpvLoopControlDontUnrollMask = 2,
    SpvLoopControlDependencyInfiniteMask = 4,
    SpvLoopControlDependencyLengthMask = 8,
    SpvLoopControlMinIterationsMask = 16,
    SpvLoopControlMaxIterationsMask = 32,
    SpvLoopControlIterationMultipleMask = 64,
    SpvLoopControlPeelCountMask = 128,
    SpvLoopControlPartialCountMask = 256,
};
pub const SpvLoopControlMask = enum_SpvLoopControlMask_;
pub const SpvFunctionControlInlineShift = enum_SpvFunctionControlShift_.SpvFunctionControlInlineShift;
pub const SpvFunctionControlDontInlineShift = enum_SpvFunctionControlShift_.SpvFunctionControlDontInlineShift;
pub const SpvFunctionControlPureShift = enum_SpvFunctionControlShift_.SpvFunctionControlPureShift;
pub const SpvFunctionControlConstShift = enum_SpvFunctionControlShift_.SpvFunctionControlConstShift;
pub const SpvFunctionControlMax = enum_SpvFunctionControlShift_.SpvFunctionControlMax;
pub const enum_SpvFunctionControlShift_ = extern enum {
    SpvFunctionControlInlineShift = 0,
    SpvFunctionControlDontInlineShift = 1,
    SpvFunctionControlPureShift = 2,
    SpvFunctionControlConstShift = 3,
    SpvFunctionControlMax = 2147483647,
};
pub const SpvFunctionControlShift = enum_SpvFunctionControlShift_;
pub const SpvFunctionControlMaskNone = enum_SpvFunctionControlMask_.SpvFunctionControlMaskNone;
pub const SpvFunctionControlInlineMask = enum_SpvFunctionControlMask_.SpvFunctionControlInlineMask;
pub const SpvFunctionControlDontInlineMask = enum_SpvFunctionControlMask_.SpvFunctionControlDontInlineMask;
pub const SpvFunctionControlPureMask = enum_SpvFunctionControlMask_.SpvFunctionControlPureMask;
pub const SpvFunctionControlConstMask = enum_SpvFunctionControlMask_.SpvFunctionControlConstMask;
pub const enum_SpvFunctionControlMask_ = extern enum {
    SpvFunctionControlMaskNone = 0,
    SpvFunctionControlInlineMask = 1,
    SpvFunctionControlDontInlineMask = 2,
    SpvFunctionControlPureMask = 4,
    SpvFunctionControlConstMask = 8,
};
pub const SpvFunctionControlMask = enum_SpvFunctionControlMask_;
pub const SpvMemorySemanticsAcquireShift = enum_SpvMemorySemanticsShift_.SpvMemorySemanticsAcquireShift;
pub const SpvMemorySemanticsReleaseShift = enum_SpvMemorySemanticsShift_.SpvMemorySemanticsReleaseShift;
pub const SpvMemorySemanticsAcquireReleaseShift = enum_SpvMemorySemanticsShift_.SpvMemorySemanticsAcquireReleaseShift;
pub const SpvMemorySemanticsSequentiallyConsistentShift = enum_SpvMemorySemanticsShift_.SpvMemorySemanticsSequentiallyConsistentShift;
pub const SpvMemorySemanticsUniformMemoryShift = enum_SpvMemorySemanticsShift_.SpvMemorySemanticsUniformMemoryShift;
pub const SpvMemorySemanticsSubgroupMemoryShift = enum_SpvMemorySemanticsShift_.SpvMemorySemanticsSubgroupMemoryShift;
pub const SpvMemorySemanticsWorkgroupMemoryShift = enum_SpvMemorySemanticsShift_.SpvMemorySemanticsWorkgroupMemoryShift;
pub const SpvMemorySemanticsCrossWorkgroupMemoryShift = enum_SpvMemorySemanticsShift_.SpvMemorySemanticsCrossWorkgroupMemoryShift;
pub const SpvMemorySemanticsAtomicCounterMemoryShift = enum_SpvMemorySemanticsShift_.SpvMemorySemanticsAtomicCounterMemoryShift;
pub const SpvMemorySemanticsImageMemoryShift = enum_SpvMemorySemanticsShift_.SpvMemorySemanticsImageMemoryShift;
pub const SpvMemorySemanticsOutputMemoryShift = enum_SpvMemorySemanticsShift_.SpvMemorySemanticsOutputMemoryShift;
pub const SpvMemorySemanticsOutputMemoryKHRShift = enum_SpvMemorySemanticsShift_.SpvMemorySemanticsOutputMemoryKHRShift;
pub const SpvMemorySemanticsMakeAvailableShift = enum_SpvMemorySemanticsShift_.SpvMemorySemanticsMakeAvailableShift;
pub const SpvMemorySemanticsMakeAvailableKHRShift = enum_SpvMemorySemanticsShift_.SpvMemorySemanticsMakeAvailableKHRShift;
pub const SpvMemorySemanticsMakeVisibleShift = enum_SpvMemorySemanticsShift_.SpvMemorySemanticsMakeVisibleShift;
pub const SpvMemorySemanticsMakeVisibleKHRShift = enum_SpvMemorySemanticsShift_.SpvMemorySemanticsMakeVisibleKHRShift;
pub const SpvMemorySemanticsVolatileShift = enum_SpvMemorySemanticsShift_.SpvMemorySemanticsVolatileShift;
pub const SpvMemorySemanticsMax = enum_SpvMemorySemanticsShift_.SpvMemorySemanticsMax;
pub const enum_SpvMemorySemanticsShift_ = extern enum {
    SpvMemorySemanticsAcquireShift = 1,
    SpvMemorySemanticsReleaseShift = 2,
    SpvMemorySemanticsAcquireReleaseShift = 3,
    SpvMemorySemanticsSequentiallyConsistentShift = 4,
    SpvMemorySemanticsUniformMemoryShift = 6,
    SpvMemorySemanticsSubgroupMemoryShift = 7,
    SpvMemorySemanticsWorkgroupMemoryShift = 8,
    SpvMemorySemanticsCrossWorkgroupMemoryShift = 9,
    SpvMemorySemanticsAtomicCounterMemoryShift = 10,
    SpvMemorySemanticsImageMemoryShift = 11,
    SpvMemorySemanticsOutputMemoryShift = 12,
    SpvMemorySemanticsOutputMemoryKHRShift = 12,
    SpvMemorySemanticsMakeAvailableShift = 13,
    SpvMemorySemanticsMakeAvailableKHRShift = 13,
    SpvMemorySemanticsMakeVisibleShift = 14,
    SpvMemorySemanticsMakeVisibleKHRShift = 14,
    SpvMemorySemanticsVolatileShift = 15,
    SpvMemorySemanticsMax = 2147483647,
};
pub const SpvMemorySemanticsShift = enum_SpvMemorySemanticsShift_;
pub const SpvMemorySemanticsMaskNone = enum_SpvMemorySemanticsMask_.SpvMemorySemanticsMaskNone;
pub const SpvMemorySemanticsAcquireMask = enum_SpvMemorySemanticsMask_.SpvMemorySemanticsAcquireMask;
pub const SpvMemorySemanticsReleaseMask = enum_SpvMemorySemanticsMask_.SpvMemorySemanticsReleaseMask;
pub const SpvMemorySemanticsAcquireReleaseMask = enum_SpvMemorySemanticsMask_.SpvMemorySemanticsAcquireReleaseMask;
pub const SpvMemorySemanticsSequentiallyConsistentMask = enum_SpvMemorySemanticsMask_.SpvMemorySemanticsSequentiallyConsistentMask;
pub const SpvMemorySemanticsUniformMemoryMask = enum_SpvMemorySemanticsMask_.SpvMemorySemanticsUniformMemoryMask;
pub const SpvMemorySemanticsSubgroupMemoryMask = enum_SpvMemorySemanticsMask_.SpvMemorySemanticsSubgroupMemoryMask;
pub const SpvMemorySemanticsWorkgroupMemoryMask = enum_SpvMemorySemanticsMask_.SpvMemorySemanticsWorkgroupMemoryMask;
pub const SpvMemorySemanticsCrossWorkgroupMemoryMask = enum_SpvMemorySemanticsMask_.SpvMemorySemanticsCrossWorkgroupMemoryMask;
pub const SpvMemorySemanticsAtomicCounterMemoryMask = enum_SpvMemorySemanticsMask_.SpvMemorySemanticsAtomicCounterMemoryMask;
pub const SpvMemorySemanticsImageMemoryMask = enum_SpvMemorySemanticsMask_.SpvMemorySemanticsImageMemoryMask;
pub const SpvMemorySemanticsOutputMemoryMask = enum_SpvMemorySemanticsMask_.SpvMemorySemanticsOutputMemoryMask;
pub const SpvMemorySemanticsOutputMemoryKHRMask = enum_SpvMemorySemanticsMask_.SpvMemorySemanticsOutputMemoryKHRMask;
pub const SpvMemorySemanticsMakeAvailableMask = enum_SpvMemorySemanticsMask_.SpvMemorySemanticsMakeAvailableMask;
pub const SpvMemorySemanticsMakeAvailableKHRMask = enum_SpvMemorySemanticsMask_.SpvMemorySemanticsMakeAvailableKHRMask;
pub const SpvMemorySemanticsMakeVisibleMask = enum_SpvMemorySemanticsMask_.SpvMemorySemanticsMakeVisibleMask;
pub const SpvMemorySemanticsMakeVisibleKHRMask = enum_SpvMemorySemanticsMask_.SpvMemorySemanticsMakeVisibleKHRMask;
pub const SpvMemorySemanticsVolatileMask = enum_SpvMemorySemanticsMask_.SpvMemorySemanticsVolatileMask;
pub const enum_SpvMemorySemanticsMask_ = extern enum {
    SpvMemorySemanticsMaskNone = 0,
    SpvMemorySemanticsAcquireMask = 2,
    SpvMemorySemanticsReleaseMask = 4,
    SpvMemorySemanticsAcquireReleaseMask = 8,
    SpvMemorySemanticsSequentiallyConsistentMask = 16,
    SpvMemorySemanticsUniformMemoryMask = 64,
    SpvMemorySemanticsSubgroupMemoryMask = 128,
    SpvMemorySemanticsWorkgroupMemoryMask = 256,
    SpvMemorySemanticsCrossWorkgroupMemoryMask = 512,
    SpvMemorySemanticsAtomicCounterMemoryMask = 1024,
    SpvMemorySemanticsImageMemoryMask = 2048,
    SpvMemorySemanticsOutputMemoryMask = 4096,
    SpvMemorySemanticsOutputMemoryKHRMask = 4096,
    SpvMemorySemanticsMakeAvailableMask = 8192,
    SpvMemorySemanticsMakeAvailableKHRMask = 8192,
    SpvMemorySemanticsMakeVisibleMask = 16384,
    SpvMemorySemanticsMakeVisibleKHRMask = 16384,
    SpvMemorySemanticsVolatileMask = 32768,
};
pub const SpvMemorySemanticsMask = enum_SpvMemorySemanticsMask_;
pub const SpvMemoryAccessVolatileShift = enum_SpvMemoryAccessShift_.SpvMemoryAccessVolatileShift;
pub const SpvMemoryAccessAlignedShift = enum_SpvMemoryAccessShift_.SpvMemoryAccessAlignedShift;
pub const SpvMemoryAccessNontemporalShift = enum_SpvMemoryAccessShift_.SpvMemoryAccessNontemporalShift;
pub const SpvMemoryAccessMakePointerAvailableShift = enum_SpvMemoryAccessShift_.SpvMemoryAccessMakePointerAvailableShift;
pub const SpvMemoryAccessMakePointerAvailableKHRShift = enum_SpvMemoryAccessShift_.SpvMemoryAccessMakePointerAvailableKHRShift;
pub const SpvMemoryAccessMakePointerVisibleShift = enum_SpvMemoryAccessShift_.SpvMemoryAccessMakePointerVisibleShift;
pub const SpvMemoryAccessMakePointerVisibleKHRShift = enum_SpvMemoryAccessShift_.SpvMemoryAccessMakePointerVisibleKHRShift;
pub const SpvMemoryAccessNonPrivatePointerShift = enum_SpvMemoryAccessShift_.SpvMemoryAccessNonPrivatePointerShift;
pub const SpvMemoryAccessNonPrivatePointerKHRShift = enum_SpvMemoryAccessShift_.SpvMemoryAccessNonPrivatePointerKHRShift;
pub const SpvMemoryAccessMax = enum_SpvMemoryAccessShift_.SpvMemoryAccessMax;
pub const enum_SpvMemoryAccessShift_ = extern enum {
    SpvMemoryAccessVolatileShift = 0,
    SpvMemoryAccessAlignedShift = 1,
    SpvMemoryAccessNontemporalShift = 2,
    SpvMemoryAccessMakePointerAvailableShift = 3,
    SpvMemoryAccessMakePointerAvailableKHRShift = 3,
    SpvMemoryAccessMakePointerVisibleShift = 4,
    SpvMemoryAccessMakePointerVisibleKHRShift = 4,
    SpvMemoryAccessNonPrivatePointerShift = 5,
    SpvMemoryAccessNonPrivatePointerKHRShift = 5,
    SpvMemoryAccessMax = 2147483647,
};
pub const SpvMemoryAccessShift = enum_SpvMemoryAccessShift_;
pub const SpvMemoryAccessMaskNone = enum_SpvMemoryAccessMask_.SpvMemoryAccessMaskNone;
pub const SpvMemoryAccessVolatileMask = enum_SpvMemoryAccessMask_.SpvMemoryAccessVolatileMask;
pub const SpvMemoryAccessAlignedMask = enum_SpvMemoryAccessMask_.SpvMemoryAccessAlignedMask;
pub const SpvMemoryAccessNontemporalMask = enum_SpvMemoryAccessMask_.SpvMemoryAccessNontemporalMask;
pub const SpvMemoryAccessMakePointerAvailableMask = enum_SpvMemoryAccessMask_.SpvMemoryAccessMakePointerAvailableMask;
pub const SpvMemoryAccessMakePointerAvailableKHRMask = enum_SpvMemoryAccessMask_.SpvMemoryAccessMakePointerAvailableKHRMask;
pub const SpvMemoryAccessMakePointerVisibleMask = enum_SpvMemoryAccessMask_.SpvMemoryAccessMakePointerVisibleMask;
pub const SpvMemoryAccessMakePointerVisibleKHRMask = enum_SpvMemoryAccessMask_.SpvMemoryAccessMakePointerVisibleKHRMask;
pub const SpvMemoryAccessNonPrivatePointerMask = enum_SpvMemoryAccessMask_.SpvMemoryAccessNonPrivatePointerMask;
pub const SpvMemoryAccessNonPrivatePointerKHRMask = enum_SpvMemoryAccessMask_.SpvMemoryAccessNonPrivatePointerKHRMask;
pub const enum_SpvMemoryAccessMask_ = extern enum {
    SpvMemoryAccessMaskNone = 0,
    SpvMemoryAccessVolatileMask = 1,
    SpvMemoryAccessAlignedMask = 2,
    SpvMemoryAccessNontemporalMask = 4,
    SpvMemoryAccessMakePointerAvailableMask = 8,
    SpvMemoryAccessMakePointerAvailableKHRMask = 8,
    SpvMemoryAccessMakePointerVisibleMask = 16,
    SpvMemoryAccessMakePointerVisibleKHRMask = 16,
    SpvMemoryAccessNonPrivatePointerMask = 32,
    SpvMemoryAccessNonPrivatePointerKHRMask = 32,
};
pub const SpvMemoryAccessMask = enum_SpvMemoryAccessMask_;
pub const SpvScopeCrossDevice = enum_SpvScope_.SpvScopeCrossDevice;
pub const SpvScopeDevice = enum_SpvScope_.SpvScopeDevice;
pub const SpvScopeWorkgroup = enum_SpvScope_.SpvScopeWorkgroup;
pub const SpvScopeSubgroup = enum_SpvScope_.SpvScopeSubgroup;
pub const SpvScopeInvocation = enum_SpvScope_.SpvScopeInvocation;
pub const SpvScopeQueueFamily = enum_SpvScope_.SpvScopeQueueFamily;
pub const SpvScopeQueueFamilyKHR = enum_SpvScope_.SpvScopeQueueFamilyKHR;
pub const SpvScopeMax = enum_SpvScope_.SpvScopeMax;
pub const enum_SpvScope_ = extern enum {
    SpvScopeCrossDevice = 0,
    SpvScopeDevice = 1,
    SpvScopeWorkgroup = 2,
    SpvScopeSubgroup = 3,
    SpvScopeInvocation = 4,
    SpvScopeQueueFamily = 5,
    SpvScopeQueueFamilyKHR = 5,
    SpvScopeMax = 2147483647,
};
pub const SpvScope = enum_SpvScope_;
pub const SpvGroupOperationReduce = enum_SpvGroupOperation_.SpvGroupOperationReduce;
pub const SpvGroupOperationInclusiveScan = enum_SpvGroupOperation_.SpvGroupOperationInclusiveScan;
pub const SpvGroupOperationExclusiveScan = enum_SpvGroupOperation_.SpvGroupOperationExclusiveScan;
pub const SpvGroupOperationClusteredReduce = enum_SpvGroupOperation_.SpvGroupOperationClusteredReduce;
pub const SpvGroupOperationPartitionedReduceNV = enum_SpvGroupOperation_.SpvGroupOperationPartitionedReduceNV;
pub const SpvGroupOperationPartitionedInclusiveScanNV = enum_SpvGroupOperation_.SpvGroupOperationPartitionedInclusiveScanNV;
pub const SpvGroupOperationPartitionedExclusiveScanNV = enum_SpvGroupOperation_.SpvGroupOperationPartitionedExclusiveScanNV;
pub const SpvGroupOperationMax = enum_SpvGroupOperation_.SpvGroupOperationMax;
pub const enum_SpvGroupOperation_ = extern enum {
    SpvGroupOperationReduce = 0,
    SpvGroupOperationInclusiveScan = 1,
    SpvGroupOperationExclusiveScan = 2,
    SpvGroupOperationClusteredReduce = 3,
    SpvGroupOperationPartitionedReduceNV = 6,
    SpvGroupOperationPartitionedInclusiveScanNV = 7,
    SpvGroupOperationPartitionedExclusiveScanNV = 8,
    SpvGroupOperationMax = 2147483647,
};
pub const SpvGroupOperation = enum_SpvGroupOperation_;
pub const SpvKernelEnqueueFlagsNoWait = enum_SpvKernelEnqueueFlags_.SpvKernelEnqueueFlagsNoWait;
pub const SpvKernelEnqueueFlagsWaitKernel = enum_SpvKernelEnqueueFlags_.SpvKernelEnqueueFlagsWaitKernel;
pub const SpvKernelEnqueueFlagsWaitWorkGroup = enum_SpvKernelEnqueueFlags_.SpvKernelEnqueueFlagsWaitWorkGroup;
pub const SpvKernelEnqueueFlagsMax = enum_SpvKernelEnqueueFlags_.SpvKernelEnqueueFlagsMax;
pub const enum_SpvKernelEnqueueFlags_ = extern enum {
    SpvKernelEnqueueFlagsNoWait = 0,
    SpvKernelEnqueueFlagsWaitKernel = 1,
    SpvKernelEnqueueFlagsWaitWorkGroup = 2,
    SpvKernelEnqueueFlagsMax = 2147483647,
};
pub const SpvKernelEnqueueFlags = enum_SpvKernelEnqueueFlags_;
pub const SpvKernelProfilingInfoCmdExecTimeShift = enum_SpvKernelProfilingInfoShift_.SpvKernelProfilingInfoCmdExecTimeShift;
pub const SpvKernelProfilingInfoMax = enum_SpvKernelProfilingInfoShift_.SpvKernelProfilingInfoMax;
pub const enum_SpvKernelProfilingInfoShift_ = extern enum {
    SpvKernelProfilingInfoCmdExecTimeShift = 0,
    SpvKernelProfilingInfoMax = 2147483647,
};
pub const SpvKernelProfilingInfoShift = enum_SpvKernelProfilingInfoShift_;
pub const SpvKernelProfilingInfoMaskNone = enum_SpvKernelProfilingInfoMask_.SpvKernelProfilingInfoMaskNone;
pub const SpvKernelProfilingInfoCmdExecTimeMask = enum_SpvKernelProfilingInfoMask_.SpvKernelProfilingInfoCmdExecTimeMask;
pub const enum_SpvKernelProfilingInfoMask_ = extern enum {
    SpvKernelProfilingInfoMaskNone = 0,
    SpvKernelProfilingInfoCmdExecTimeMask = 1,
};
pub const SpvKernelProfilingInfoMask = enum_SpvKernelProfilingInfoMask_;
pub const SpvCapabilityMatrix = enum_SpvCapability_.SpvCapabilityMatrix;
pub const SpvCapabilityShader = enum_SpvCapability_.SpvCapabilityShader;
pub const SpvCapabilityGeometry = enum_SpvCapability_.SpvCapabilityGeometry;
pub const SpvCapabilityTessellation = enum_SpvCapability_.SpvCapabilityTessellation;
pub const SpvCapabilityAddresses = enum_SpvCapability_.SpvCapabilityAddresses;
pub const SpvCapabilityLinkage = enum_SpvCapability_.SpvCapabilityLinkage;
pub const SpvCapabilityKernel = enum_SpvCapability_.SpvCapabilityKernel;
pub const SpvCapabilityVector16 = enum_SpvCapability_.SpvCapabilityVector16;
pub const SpvCapabilityFloat16Buffer = enum_SpvCapability_.SpvCapabilityFloat16Buffer;
pub const SpvCapabilityFloat16 = enum_SpvCapability_.SpvCapabilityFloat16;
pub const SpvCapabilityFloat64 = enum_SpvCapability_.SpvCapabilityFloat64;
pub const SpvCapabilityInt64 = enum_SpvCapability_.SpvCapabilityInt64;
pub const SpvCapabilityInt64Atomics = enum_SpvCapability_.SpvCapabilityInt64Atomics;
pub const SpvCapabilityImageBasic = enum_SpvCapability_.SpvCapabilityImageBasic;
pub const SpvCapabilityImageReadWrite = enum_SpvCapability_.SpvCapabilityImageReadWrite;
pub const SpvCapabilityImageMipmap = enum_SpvCapability_.SpvCapabilityImageMipmap;
pub const SpvCapabilityPipes = enum_SpvCapability_.SpvCapabilityPipes;
pub const SpvCapabilityGroups = enum_SpvCapability_.SpvCapabilityGroups;
pub const SpvCapabilityDeviceEnqueue = enum_SpvCapability_.SpvCapabilityDeviceEnqueue;
pub const SpvCapabilityLiteralSampler = enum_SpvCapability_.SpvCapabilityLiteralSampler;
pub const SpvCapabilityAtomicStorage = enum_SpvCapability_.SpvCapabilityAtomicStorage;
pub const SpvCapabilityInt16 = enum_SpvCapability_.SpvCapabilityInt16;
pub const SpvCapabilityTessellationPointSize = enum_SpvCapability_.SpvCapabilityTessellationPointSize;
pub const SpvCapabilityGeometryPointSize = enum_SpvCapability_.SpvCapabilityGeometryPointSize;
pub const SpvCapabilityImageGatherExtended = enum_SpvCapability_.SpvCapabilityImageGatherExtended;
pub const SpvCapabilityStorageImageMultisample = enum_SpvCapability_.SpvCapabilityStorageImageMultisample;
pub const SpvCapabilityUniformBufferArrayDynamicIndexing = enum_SpvCapability_.SpvCapabilityUniformBufferArrayDynamicIndexing;
pub const SpvCapabilitySampledImageArrayDynamicIndexing = enum_SpvCapability_.SpvCapabilitySampledImageArrayDynamicIndexing;
pub const SpvCapabilityStorageBufferArrayDynamicIndexing = enum_SpvCapability_.SpvCapabilityStorageBufferArrayDynamicIndexing;
pub const SpvCapabilityStorageImageArrayDynamicIndexing = enum_SpvCapability_.SpvCapabilityStorageImageArrayDynamicIndexing;
pub const SpvCapabilityClipDistance = enum_SpvCapability_.SpvCapabilityClipDistance;
pub const SpvCapabilityCullDistance = enum_SpvCapability_.SpvCapabilityCullDistance;
pub const SpvCapabilityImageCubeArray = enum_SpvCapability_.SpvCapabilityImageCubeArray;
pub const SpvCapabilitySampleRateShading = enum_SpvCapability_.SpvCapabilitySampleRateShading;
pub const SpvCapabilityImageRect = enum_SpvCapability_.SpvCapabilityImageRect;
pub const SpvCapabilitySampledRect = enum_SpvCapability_.SpvCapabilitySampledRect;
pub const SpvCapabilityGenericPointer = enum_SpvCapability_.SpvCapabilityGenericPointer;
pub const SpvCapabilityInt8 = enum_SpvCapability_.SpvCapabilityInt8;
pub const SpvCapabilityInputAttachment = enum_SpvCapability_.SpvCapabilityInputAttachment;
pub const SpvCapabilitySparseResidency = enum_SpvCapability_.SpvCapabilitySparseResidency;
pub const SpvCapabilityMinLod = enum_SpvCapability_.SpvCapabilityMinLod;
pub const SpvCapabilitySampled1D = enum_SpvCapability_.SpvCapabilitySampled1D;
pub const SpvCapabilityImage1D = enum_SpvCapability_.SpvCapabilityImage1D;
pub const SpvCapabilitySampledCubeArray = enum_SpvCapability_.SpvCapabilitySampledCubeArray;
pub const SpvCapabilitySampledBuffer = enum_SpvCapability_.SpvCapabilitySampledBuffer;
pub const SpvCapabilityImageBuffer = enum_SpvCapability_.SpvCapabilityImageBuffer;
pub const SpvCapabilityImageMSArray = enum_SpvCapability_.SpvCapabilityImageMSArray;
pub const SpvCapabilityStorageImageExtendedFormats = enum_SpvCapability_.SpvCapabilityStorageImageExtendedFormats;
pub const SpvCapabilityImageQuery = enum_SpvCapability_.SpvCapabilityImageQuery;
pub const SpvCapabilityDerivativeControl = enum_SpvCapability_.SpvCapabilityDerivativeControl;
pub const SpvCapabilityInterpolationFunction = enum_SpvCapability_.SpvCapabilityInterpolationFunction;
pub const SpvCapabilityTransformFeedback = enum_SpvCapability_.SpvCapabilityTransformFeedback;
pub const SpvCapabilityGeometryStreams = enum_SpvCapability_.SpvCapabilityGeometryStreams;
pub const SpvCapabilityStorageImageReadWithoutFormat = enum_SpvCapability_.SpvCapabilityStorageImageReadWithoutFormat;
pub const SpvCapabilityStorageImageWriteWithoutFormat = enum_SpvCapability_.SpvCapabilityStorageImageWriteWithoutFormat;
pub const SpvCapabilityMultiViewport = enum_SpvCapability_.SpvCapabilityMultiViewport;
pub const SpvCapabilitySubgroupDispatch = enum_SpvCapability_.SpvCapabilitySubgroupDispatch;
pub const SpvCapabilityNamedBarrier = enum_SpvCapability_.SpvCapabilityNamedBarrier;
pub const SpvCapabilityPipeStorage = enum_SpvCapability_.SpvCapabilityPipeStorage;
pub const SpvCapabilityGroupNonUniform = enum_SpvCapability_.SpvCapabilityGroupNonUniform;
pub const SpvCapabilityGroupNonUniformVote = enum_SpvCapability_.SpvCapabilityGroupNonUniformVote;
pub const SpvCapabilityGroupNonUniformArithmetic = enum_SpvCapability_.SpvCapabilityGroupNonUniformArithmetic;
pub const SpvCapabilityGroupNonUniformBallot = enum_SpvCapability_.SpvCapabilityGroupNonUniformBallot;
pub const SpvCapabilityGroupNonUniformShuffle = enum_SpvCapability_.SpvCapabilityGroupNonUniformShuffle;
pub const SpvCapabilityGroupNonUniformShuffleRelative = enum_SpvCapability_.SpvCapabilityGroupNonUniformShuffleRelative;
pub const SpvCapabilityGroupNonUniformClustered = enum_SpvCapability_.SpvCapabilityGroupNonUniformClustered;
pub const SpvCapabilityGroupNonUniformQuad = enum_SpvCapability_.SpvCapabilityGroupNonUniformQuad;
pub const SpvCapabilityShaderLayer = enum_SpvCapability_.SpvCapabilityShaderLayer;
pub const SpvCapabilityShaderViewportIndex = enum_SpvCapability_.SpvCapabilityShaderViewportIndex;
pub const SpvCapabilitySubgroupBallotKHR = enum_SpvCapability_.SpvCapabilitySubgroupBallotKHR;
pub const SpvCapabilityDrawParameters = enum_SpvCapability_.SpvCapabilityDrawParameters;
pub const SpvCapabilitySubgroupVoteKHR = enum_SpvCapability_.SpvCapabilitySubgroupVoteKHR;
pub const SpvCapabilityStorageBuffer16BitAccess = enum_SpvCapability_.SpvCapabilityStorageBuffer16BitAccess;
pub const SpvCapabilityStorageUniformBufferBlock16 = enum_SpvCapability_.SpvCapabilityStorageUniformBufferBlock16;
pub const SpvCapabilityStorageUniform16 = enum_SpvCapability_.SpvCapabilityStorageUniform16;
pub const SpvCapabilityUniformAndStorageBuffer16BitAccess = enum_SpvCapability_.SpvCapabilityUniformAndStorageBuffer16BitAccess;
pub const SpvCapabilityStoragePushConstant16 = enum_SpvCapability_.SpvCapabilityStoragePushConstant16;
pub const SpvCapabilityStorageInputOutput16 = enum_SpvCapability_.SpvCapabilityStorageInputOutput16;
pub const SpvCapabilityDeviceGroup = enum_SpvCapability_.SpvCapabilityDeviceGroup;
pub const SpvCapabilityMultiView = enum_SpvCapability_.SpvCapabilityMultiView;
pub const SpvCapabilityVariablePointersStorageBuffer = enum_SpvCapability_.SpvCapabilityVariablePointersStorageBuffer;
pub const SpvCapabilityVariablePointers = enum_SpvCapability_.SpvCapabilityVariablePointers;
pub const SpvCapabilityAtomicStorageOps = enum_SpvCapability_.SpvCapabilityAtomicStorageOps;
pub const SpvCapabilitySampleMaskPostDepthCoverage = enum_SpvCapability_.SpvCapabilitySampleMaskPostDepthCoverage;
pub const SpvCapabilityStorageBuffer8BitAccess = enum_SpvCapability_.SpvCapabilityStorageBuffer8BitAccess;
pub const SpvCapabilityUniformAndStorageBuffer8BitAccess = enum_SpvCapability_.SpvCapabilityUniformAndStorageBuffer8BitAccess;
pub const SpvCapabilityStoragePushConstant8 = enum_SpvCapability_.SpvCapabilityStoragePushConstant8;
pub const SpvCapabilityDenormPreserve = enum_SpvCapability_.SpvCapabilityDenormPreserve;
pub const SpvCapabilityDenormFlushToZero = enum_SpvCapability_.SpvCapabilityDenormFlushToZero;
pub const SpvCapabilitySignedZeroInfNanPreserve = enum_SpvCapability_.SpvCapabilitySignedZeroInfNanPreserve;
pub const SpvCapabilityRoundingModeRTE = enum_SpvCapability_.SpvCapabilityRoundingModeRTE;
pub const SpvCapabilityRoundingModeRTZ = enum_SpvCapability_.SpvCapabilityRoundingModeRTZ;
pub const SpvCapabilityFloat16ImageAMD = enum_SpvCapability_.SpvCapabilityFloat16ImageAMD;
pub const SpvCapabilityImageGatherBiasLodAMD = enum_SpvCapability_.SpvCapabilityImageGatherBiasLodAMD;
pub const SpvCapabilityFragmentMaskAMD = enum_SpvCapability_.SpvCapabilityFragmentMaskAMD;
pub const SpvCapabilityStencilExportEXT = enum_SpvCapability_.SpvCapabilityStencilExportEXT;
pub const SpvCapabilityImageReadWriteLodAMD = enum_SpvCapability_.SpvCapabilityImageReadWriteLodAMD;
pub const SpvCapabilityShaderClockKHR = enum_SpvCapability_.SpvCapabilityShaderClockKHR;
pub const SpvCapabilitySampleMaskOverrideCoverageNV = enum_SpvCapability_.SpvCapabilitySampleMaskOverrideCoverageNV;
pub const SpvCapabilityGeometryShaderPassthroughNV = enum_SpvCapability_.SpvCapabilityGeometryShaderPassthroughNV;
pub const SpvCapabilityShaderViewportIndexLayerEXT = enum_SpvCapability_.SpvCapabilityShaderViewportIndexLayerEXT;
pub const SpvCapabilityShaderViewportIndexLayerNV = enum_SpvCapability_.SpvCapabilityShaderViewportIndexLayerNV;
pub const SpvCapabilityShaderViewportMaskNV = enum_SpvCapability_.SpvCapabilityShaderViewportMaskNV;
pub const SpvCapabilityShaderStereoViewNV = enum_SpvCapability_.SpvCapabilityShaderStereoViewNV;
pub const SpvCapabilityPerViewAttributesNV = enum_SpvCapability_.SpvCapabilityPerViewAttributesNV;
pub const SpvCapabilityFragmentFullyCoveredEXT = enum_SpvCapability_.SpvCapabilityFragmentFullyCoveredEXT;
pub const SpvCapabilityMeshShadingNV = enum_SpvCapability_.SpvCapabilityMeshShadingNV;
pub const SpvCapabilityImageFootprintNV = enum_SpvCapability_.SpvCapabilityImageFootprintNV;
pub const SpvCapabilityFragmentBarycentricNV = enum_SpvCapability_.SpvCapabilityFragmentBarycentricNV;
pub const SpvCapabilityComputeDerivativeGroupQuadsNV = enum_SpvCapability_.SpvCapabilityComputeDerivativeGroupQuadsNV;
pub const SpvCapabilityFragmentDensityEXT = enum_SpvCapability_.SpvCapabilityFragmentDensityEXT;
pub const SpvCapabilityShadingRateNV = enum_SpvCapability_.SpvCapabilityShadingRateNV;
pub const SpvCapabilityGroupNonUniformPartitionedNV = enum_SpvCapability_.SpvCapabilityGroupNonUniformPartitionedNV;
pub const SpvCapabilityShaderNonUniform = enum_SpvCapability_.SpvCapabilityShaderNonUniform;
pub const SpvCapabilityShaderNonUniformEXT = enum_SpvCapability_.SpvCapabilityShaderNonUniformEXT;
pub const SpvCapabilityRuntimeDescriptorArray = enum_SpvCapability_.SpvCapabilityRuntimeDescriptorArray;
pub const SpvCapabilityRuntimeDescriptorArrayEXT = enum_SpvCapability_.SpvCapabilityRuntimeDescriptorArrayEXT;
pub const SpvCapabilityInputAttachmentArrayDynamicIndexing = enum_SpvCapability_.SpvCapabilityInputAttachmentArrayDynamicIndexing;
pub const SpvCapabilityInputAttachmentArrayDynamicIndexingEXT = enum_SpvCapability_.SpvCapabilityInputAttachmentArrayDynamicIndexingEXT;
pub const SpvCapabilityUniformTexelBufferArrayDynamicIndexing = enum_SpvCapability_.SpvCapabilityUniformTexelBufferArrayDynamicIndexing;
pub const SpvCapabilityUniformTexelBufferArrayDynamicIndexingEXT = enum_SpvCapability_.SpvCapabilityUniformTexelBufferArrayDynamicIndexingEXT;
pub const SpvCapabilityStorageTexelBufferArrayDynamicIndexing = enum_SpvCapability_.SpvCapabilityStorageTexelBufferArrayDynamicIndexing;
pub const SpvCapabilityStorageTexelBufferArrayDynamicIndexingEXT = enum_SpvCapability_.SpvCapabilityStorageTexelBufferArrayDynamicIndexingEXT;
pub const SpvCapabilityUniformBufferArrayNonUniformIndexing = enum_SpvCapability_.SpvCapabilityUniformBufferArrayNonUniformIndexing;
pub const SpvCapabilityUniformBufferArrayNonUniformIndexingEXT = enum_SpvCapability_.SpvCapabilityUniformBufferArrayNonUniformIndexingEXT;
pub const SpvCapabilitySampledImageArrayNonUniformIndexing = enum_SpvCapability_.SpvCapabilitySampledImageArrayNonUniformIndexing;
pub const SpvCapabilitySampledImageArrayNonUniformIndexingEXT = enum_SpvCapability_.SpvCapabilitySampledImageArrayNonUniformIndexingEXT;
pub const SpvCapabilityStorageBufferArrayNonUniformIndexing = enum_SpvCapability_.SpvCapabilityStorageBufferArrayNonUniformIndexing;
pub const SpvCapabilityStorageBufferArrayNonUniformIndexingEXT = enum_SpvCapability_.SpvCapabilityStorageBufferArrayNonUniformIndexingEXT;
pub const SpvCapabilityStorageImageArrayNonUniformIndexing = enum_SpvCapability_.SpvCapabilityStorageImageArrayNonUniformIndexing;
pub const SpvCapabilityStorageImageArrayNonUniformIndexingEXT = enum_SpvCapability_.SpvCapabilityStorageImageArrayNonUniformIndexingEXT;
pub const SpvCapabilityInputAttachmentArrayNonUniformIndexing = enum_SpvCapability_.SpvCapabilityInputAttachmentArrayNonUniformIndexing;
pub const SpvCapabilityInputAttachmentArrayNonUniformIndexingEXT = enum_SpvCapability_.SpvCapabilityInputAttachmentArrayNonUniformIndexingEXT;
pub const SpvCapabilityUniformTexelBufferArrayNonUniformIndexing = enum_SpvCapability_.SpvCapabilityUniformTexelBufferArrayNonUniformIndexing;
pub const SpvCapabilityUniformTexelBufferArrayNonUniformIndexingEXT = enum_SpvCapability_.SpvCapabilityUniformTexelBufferArrayNonUniformIndexingEXT;
pub const SpvCapabilityStorageTexelBufferArrayNonUniformIndexing = enum_SpvCapability_.SpvCapabilityStorageTexelBufferArrayNonUniformIndexing;
pub const SpvCapabilityStorageTexelBufferArrayNonUniformIndexingEXT = enum_SpvCapability_.SpvCapabilityStorageTexelBufferArrayNonUniformIndexingEXT;
pub const SpvCapabilityRayTracingNV = enum_SpvCapability_.SpvCapabilityRayTracingNV;
pub const SpvCapabilityVulkanMemoryModel = enum_SpvCapability_.SpvCapabilityVulkanMemoryModel;
pub const SpvCapabilityVulkanMemoryModelKHR = enum_SpvCapability_.SpvCapabilityVulkanMemoryModelKHR;
pub const SpvCapabilityVulkanMemoryModelDeviceScope = enum_SpvCapability_.SpvCapabilityVulkanMemoryModelDeviceScope;
pub const SpvCapabilityVulkanMemoryModelDeviceScopeKHR = enum_SpvCapability_.SpvCapabilityVulkanMemoryModelDeviceScopeKHR;
pub const SpvCapabilityPhysicalStorageBufferAddresses = enum_SpvCapability_.SpvCapabilityPhysicalStorageBufferAddresses;
pub const SpvCapabilityPhysicalStorageBufferAddressesEXT = enum_SpvCapability_.SpvCapabilityPhysicalStorageBufferAddressesEXT;
pub const SpvCapabilityComputeDerivativeGroupLinearNV = enum_SpvCapability_.SpvCapabilityComputeDerivativeGroupLinearNV;
pub const SpvCapabilityCooperativeMatrixNV = enum_SpvCapability_.SpvCapabilityCooperativeMatrixNV;
pub const SpvCapabilityFragmentShaderSampleInterlockEXT = enum_SpvCapability_.SpvCapabilityFragmentShaderSampleInterlockEXT;
pub const SpvCapabilityFragmentShaderShadingRateInterlockEXT = enum_SpvCapability_.SpvCapabilityFragmentShaderShadingRateInterlockEXT;
pub const SpvCapabilityShaderSMBuiltinsNV = enum_SpvCapability_.SpvCapabilityShaderSMBuiltinsNV;
pub const SpvCapabilityFragmentShaderPixelInterlockEXT = enum_SpvCapability_.SpvCapabilityFragmentShaderPixelInterlockEXT;
pub const SpvCapabilityDemoteToHelperInvocationEXT = enum_SpvCapability_.SpvCapabilityDemoteToHelperInvocationEXT;
pub const SpvCapabilitySubgroupShuffleINTEL = enum_SpvCapability_.SpvCapabilitySubgroupShuffleINTEL;
pub const SpvCapabilitySubgroupBufferBlockIOINTEL = enum_SpvCapability_.SpvCapabilitySubgroupBufferBlockIOINTEL;
pub const SpvCapabilitySubgroupImageBlockIOINTEL = enum_SpvCapability_.SpvCapabilitySubgroupImageBlockIOINTEL;
pub const SpvCapabilitySubgroupImageMediaBlockIOINTEL = enum_SpvCapability_.SpvCapabilitySubgroupImageMediaBlockIOINTEL;
pub const SpvCapabilityIntegerFunctions2INTEL = enum_SpvCapability_.SpvCapabilityIntegerFunctions2INTEL;
pub const SpvCapabilitySubgroupAvcMotionEstimationINTEL = enum_SpvCapability_.SpvCapabilitySubgroupAvcMotionEstimationINTEL;
pub const SpvCapabilitySubgroupAvcMotionEstimationIntraINTEL = enum_SpvCapability_.SpvCapabilitySubgroupAvcMotionEstimationIntraINTEL;
pub const SpvCapabilitySubgroupAvcMotionEstimationChromaINTEL = enum_SpvCapability_.SpvCapabilitySubgroupAvcMotionEstimationChromaINTEL;
pub const SpvCapabilityMax = enum_SpvCapability_.SpvCapabilityMax;
pub const enum_SpvCapability_ = extern enum {
    SpvCapabilityMatrix = 0,
    SpvCapabilityShader = 1,
    SpvCapabilityGeometry = 2,
    SpvCapabilityTessellation = 3,
    SpvCapabilityAddresses = 4,
    SpvCapabilityLinkage = 5,
    SpvCapabilityKernel = 6,
    SpvCapabilityVector16 = 7,
    SpvCapabilityFloat16Buffer = 8,
    SpvCapabilityFloat16 = 9,
    SpvCapabilityFloat64 = 10,
    SpvCapabilityInt64 = 11,
    SpvCapabilityInt64Atomics = 12,
    SpvCapabilityImageBasic = 13,
    SpvCapabilityImageReadWrite = 14,
    SpvCapabilityImageMipmap = 15,
    SpvCapabilityPipes = 17,
    SpvCapabilityGroups = 18,
    SpvCapabilityDeviceEnqueue = 19,
    SpvCapabilityLiteralSampler = 20,
    SpvCapabilityAtomicStorage = 21,
    SpvCapabilityInt16 = 22,
    SpvCapabilityTessellationPointSize = 23,
    SpvCapabilityGeometryPointSize = 24,
    SpvCapabilityImageGatherExtended = 25,
    SpvCapabilityStorageImageMultisample = 27,
    SpvCapabilityUniformBufferArrayDynamicIndexing = 28,
    SpvCapabilitySampledImageArrayDynamicIndexing = 29,
    SpvCapabilityStorageBufferArrayDynamicIndexing = 30,
    SpvCapabilityStorageImageArrayDynamicIndexing = 31,
    SpvCapabilityClipDistance = 32,
    SpvCapabilityCullDistance = 33,
    SpvCapabilityImageCubeArray = 34,
    SpvCapabilitySampleRateShading = 35,
    SpvCapabilityImageRect = 36,
    SpvCapabilitySampledRect = 37,
    SpvCapabilityGenericPointer = 38,
    SpvCapabilityInt8 = 39,
    SpvCapabilityInputAttachment = 40,
    SpvCapabilitySparseResidency = 41,
    SpvCapabilityMinLod = 42,
    SpvCapabilitySampled1D = 43,
    SpvCapabilityImage1D = 44,
    SpvCapabilitySampledCubeArray = 45,
    SpvCapabilitySampledBuffer = 46,
    SpvCapabilityImageBuffer = 47,
    SpvCapabilityImageMSArray = 48,
    SpvCapabilityStorageImageExtendedFormats = 49,
    SpvCapabilityImageQuery = 50,
    SpvCapabilityDerivativeControl = 51,
    SpvCapabilityInterpolationFunction = 52,
    SpvCapabilityTransformFeedback = 53,
    SpvCapabilityGeometryStreams = 54,
    SpvCapabilityStorageImageReadWithoutFormat = 55,
    SpvCapabilityStorageImageWriteWithoutFormat = 56,
    SpvCapabilityMultiViewport = 57,
    SpvCapabilitySubgroupDispatch = 58,
    SpvCapabilityNamedBarrier = 59,
    SpvCapabilityPipeStorage = 60,
    SpvCapabilityGroupNonUniform = 61,
    SpvCapabilityGroupNonUniformVote = 62,
    SpvCapabilityGroupNonUniformArithmetic = 63,
    SpvCapabilityGroupNonUniformBallot = 64,
    SpvCapabilityGroupNonUniformShuffle = 65,
    SpvCapabilityGroupNonUniformShuffleRelative = 66,
    SpvCapabilityGroupNonUniformClustered = 67,
    SpvCapabilityGroupNonUniformQuad = 68,
    SpvCapabilityShaderLayer = 69,
    SpvCapabilityShaderViewportIndex = 70,
    SpvCapabilitySubgroupBallotKHR = 4423,
    SpvCapabilityDrawParameters = 4427,
    SpvCapabilitySubgroupVoteKHR = 4431,
    SpvCapabilityStorageBuffer16BitAccess = 4433,
    SpvCapabilityStorageUniformBufferBlock16 = 4433,
    SpvCapabilityStorageUniform16 = 4434,
    SpvCapabilityUniformAndStorageBuffer16BitAccess = 4434,
    SpvCapabilityStoragePushConstant16 = 4435,
    SpvCapabilityStorageInputOutput16 = 4436,
    SpvCapabilityDeviceGroup = 4437,
    SpvCapabilityMultiView = 4439,
    SpvCapabilityVariablePointersStorageBuffer = 4441,
    SpvCapabilityVariablePointers = 4442,
    SpvCapabilityAtomicStorageOps = 4445,
    SpvCapabilitySampleMaskPostDepthCoverage = 4447,
    SpvCapabilityStorageBuffer8BitAccess = 4448,
    SpvCapabilityUniformAndStorageBuffer8BitAccess = 4449,
    SpvCapabilityStoragePushConstant8 = 4450,
    SpvCapabilityDenormPreserve = 4464,
    SpvCapabilityDenormFlushToZero = 4465,
    SpvCapabilitySignedZeroInfNanPreserve = 4466,
    SpvCapabilityRoundingModeRTE = 4467,
    SpvCapabilityRoundingModeRTZ = 4468,
    SpvCapabilityFloat16ImageAMD = 5008,
    SpvCapabilityImageGatherBiasLodAMD = 5009,
    SpvCapabilityFragmentMaskAMD = 5010,
    SpvCapabilityStencilExportEXT = 5013,
    SpvCapabilityImageReadWriteLodAMD = 5015,
    SpvCapabilityShaderClockKHR = 5055,
    SpvCapabilitySampleMaskOverrideCoverageNV = 5249,
    SpvCapabilityGeometryShaderPassthroughNV = 5251,
    SpvCapabilityShaderViewportIndexLayerEXT = 5254,
    SpvCapabilityShaderViewportIndexLayerNV = 5254,
    SpvCapabilityShaderViewportMaskNV = 5255,
    SpvCapabilityShaderStereoViewNV = 5259,
    SpvCapabilityPerViewAttributesNV = 5260,
    SpvCapabilityFragmentFullyCoveredEXT = 5265,
    SpvCapabilityMeshShadingNV = 5266,
    SpvCapabilityImageFootprintNV = 5282,
    SpvCapabilityFragmentBarycentricNV = 5284,
    SpvCapabilityComputeDerivativeGroupQuadsNV = 5288,
    SpvCapabilityFragmentDensityEXT = 5291,
    SpvCapabilityShadingRateNV = 5291,
    SpvCapabilityGroupNonUniformPartitionedNV = 5297,
    SpvCapabilityShaderNonUniform = 5301,
    SpvCapabilityShaderNonUniformEXT = 5301,
    SpvCapabilityRuntimeDescriptorArray = 5302,
    SpvCapabilityRuntimeDescriptorArrayEXT = 5302,
    SpvCapabilityInputAttachmentArrayDynamicIndexing = 5303,
    SpvCapabilityInputAttachmentArrayDynamicIndexingEXT = 5303,
    SpvCapabilityUniformTexelBufferArrayDynamicIndexing = 5304,
    SpvCapabilityUniformTexelBufferArrayDynamicIndexingEXT = 5304,
    SpvCapabilityStorageTexelBufferArrayDynamicIndexing = 5305,
    SpvCapabilityStorageTexelBufferArrayDynamicIndexingEXT = 5305,
    SpvCapabilityUniformBufferArrayNonUniformIndexing = 5306,
    SpvCapabilityUniformBufferArrayNonUniformIndexingEXT = 5306,
    SpvCapabilitySampledImageArrayNonUniformIndexing = 5307,
    SpvCapabilitySampledImageArrayNonUniformIndexingEXT = 5307,
    SpvCapabilityStorageBufferArrayNonUniformIndexing = 5308,
    SpvCapabilityStorageBufferArrayNonUniformIndexingEXT = 5308,
    SpvCapabilityStorageImageArrayNonUniformIndexing = 5309,
    SpvCapabilityStorageImageArrayNonUniformIndexingEXT = 5309,
    SpvCapabilityInputAttachmentArrayNonUniformIndexing = 5310,
    SpvCapabilityInputAttachmentArrayNonUniformIndexingEXT = 5310,
    SpvCapabilityUniformTexelBufferArrayNonUniformIndexing = 5311,
    SpvCapabilityUniformTexelBufferArrayNonUniformIndexingEXT = 5311,
    SpvCapabilityStorageTexelBufferArrayNonUniformIndexing = 5312,
    SpvCapabilityStorageTexelBufferArrayNonUniformIndexingEXT = 5312,
    SpvCapabilityRayTracingNV = 5340,
    SpvCapabilityVulkanMemoryModel = 5345,
    SpvCapabilityVulkanMemoryModelKHR = 5345,
    SpvCapabilityVulkanMemoryModelDeviceScope = 5346,
    SpvCapabilityVulkanMemoryModelDeviceScopeKHR = 5346,
    SpvCapabilityPhysicalStorageBufferAddresses = 5347,
    SpvCapabilityPhysicalStorageBufferAddressesEXT = 5347,
    SpvCapabilityComputeDerivativeGroupLinearNV = 5350,
    SpvCapabilityCooperativeMatrixNV = 5357,
    SpvCapabilityFragmentShaderSampleInterlockEXT = 5363,
    SpvCapabilityFragmentShaderShadingRateInterlockEXT = 5372,
    SpvCapabilityShaderSMBuiltinsNV = 5373,
    SpvCapabilityFragmentShaderPixelInterlockEXT = 5378,
    SpvCapabilityDemoteToHelperInvocationEXT = 5379,
    SpvCapabilitySubgroupShuffleINTEL = 5568,
    SpvCapabilitySubgroupBufferBlockIOINTEL = 5569,
    SpvCapabilitySubgroupImageBlockIOINTEL = 5570,
    SpvCapabilitySubgroupImageMediaBlockIOINTEL = 5579,
    SpvCapabilityIntegerFunctions2INTEL = 5584,
    SpvCapabilitySubgroupAvcMotionEstimationINTEL = 5696,
    SpvCapabilitySubgroupAvcMotionEstimationIntraINTEL = 5697,
    SpvCapabilitySubgroupAvcMotionEstimationChromaINTEL = 5698,
    SpvCapabilityMax = 2147483647,
};
pub const SpvCapability = enum_SpvCapability_;
pub const SpvOpNop = enum_SpvOp_.SpvOpNop;
pub const SpvOpUndef = enum_SpvOp_.SpvOpUndef;
pub const SpvOpSourceContinued = enum_SpvOp_.SpvOpSourceContinued;
pub const SpvOpSource = enum_SpvOp_.SpvOpSource;
pub const SpvOpSourceExtension = enum_SpvOp_.SpvOpSourceExtension;
pub const SpvOpName = enum_SpvOp_.SpvOpName;
pub const SpvOpMemberName = enum_SpvOp_.SpvOpMemberName;
pub const SpvOpString = enum_SpvOp_.SpvOpString;
pub const SpvOpLine = enum_SpvOp_.SpvOpLine;
pub const SpvOpExtension = enum_SpvOp_.SpvOpExtension;
pub const SpvOpExtInstImport = enum_SpvOp_.SpvOpExtInstImport;
pub const SpvOpExtInst = enum_SpvOp_.SpvOpExtInst;
pub const SpvOpMemoryModel = enum_SpvOp_.SpvOpMemoryModel;
pub const SpvOpEntryPoint = enum_SpvOp_.SpvOpEntryPoint;
pub const SpvOpExecutionMode = enum_SpvOp_.SpvOpExecutionMode;
pub const SpvOpCapability = enum_SpvOp_.SpvOpCapability;
pub const SpvOpTypeVoid = enum_SpvOp_.SpvOpTypeVoid;
pub const SpvOpTypeBool = enum_SpvOp_.SpvOpTypeBool;
pub const SpvOpTypeInt = enum_SpvOp_.SpvOpTypeInt;
pub const SpvOpTypeFloat = enum_SpvOp_.SpvOpTypeFloat;
pub const SpvOpTypeVector = enum_SpvOp_.SpvOpTypeVector;
pub const SpvOpTypeMatrix = enum_SpvOp_.SpvOpTypeMatrix;
pub const SpvOpTypeImage = enum_SpvOp_.SpvOpTypeImage;
pub const SpvOpTypeSampler = enum_SpvOp_.SpvOpTypeSampler;
pub const SpvOpTypeSampledImage = enum_SpvOp_.SpvOpTypeSampledImage;
pub const SpvOpTypeArray = enum_SpvOp_.SpvOpTypeArray;
pub const SpvOpTypeRuntimeArray = enum_SpvOp_.SpvOpTypeRuntimeArray;
pub const SpvOpTypeStruct = enum_SpvOp_.SpvOpTypeStruct;
pub const SpvOpTypeOpaque = enum_SpvOp_.SpvOpTypeOpaque;
pub const SpvOpTypePointer = enum_SpvOp_.SpvOpTypePointer;
pub const SpvOpTypeFunction = enum_SpvOp_.SpvOpTypeFunction;
pub const SpvOpTypeEvent = enum_SpvOp_.SpvOpTypeEvent;
pub const SpvOpTypeDeviceEvent = enum_SpvOp_.SpvOpTypeDeviceEvent;
pub const SpvOpTypeReserveId = enum_SpvOp_.SpvOpTypeReserveId;
pub const SpvOpTypeQueue = enum_SpvOp_.SpvOpTypeQueue;
pub const SpvOpTypePipe = enum_SpvOp_.SpvOpTypePipe;
pub const SpvOpTypeForwardPointer = enum_SpvOp_.SpvOpTypeForwardPointer;
pub const SpvOpConstantTrue = enum_SpvOp_.SpvOpConstantTrue;
pub const SpvOpConstantFalse = enum_SpvOp_.SpvOpConstantFalse;
pub const SpvOpConstant = enum_SpvOp_.SpvOpConstant;
pub const SpvOpConstantComposite = enum_SpvOp_.SpvOpConstantComposite;
pub const SpvOpConstantSampler = enum_SpvOp_.SpvOpConstantSampler;
pub const SpvOpConstantNull = enum_SpvOp_.SpvOpConstantNull;
pub const SpvOpSpecConstantTrue = enum_SpvOp_.SpvOpSpecConstantTrue;
pub const SpvOpSpecConstantFalse = enum_SpvOp_.SpvOpSpecConstantFalse;
pub const SpvOpSpecConstant = enum_SpvOp_.SpvOpSpecConstant;
pub const SpvOpSpecConstantComposite = enum_SpvOp_.SpvOpSpecConstantComposite;
pub const SpvOpSpecConstantOp = enum_SpvOp_.SpvOpSpecConstantOp;
pub const SpvOpFunction = enum_SpvOp_.SpvOpFunction;
pub const SpvOpFunctionParameter = enum_SpvOp_.SpvOpFunctionParameter;
pub const SpvOpFunctionEnd = enum_SpvOp_.SpvOpFunctionEnd;
pub const SpvOpFunctionCall = enum_SpvOp_.SpvOpFunctionCall;
pub const SpvOpVariable = enum_SpvOp_.SpvOpVariable;
pub const SpvOpImageTexelPointer = enum_SpvOp_.SpvOpImageTexelPointer;
pub const SpvOpLoad = enum_SpvOp_.SpvOpLoad;
pub const SpvOpStore = enum_SpvOp_.SpvOpStore;
pub const SpvOpCopyMemory = enum_SpvOp_.SpvOpCopyMemory;
pub const SpvOpCopyMemorySized = enum_SpvOp_.SpvOpCopyMemorySized;
pub const SpvOpAccessChain = enum_SpvOp_.SpvOpAccessChain;
pub const SpvOpInBoundsAccessChain = enum_SpvOp_.SpvOpInBoundsAccessChain;
pub const SpvOpPtrAccessChain = enum_SpvOp_.SpvOpPtrAccessChain;
pub const SpvOpArrayLength = enum_SpvOp_.SpvOpArrayLength;
pub const SpvOpGenericPtrMemSemantics = enum_SpvOp_.SpvOpGenericPtrMemSemantics;
pub const SpvOpInBoundsPtrAccessChain = enum_SpvOp_.SpvOpInBoundsPtrAccessChain;
pub const SpvOpDecorate = enum_SpvOp_.SpvOpDecorate;
pub const SpvOpMemberDecorate = enum_SpvOp_.SpvOpMemberDecorate;
pub const SpvOpDecorationGroup = enum_SpvOp_.SpvOpDecorationGroup;
pub const SpvOpGroupDecorate = enum_SpvOp_.SpvOpGroupDecorate;
pub const SpvOpGroupMemberDecorate = enum_SpvOp_.SpvOpGroupMemberDecorate;
pub const SpvOpVectorExtractDynamic = enum_SpvOp_.SpvOpVectorExtractDynamic;
pub const SpvOpVectorInsertDynamic = enum_SpvOp_.SpvOpVectorInsertDynamic;
pub const SpvOpVectorShuffle = enum_SpvOp_.SpvOpVectorShuffle;
pub const SpvOpCompositeConstruct = enum_SpvOp_.SpvOpCompositeConstruct;
pub const SpvOpCompositeExtract = enum_SpvOp_.SpvOpCompositeExtract;
pub const SpvOpCompositeInsert = enum_SpvOp_.SpvOpCompositeInsert;
pub const SpvOpCopyObject = enum_SpvOp_.SpvOpCopyObject;
pub const SpvOpTranspose = enum_SpvOp_.SpvOpTranspose;
pub const SpvOpSampledImage = enum_SpvOp_.SpvOpSampledImage;
pub const SpvOpImageSampleImplicitLod = enum_SpvOp_.SpvOpImageSampleImplicitLod;
pub const SpvOpImageSampleExplicitLod = enum_SpvOp_.SpvOpImageSampleExplicitLod;
pub const SpvOpImageSampleDrefImplicitLod = enum_SpvOp_.SpvOpImageSampleDrefImplicitLod;
pub const SpvOpImageSampleDrefExplicitLod = enum_SpvOp_.SpvOpImageSampleDrefExplicitLod;
pub const SpvOpImageSampleProjImplicitLod = enum_SpvOp_.SpvOpImageSampleProjImplicitLod;
pub const SpvOpImageSampleProjExplicitLod = enum_SpvOp_.SpvOpImageSampleProjExplicitLod;
pub const SpvOpImageSampleProjDrefImplicitLod = enum_SpvOp_.SpvOpImageSampleProjDrefImplicitLod;
pub const SpvOpImageSampleProjDrefExplicitLod = enum_SpvOp_.SpvOpImageSampleProjDrefExplicitLod;
pub const SpvOpImageFetch = enum_SpvOp_.SpvOpImageFetch;
pub const SpvOpImageGather = enum_SpvOp_.SpvOpImageGather;
pub const SpvOpImageDrefGather = enum_SpvOp_.SpvOpImageDrefGather;
pub const SpvOpImageRead = enum_SpvOp_.SpvOpImageRead;
pub const SpvOpImageWrite = enum_SpvOp_.SpvOpImageWrite;
pub const SpvOpImage = enum_SpvOp_.SpvOpImage;
pub const SpvOpImageQueryFormat = enum_SpvOp_.SpvOpImageQueryFormat;
pub const SpvOpImageQueryOrder = enum_SpvOp_.SpvOpImageQueryOrder;
pub const SpvOpImageQuerySizeLod = enum_SpvOp_.SpvOpImageQuerySizeLod;
pub const SpvOpImageQuerySize = enum_SpvOp_.SpvOpImageQuerySize;
pub const SpvOpImageQueryLod = enum_SpvOp_.SpvOpImageQueryLod;
pub const SpvOpImageQueryLevels = enum_SpvOp_.SpvOpImageQueryLevels;
pub const SpvOpImageQuerySamples = enum_SpvOp_.SpvOpImageQuerySamples;
pub const SpvOpConvertFToU = enum_SpvOp_.SpvOpConvertFToU;
pub const SpvOpConvertFToS = enum_SpvOp_.SpvOpConvertFToS;
pub const SpvOpConvertSToF = enum_SpvOp_.SpvOpConvertSToF;
pub const SpvOpConvertUToF = enum_SpvOp_.SpvOpConvertUToF;
pub const SpvOpUConvert = enum_SpvOp_.SpvOpUConvert;
pub const SpvOpSConvert = enum_SpvOp_.SpvOpSConvert;
pub const SpvOpFConvert = enum_SpvOp_.SpvOpFConvert;
pub const SpvOpQuantizeToF16 = enum_SpvOp_.SpvOpQuantizeToF16;
pub const SpvOpConvertPtrToU = enum_SpvOp_.SpvOpConvertPtrToU;
pub const SpvOpSatConvertSToU = enum_SpvOp_.SpvOpSatConvertSToU;
pub const SpvOpSatConvertUToS = enum_SpvOp_.SpvOpSatConvertUToS;
pub const SpvOpConvertUToPtr = enum_SpvOp_.SpvOpConvertUToPtr;
pub const SpvOpPtrCastToGeneric = enum_SpvOp_.SpvOpPtrCastToGeneric;
pub const SpvOpGenericCastToPtr = enum_SpvOp_.SpvOpGenericCastToPtr;
pub const SpvOpGenericCastToPtrExplicit = enum_SpvOp_.SpvOpGenericCastToPtrExplicit;
pub const SpvOpBitcast = enum_SpvOp_.SpvOpBitcast;
pub const SpvOpSNegate = enum_SpvOp_.SpvOpSNegate;
pub const SpvOpFNegate = enum_SpvOp_.SpvOpFNegate;
pub const SpvOpIAdd = enum_SpvOp_.SpvOpIAdd;
pub const SpvOpFAdd = enum_SpvOp_.SpvOpFAdd;
pub const SpvOpISub = enum_SpvOp_.SpvOpISub;
pub const SpvOpFSub = enum_SpvOp_.SpvOpFSub;
pub const SpvOpIMul = enum_SpvOp_.SpvOpIMul;
pub const SpvOpFMul = enum_SpvOp_.SpvOpFMul;
pub const SpvOpUDiv = enum_SpvOp_.SpvOpUDiv;
pub const SpvOpSDiv = enum_SpvOp_.SpvOpSDiv;
pub const SpvOpFDiv = enum_SpvOp_.SpvOpFDiv;
pub const SpvOpUMod = enum_SpvOp_.SpvOpUMod;
pub const SpvOpSRem = enum_SpvOp_.SpvOpSRem;
pub const SpvOpSMod = enum_SpvOp_.SpvOpSMod;
pub const SpvOpFRem = enum_SpvOp_.SpvOpFRem;
pub const SpvOpFMod = enum_SpvOp_.SpvOpFMod;
pub const SpvOpVectorTimesScalar = enum_SpvOp_.SpvOpVectorTimesScalar;
pub const SpvOpMatrixTimesScalar = enum_SpvOp_.SpvOpMatrixTimesScalar;
pub const SpvOpVectorTimesMatrix = enum_SpvOp_.SpvOpVectorTimesMatrix;
pub const SpvOpMatrixTimesVector = enum_SpvOp_.SpvOpMatrixTimesVector;
pub const SpvOpMatrixTimesMatrix = enum_SpvOp_.SpvOpMatrixTimesMatrix;
pub const SpvOpOuterProduct = enum_SpvOp_.SpvOpOuterProduct;
pub const SpvOpDot = enum_SpvOp_.SpvOpDot;
pub const SpvOpIAddCarry = enum_SpvOp_.SpvOpIAddCarry;
pub const SpvOpISubBorrow = enum_SpvOp_.SpvOpISubBorrow;
pub const SpvOpUMulExtended = enum_SpvOp_.SpvOpUMulExtended;
pub const SpvOpSMulExtended = enum_SpvOp_.SpvOpSMulExtended;
pub const SpvOpAny = enum_SpvOp_.SpvOpAny;
pub const SpvOpAll = enum_SpvOp_.SpvOpAll;
pub const SpvOpIsNan = enum_SpvOp_.SpvOpIsNan;
pub const SpvOpIsInf = enum_SpvOp_.SpvOpIsInf;
pub const SpvOpIsFinite = enum_SpvOp_.SpvOpIsFinite;
pub const SpvOpIsNormal = enum_SpvOp_.SpvOpIsNormal;
pub const SpvOpSignBitSet = enum_SpvOp_.SpvOpSignBitSet;
pub const SpvOpLessOrGreater = enum_SpvOp_.SpvOpLessOrGreater;
pub const SpvOpOrdered = enum_SpvOp_.SpvOpOrdered;
pub const SpvOpUnordered = enum_SpvOp_.SpvOpUnordered;
pub const SpvOpLogicalEqual = enum_SpvOp_.SpvOpLogicalEqual;
pub const SpvOpLogicalNotEqual = enum_SpvOp_.SpvOpLogicalNotEqual;
pub const SpvOpLogicalOr = enum_SpvOp_.SpvOpLogicalOr;
pub const SpvOpLogicalAnd = enum_SpvOp_.SpvOpLogicalAnd;
pub const SpvOpLogicalNot = enum_SpvOp_.SpvOpLogicalNot;
pub const SpvOpSelect = enum_SpvOp_.SpvOpSelect;
pub const SpvOpIEqual = enum_SpvOp_.SpvOpIEqual;
pub const SpvOpINotEqual = enum_SpvOp_.SpvOpINotEqual;
pub const SpvOpUGreaterThan = enum_SpvOp_.SpvOpUGreaterThan;
pub const SpvOpSGreaterThan = enum_SpvOp_.SpvOpSGreaterThan;
pub const SpvOpUGreaterThanEqual = enum_SpvOp_.SpvOpUGreaterThanEqual;
pub const SpvOpSGreaterThanEqual = enum_SpvOp_.SpvOpSGreaterThanEqual;
pub const SpvOpULessThan = enum_SpvOp_.SpvOpULessThan;
pub const SpvOpSLessThan = enum_SpvOp_.SpvOpSLessThan;
pub const SpvOpULessThanEqual = enum_SpvOp_.SpvOpULessThanEqual;
pub const SpvOpSLessThanEqual = enum_SpvOp_.SpvOpSLessThanEqual;
pub const SpvOpFOrdEqual = enum_SpvOp_.SpvOpFOrdEqual;
pub const SpvOpFUnordEqual = enum_SpvOp_.SpvOpFUnordEqual;
pub const SpvOpFOrdNotEqual = enum_SpvOp_.SpvOpFOrdNotEqual;
pub const SpvOpFUnordNotEqual = enum_SpvOp_.SpvOpFUnordNotEqual;
pub const SpvOpFOrdLessThan = enum_SpvOp_.SpvOpFOrdLessThan;
pub const SpvOpFUnordLessThan = enum_SpvOp_.SpvOpFUnordLessThan;
pub const SpvOpFOrdGreaterThan = enum_SpvOp_.SpvOpFOrdGreaterThan;
pub const SpvOpFUnordGreaterThan = enum_SpvOp_.SpvOpFUnordGreaterThan;
pub const SpvOpFOrdLessThanEqual = enum_SpvOp_.SpvOpFOrdLessThanEqual;
pub const SpvOpFUnordLessThanEqual = enum_SpvOp_.SpvOpFUnordLessThanEqual;
pub const SpvOpFOrdGreaterThanEqual = enum_SpvOp_.SpvOpFOrdGreaterThanEqual;
pub const SpvOpFUnordGreaterThanEqual = enum_SpvOp_.SpvOpFUnordGreaterThanEqual;
pub const SpvOpShiftRightLogical = enum_SpvOp_.SpvOpShiftRightLogical;
pub const SpvOpShiftRightArithmetic = enum_SpvOp_.SpvOpShiftRightArithmetic;
pub const SpvOpShiftLeftLogical = enum_SpvOp_.SpvOpShiftLeftLogical;
pub const SpvOpBitwiseOr = enum_SpvOp_.SpvOpBitwiseOr;
pub const SpvOpBitwiseXor = enum_SpvOp_.SpvOpBitwiseXor;
pub const SpvOpBitwiseAnd = enum_SpvOp_.SpvOpBitwiseAnd;
pub const SpvOpNot = enum_SpvOp_.SpvOpNot;
pub const SpvOpBitFieldInsert = enum_SpvOp_.SpvOpBitFieldInsert;
pub const SpvOpBitFieldSExtract = enum_SpvOp_.SpvOpBitFieldSExtract;
pub const SpvOpBitFieldUExtract = enum_SpvOp_.SpvOpBitFieldUExtract;
pub const SpvOpBitReverse = enum_SpvOp_.SpvOpBitReverse;
pub const SpvOpBitCount = enum_SpvOp_.SpvOpBitCount;
pub const SpvOpDPdx = enum_SpvOp_.SpvOpDPdx;
pub const SpvOpDPdy = enum_SpvOp_.SpvOpDPdy;
pub const SpvOpFwidth = enum_SpvOp_.SpvOpFwidth;
pub const SpvOpDPdxFine = enum_SpvOp_.SpvOpDPdxFine;
pub const SpvOpDPdyFine = enum_SpvOp_.SpvOpDPdyFine;
pub const SpvOpFwidthFine = enum_SpvOp_.SpvOpFwidthFine;
pub const SpvOpDPdxCoarse = enum_SpvOp_.SpvOpDPdxCoarse;
pub const SpvOpDPdyCoarse = enum_SpvOp_.SpvOpDPdyCoarse;
pub const SpvOpFwidthCoarse = enum_SpvOp_.SpvOpFwidthCoarse;
pub const SpvOpEmitVertex = enum_SpvOp_.SpvOpEmitVertex;
pub const SpvOpEndPrimitive = enum_SpvOp_.SpvOpEndPrimitive;
pub const SpvOpEmitStreamVertex = enum_SpvOp_.SpvOpEmitStreamVertex;
pub const SpvOpEndStreamPrimitive = enum_SpvOp_.SpvOpEndStreamPrimitive;
pub const SpvOpControlBarrier = enum_SpvOp_.SpvOpControlBarrier;
pub const SpvOpMemoryBarrier = enum_SpvOp_.SpvOpMemoryBarrier;
pub const SpvOpAtomicLoad = enum_SpvOp_.SpvOpAtomicLoad;
pub const SpvOpAtomicStore = enum_SpvOp_.SpvOpAtomicStore;
pub const SpvOpAtomicExchange = enum_SpvOp_.SpvOpAtomicExchange;
pub const SpvOpAtomicCompareExchange = enum_SpvOp_.SpvOpAtomicCompareExchange;
pub const SpvOpAtomicCompareExchangeWeak = enum_SpvOp_.SpvOpAtomicCompareExchangeWeak;
pub const SpvOpAtomicIIncrement = enum_SpvOp_.SpvOpAtomicIIncrement;
pub const SpvOpAtomicIDecrement = enum_SpvOp_.SpvOpAtomicIDecrement;
pub const SpvOpAtomicIAdd = enum_SpvOp_.SpvOpAtomicIAdd;
pub const SpvOpAtomicISub = enum_SpvOp_.SpvOpAtomicISub;
pub const SpvOpAtomicSMin = enum_SpvOp_.SpvOpAtomicSMin;
pub const SpvOpAtomicUMin = enum_SpvOp_.SpvOpAtomicUMin;
pub const SpvOpAtomicSMax = enum_SpvOp_.SpvOpAtomicSMax;
pub const SpvOpAtomicUMax = enum_SpvOp_.SpvOpAtomicUMax;
pub const SpvOpAtomicAnd = enum_SpvOp_.SpvOpAtomicAnd;
pub const SpvOpAtomicOr = enum_SpvOp_.SpvOpAtomicOr;
pub const SpvOpAtomicXor = enum_SpvOp_.SpvOpAtomicXor;
pub const SpvOpPhi = enum_SpvOp_.SpvOpPhi;
pub const SpvOpLoopMerge = enum_SpvOp_.SpvOpLoopMerge;
pub const SpvOpSelectionMerge = enum_SpvOp_.SpvOpSelectionMerge;
pub const SpvOpLabel = enum_SpvOp_.SpvOpLabel;
pub const SpvOpBranch = enum_SpvOp_.SpvOpBranch;
pub const SpvOpBranchConditional = enum_SpvOp_.SpvOpBranchConditional;
pub const SpvOpSwitch = enum_SpvOp_.SpvOpSwitch;
pub const SpvOpKill = enum_SpvOp_.SpvOpKill;
pub const SpvOpReturn = enum_SpvOp_.SpvOpReturn;
pub const SpvOpReturnValue = enum_SpvOp_.SpvOpReturnValue;
pub const SpvOpUnreachable = enum_SpvOp_.SpvOpUnreachable;
pub const SpvOpLifetimeStart = enum_SpvOp_.SpvOpLifetimeStart;
pub const SpvOpLifetimeStop = enum_SpvOp_.SpvOpLifetimeStop;
pub const SpvOpGroupAsyncCopy = enum_SpvOp_.SpvOpGroupAsyncCopy;
pub const SpvOpGroupWaitEvents = enum_SpvOp_.SpvOpGroupWaitEvents;
pub const SpvOpGroupAll = enum_SpvOp_.SpvOpGroupAll;
pub const SpvOpGroupAny = enum_SpvOp_.SpvOpGroupAny;
pub const SpvOpGroupBroadcast = enum_SpvOp_.SpvOpGroupBroadcast;
pub const SpvOpGroupIAdd = enum_SpvOp_.SpvOpGroupIAdd;
pub const SpvOpGroupFAdd = enum_SpvOp_.SpvOpGroupFAdd;
pub const SpvOpGroupFMin = enum_SpvOp_.SpvOpGroupFMin;
pub const SpvOpGroupUMin = enum_SpvOp_.SpvOpGroupUMin;
pub const SpvOpGroupSMin = enum_SpvOp_.SpvOpGroupSMin;
pub const SpvOpGroupFMax = enum_SpvOp_.SpvOpGroupFMax;
pub const SpvOpGroupUMax = enum_SpvOp_.SpvOpGroupUMax;
pub const SpvOpGroupSMax = enum_SpvOp_.SpvOpGroupSMax;
pub const SpvOpReadPipe = enum_SpvOp_.SpvOpReadPipe;
pub const SpvOpWritePipe = enum_SpvOp_.SpvOpWritePipe;
pub const SpvOpReservedReadPipe = enum_SpvOp_.SpvOpReservedReadPipe;
pub const SpvOpReservedWritePipe = enum_SpvOp_.SpvOpReservedWritePipe;
pub const SpvOpReserveReadPipePackets = enum_SpvOp_.SpvOpReserveReadPipePackets;
pub const SpvOpReserveWritePipePackets = enum_SpvOp_.SpvOpReserveWritePipePackets;
pub const SpvOpCommitReadPipe = enum_SpvOp_.SpvOpCommitReadPipe;
pub const SpvOpCommitWritePipe = enum_SpvOp_.SpvOpCommitWritePipe;
pub const SpvOpIsValidReserveId = enum_SpvOp_.SpvOpIsValidReserveId;
pub const SpvOpGetNumPipePackets = enum_SpvOp_.SpvOpGetNumPipePackets;
pub const SpvOpGetMaxPipePackets = enum_SpvOp_.SpvOpGetMaxPipePackets;
pub const SpvOpGroupReserveReadPipePackets = enum_SpvOp_.SpvOpGroupReserveReadPipePackets;
pub const SpvOpGroupReserveWritePipePackets = enum_SpvOp_.SpvOpGroupReserveWritePipePackets;
pub const SpvOpGroupCommitReadPipe = enum_SpvOp_.SpvOpGroupCommitReadPipe;
pub const SpvOpGroupCommitWritePipe = enum_SpvOp_.SpvOpGroupCommitWritePipe;
pub const SpvOpEnqueueMarker = enum_SpvOp_.SpvOpEnqueueMarker;
pub const SpvOpEnqueueKernel = enum_SpvOp_.SpvOpEnqueueKernel;
pub const SpvOpGetKernelNDrangeSubGroupCount = enum_SpvOp_.SpvOpGetKernelNDrangeSubGroupCount;
pub const SpvOpGetKernelNDrangeMaxSubGroupSize = enum_SpvOp_.SpvOpGetKernelNDrangeMaxSubGroupSize;
pub const SpvOpGetKernelWorkGroupSize = enum_SpvOp_.SpvOpGetKernelWorkGroupSize;
pub const SpvOpGetKernelPreferredWorkGroupSizeMultiple = enum_SpvOp_.SpvOpGetKernelPreferredWorkGroupSizeMultiple;
pub const SpvOpRetainEvent = enum_SpvOp_.SpvOpRetainEvent;
pub const SpvOpReleaseEvent = enum_SpvOp_.SpvOpReleaseEvent;
pub const SpvOpCreateUserEvent = enum_SpvOp_.SpvOpCreateUserEvent;
pub const SpvOpIsValidEvent = enum_SpvOp_.SpvOpIsValidEvent;
pub const SpvOpSetUserEventStatus = enum_SpvOp_.SpvOpSetUserEventStatus;
pub const SpvOpCaptureEventProfilingInfo = enum_SpvOp_.SpvOpCaptureEventProfilingInfo;
pub const SpvOpGetDefaultQueue = enum_SpvOp_.SpvOpGetDefaultQueue;
pub const SpvOpBuildNDRange = enum_SpvOp_.SpvOpBuildNDRange;
pub const SpvOpImageSparseSampleImplicitLod = enum_SpvOp_.SpvOpImageSparseSampleImplicitLod;
pub const SpvOpImageSparseSampleExplicitLod = enum_SpvOp_.SpvOpImageSparseSampleExplicitLod;
pub const SpvOpImageSparseSampleDrefImplicitLod = enum_SpvOp_.SpvOpImageSparseSampleDrefImplicitLod;
pub const SpvOpImageSparseSampleDrefExplicitLod = enum_SpvOp_.SpvOpImageSparseSampleDrefExplicitLod;
pub const SpvOpImageSparseSampleProjImplicitLod = enum_SpvOp_.SpvOpImageSparseSampleProjImplicitLod;
pub const SpvOpImageSparseSampleProjExplicitLod = enum_SpvOp_.SpvOpImageSparseSampleProjExplicitLod;
pub const SpvOpImageSparseSampleProjDrefImplicitLod = enum_SpvOp_.SpvOpImageSparseSampleProjDrefImplicitLod;
pub const SpvOpImageSparseSampleProjDrefExplicitLod = enum_SpvOp_.SpvOpImageSparseSampleProjDrefExplicitLod;
pub const SpvOpImageSparseFetch = enum_SpvOp_.SpvOpImageSparseFetch;
pub const SpvOpImageSparseGather = enum_SpvOp_.SpvOpImageSparseGather;
pub const SpvOpImageSparseDrefGather = enum_SpvOp_.SpvOpImageSparseDrefGather;
pub const SpvOpImageSparseTexelsResident = enum_SpvOp_.SpvOpImageSparseTexelsResident;
pub const SpvOpNoLine = enum_SpvOp_.SpvOpNoLine;
pub const SpvOpAtomicFlagTestAndSet = enum_SpvOp_.SpvOpAtomicFlagTestAndSet;
pub const SpvOpAtomicFlagClear = enum_SpvOp_.SpvOpAtomicFlagClear;
pub const SpvOpImageSparseRead = enum_SpvOp_.SpvOpImageSparseRead;
pub const SpvOpSizeOf = enum_SpvOp_.SpvOpSizeOf;
pub const SpvOpTypePipeStorage = enum_SpvOp_.SpvOpTypePipeStorage;
pub const SpvOpConstantPipeStorage = enum_SpvOp_.SpvOpConstantPipeStorage;
pub const SpvOpCreatePipeFromPipeStorage = enum_SpvOp_.SpvOpCreatePipeFromPipeStorage;
pub const SpvOpGetKernelLocalSizeForSubgroupCount = enum_SpvOp_.SpvOpGetKernelLocalSizeForSubgroupCount;
pub const SpvOpGetKernelMaxNumSubgroups = enum_SpvOp_.SpvOpGetKernelMaxNumSubgroups;
pub const SpvOpTypeNamedBarrier = enum_SpvOp_.SpvOpTypeNamedBarrier;
pub const SpvOpNamedBarrierInitialize = enum_SpvOp_.SpvOpNamedBarrierInitialize;
pub const SpvOpMemoryNamedBarrier = enum_SpvOp_.SpvOpMemoryNamedBarrier;
pub const SpvOpModuleProcessed = enum_SpvOp_.SpvOpModuleProcessed;
pub const SpvOpExecutionModeId = enum_SpvOp_.SpvOpExecutionModeId;
pub const SpvOpDecorateId = enum_SpvOp_.SpvOpDecorateId;
pub const SpvOpGroupNonUniformElect = enum_SpvOp_.SpvOpGroupNonUniformElect;
pub const SpvOpGroupNonUniformAll = enum_SpvOp_.SpvOpGroupNonUniformAll;
pub const SpvOpGroupNonUniformAny = enum_SpvOp_.SpvOpGroupNonUniformAny;
pub const SpvOpGroupNonUniformAllEqual = enum_SpvOp_.SpvOpGroupNonUniformAllEqual;
pub const SpvOpGroupNonUniformBroadcast = enum_SpvOp_.SpvOpGroupNonUniformBroadcast;
pub const SpvOpGroupNonUniformBroadcastFirst = enum_SpvOp_.SpvOpGroupNonUniformBroadcastFirst;
pub const SpvOpGroupNonUniformBallot = enum_SpvOp_.SpvOpGroupNonUniformBallot;
pub const SpvOpGroupNonUniformInverseBallot = enum_SpvOp_.SpvOpGroupNonUniformInverseBallot;
pub const SpvOpGroupNonUniformBallotBitExtract = enum_SpvOp_.SpvOpGroupNonUniformBallotBitExtract;
pub const SpvOpGroupNonUniformBallotBitCount = enum_SpvOp_.SpvOpGroupNonUniformBallotBitCount;
pub const SpvOpGroupNonUniformBallotFindLSB = enum_SpvOp_.SpvOpGroupNonUniformBallotFindLSB;
pub const SpvOpGroupNonUniformBallotFindMSB = enum_SpvOp_.SpvOpGroupNonUniformBallotFindMSB;
pub const SpvOpGroupNonUniformShuffle = enum_SpvOp_.SpvOpGroupNonUniformShuffle;
pub const SpvOpGroupNonUniformShuffleXor = enum_SpvOp_.SpvOpGroupNonUniformShuffleXor;
pub const SpvOpGroupNonUniformShuffleUp = enum_SpvOp_.SpvOpGroupNonUniformShuffleUp;
pub const SpvOpGroupNonUniformShuffleDown = enum_SpvOp_.SpvOpGroupNonUniformShuffleDown;
pub const SpvOpGroupNonUniformIAdd = enum_SpvOp_.SpvOpGroupNonUniformIAdd;
pub const SpvOpGroupNonUniformFAdd = enum_SpvOp_.SpvOpGroupNonUniformFAdd;
pub const SpvOpGroupNonUniformIMul = enum_SpvOp_.SpvOpGroupNonUniformIMul;
pub const SpvOpGroupNonUniformFMul = enum_SpvOp_.SpvOpGroupNonUniformFMul;
pub const SpvOpGroupNonUniformSMin = enum_SpvOp_.SpvOpGroupNonUniformSMin;
pub const SpvOpGroupNonUniformUMin = enum_SpvOp_.SpvOpGroupNonUniformUMin;
pub const SpvOpGroupNonUniformFMin = enum_SpvOp_.SpvOpGroupNonUniformFMin;
pub const SpvOpGroupNonUniformSMax = enum_SpvOp_.SpvOpGroupNonUniformSMax;
pub const SpvOpGroupNonUniformUMax = enum_SpvOp_.SpvOpGroupNonUniformUMax;
pub const SpvOpGroupNonUniformFMax = enum_SpvOp_.SpvOpGroupNonUniformFMax;
pub const SpvOpGroupNonUniformBitwiseAnd = enum_SpvOp_.SpvOpGroupNonUniformBitwiseAnd;
pub const SpvOpGroupNonUniformBitwiseOr = enum_SpvOp_.SpvOpGroupNonUniformBitwiseOr;
pub const SpvOpGroupNonUniformBitwiseXor = enum_SpvOp_.SpvOpGroupNonUniformBitwiseXor;
pub const SpvOpGroupNonUniformLogicalAnd = enum_SpvOp_.SpvOpGroupNonUniformLogicalAnd;
pub const SpvOpGroupNonUniformLogicalOr = enum_SpvOp_.SpvOpGroupNonUniformLogicalOr;
pub const SpvOpGroupNonUniformLogicalXor = enum_SpvOp_.SpvOpGroupNonUniformLogicalXor;
pub const SpvOpGroupNonUniformQuadBroadcast = enum_SpvOp_.SpvOpGroupNonUniformQuadBroadcast;
pub const SpvOpGroupNonUniformQuadSwap = enum_SpvOp_.SpvOpGroupNonUniformQuadSwap;
pub const SpvOpCopyLogical = enum_SpvOp_.SpvOpCopyLogical;
pub const SpvOpPtrEqual = enum_SpvOp_.SpvOpPtrEqual;
pub const SpvOpPtrNotEqual = enum_SpvOp_.SpvOpPtrNotEqual;
pub const SpvOpPtrDiff = enum_SpvOp_.SpvOpPtrDiff;
pub const SpvOpSubgroupBallotKHR = enum_SpvOp_.SpvOpSubgroupBallotKHR;
pub const SpvOpSubgroupFirstInvocationKHR = enum_SpvOp_.SpvOpSubgroupFirstInvocationKHR;
pub const SpvOpSubgroupAllKHR = enum_SpvOp_.SpvOpSubgroupAllKHR;
pub const SpvOpSubgroupAnyKHR = enum_SpvOp_.SpvOpSubgroupAnyKHR;
pub const SpvOpSubgroupAllEqualKHR = enum_SpvOp_.SpvOpSubgroupAllEqualKHR;
pub const SpvOpSubgroupReadInvocationKHR = enum_SpvOp_.SpvOpSubgroupReadInvocationKHR;
pub const SpvOpGroupIAddNonUniformAMD = enum_SpvOp_.SpvOpGroupIAddNonUniformAMD;
pub const SpvOpGroupFAddNonUniformAMD = enum_SpvOp_.SpvOpGroupFAddNonUniformAMD;
pub const SpvOpGroupFMinNonUniformAMD = enum_SpvOp_.SpvOpGroupFMinNonUniformAMD;
pub const SpvOpGroupUMinNonUniformAMD = enum_SpvOp_.SpvOpGroupUMinNonUniformAMD;
pub const SpvOpGroupSMinNonUniformAMD = enum_SpvOp_.SpvOpGroupSMinNonUniformAMD;
pub const SpvOpGroupFMaxNonUniformAMD = enum_SpvOp_.SpvOpGroupFMaxNonUniformAMD;
pub const SpvOpGroupUMaxNonUniformAMD = enum_SpvOp_.SpvOpGroupUMaxNonUniformAMD;
pub const SpvOpGroupSMaxNonUniformAMD = enum_SpvOp_.SpvOpGroupSMaxNonUniformAMD;
pub const SpvOpFragmentMaskFetchAMD = enum_SpvOp_.SpvOpFragmentMaskFetchAMD;
pub const SpvOpFragmentFetchAMD = enum_SpvOp_.SpvOpFragmentFetchAMD;
pub const SpvOpReadClockKHR = enum_SpvOp_.SpvOpReadClockKHR;
pub const SpvOpImageSampleFootprintNV = enum_SpvOp_.SpvOpImageSampleFootprintNV;
pub const SpvOpGroupNonUniformPartitionNV = enum_SpvOp_.SpvOpGroupNonUniformPartitionNV;
pub const SpvOpWritePackedPrimitiveIndices4x8NV = enum_SpvOp_.SpvOpWritePackedPrimitiveIndices4x8NV;
pub const SpvOpReportIntersectionNV = enum_SpvOp_.SpvOpReportIntersectionNV;
pub const SpvOpIgnoreIntersectionNV = enum_SpvOp_.SpvOpIgnoreIntersectionNV;
pub const SpvOpTerminateRayNV = enum_SpvOp_.SpvOpTerminateRayNV;
pub const SpvOpTraceNV = enum_SpvOp_.SpvOpTraceNV;
pub const SpvOpTypeAccelerationStructureNV = enum_SpvOp_.SpvOpTypeAccelerationStructureNV;
pub const SpvOpExecuteCallableNV = enum_SpvOp_.SpvOpExecuteCallableNV;
pub const SpvOpTypeCooperativeMatrixNV = enum_SpvOp_.SpvOpTypeCooperativeMatrixNV;
pub const SpvOpCooperativeMatrixLoadNV = enum_SpvOp_.SpvOpCooperativeMatrixLoadNV;
pub const SpvOpCooperativeMatrixStoreNV = enum_SpvOp_.SpvOpCooperativeMatrixStoreNV;
pub const SpvOpCooperativeMatrixMulAddNV = enum_SpvOp_.SpvOpCooperativeMatrixMulAddNV;
pub const SpvOpCooperativeMatrixLengthNV = enum_SpvOp_.SpvOpCooperativeMatrixLengthNV;
pub const SpvOpBeginInvocationInterlockEXT = enum_SpvOp_.SpvOpBeginInvocationInterlockEXT;
pub const SpvOpEndInvocationInterlockEXT = enum_SpvOp_.SpvOpEndInvocationInterlockEXT;
pub const SpvOpDemoteToHelperInvocationEXT = enum_SpvOp_.SpvOpDemoteToHelperInvocationEXT;
pub const SpvOpIsHelperInvocationEXT = enum_SpvOp_.SpvOpIsHelperInvocationEXT;
pub const SpvOpSubgroupShuffleINTEL = enum_SpvOp_.SpvOpSubgroupShuffleINTEL;
pub const SpvOpSubgroupShuffleDownINTEL = enum_SpvOp_.SpvOpSubgroupShuffleDownINTEL;
pub const SpvOpSubgroupShuffleUpINTEL = enum_SpvOp_.SpvOpSubgroupShuffleUpINTEL;
pub const SpvOpSubgroupShuffleXorINTEL = enum_SpvOp_.SpvOpSubgroupShuffleXorINTEL;
pub const SpvOpSubgroupBlockReadINTEL = enum_SpvOp_.SpvOpSubgroupBlockReadINTEL;
pub const SpvOpSubgroupBlockWriteINTEL = enum_SpvOp_.SpvOpSubgroupBlockWriteINTEL;
pub const SpvOpSubgroupImageBlockReadINTEL = enum_SpvOp_.SpvOpSubgroupImageBlockReadINTEL;
pub const SpvOpSubgroupImageBlockWriteINTEL = enum_SpvOp_.SpvOpSubgroupImageBlockWriteINTEL;
pub const SpvOpSubgroupImageMediaBlockReadINTEL = enum_SpvOp_.SpvOpSubgroupImageMediaBlockReadINTEL;
pub const SpvOpSubgroupImageMediaBlockWriteINTEL = enum_SpvOp_.SpvOpSubgroupImageMediaBlockWriteINTEL;
pub const SpvOpUCountLeadingZerosINTEL = enum_SpvOp_.SpvOpUCountLeadingZerosINTEL;
pub const SpvOpUCountTrailingZerosINTEL = enum_SpvOp_.SpvOpUCountTrailingZerosINTEL;
pub const SpvOpAbsISubINTEL = enum_SpvOp_.SpvOpAbsISubINTEL;
pub const SpvOpAbsUSubINTEL = enum_SpvOp_.SpvOpAbsUSubINTEL;
pub const SpvOpIAddSatINTEL = enum_SpvOp_.SpvOpIAddSatINTEL;
pub const SpvOpUAddSatINTEL = enum_SpvOp_.SpvOpUAddSatINTEL;
pub const SpvOpIAverageINTEL = enum_SpvOp_.SpvOpIAverageINTEL;
pub const SpvOpUAverageINTEL = enum_SpvOp_.SpvOpUAverageINTEL;
pub const SpvOpIAverageRoundedINTEL = enum_SpvOp_.SpvOpIAverageRoundedINTEL;
pub const SpvOpUAverageRoundedINTEL = enum_SpvOp_.SpvOpUAverageRoundedINTEL;
pub const SpvOpISubSatINTEL = enum_SpvOp_.SpvOpISubSatINTEL;
pub const SpvOpUSubSatINTEL = enum_SpvOp_.SpvOpUSubSatINTEL;
pub const SpvOpIMul32x16INTEL = enum_SpvOp_.SpvOpIMul32x16INTEL;
pub const SpvOpUMul32x16INTEL = enum_SpvOp_.SpvOpUMul32x16INTEL;
pub const SpvOpDecorateString = enum_SpvOp_.SpvOpDecorateString;
pub const SpvOpDecorateStringGOOGLE = enum_SpvOp_.SpvOpDecorateStringGOOGLE;
pub const SpvOpMemberDecorateString = enum_SpvOp_.SpvOpMemberDecorateString;
pub const SpvOpMemberDecorateStringGOOGLE = enum_SpvOp_.SpvOpMemberDecorateStringGOOGLE;
pub const SpvOpVmeImageINTEL = enum_SpvOp_.SpvOpVmeImageINTEL;
pub const SpvOpTypeVmeImageINTEL = enum_SpvOp_.SpvOpTypeVmeImageINTEL;
pub const SpvOpTypeAvcImePayloadINTEL = enum_SpvOp_.SpvOpTypeAvcImePayloadINTEL;
pub const SpvOpTypeAvcRefPayloadINTEL = enum_SpvOp_.SpvOpTypeAvcRefPayloadINTEL;
pub const SpvOpTypeAvcSicPayloadINTEL = enum_SpvOp_.SpvOpTypeAvcSicPayloadINTEL;
pub const SpvOpTypeAvcMcePayloadINTEL = enum_SpvOp_.SpvOpTypeAvcMcePayloadINTEL;
pub const SpvOpTypeAvcMceResultINTEL = enum_SpvOp_.SpvOpTypeAvcMceResultINTEL;
pub const SpvOpTypeAvcImeResultINTEL = enum_SpvOp_.SpvOpTypeAvcImeResultINTEL;
pub const SpvOpTypeAvcImeResultSingleReferenceStreamoutINTEL = enum_SpvOp_.SpvOpTypeAvcImeResultSingleReferenceStreamoutINTEL;
pub const SpvOpTypeAvcImeResultDualReferenceStreamoutINTEL = enum_SpvOp_.SpvOpTypeAvcImeResultDualReferenceStreamoutINTEL;
pub const SpvOpTypeAvcImeSingleReferenceStreaminINTEL = enum_SpvOp_.SpvOpTypeAvcImeSingleReferenceStreaminINTEL;
pub const SpvOpTypeAvcImeDualReferenceStreaminINTEL = enum_SpvOp_.SpvOpTypeAvcImeDualReferenceStreaminINTEL;
pub const SpvOpTypeAvcRefResultINTEL = enum_SpvOp_.SpvOpTypeAvcRefResultINTEL;
pub const SpvOpTypeAvcSicResultINTEL = enum_SpvOp_.SpvOpTypeAvcSicResultINTEL;
pub const SpvOpSubgroupAvcMceGetDefaultInterBaseMultiReferencePenaltyINTEL = enum_SpvOp_.SpvOpSubgroupAvcMceGetDefaultInterBaseMultiReferencePenaltyINTEL;
pub const SpvOpSubgroupAvcMceSetInterBaseMultiReferencePenaltyINTEL = enum_SpvOp_.SpvOpSubgroupAvcMceSetInterBaseMultiReferencePenaltyINTEL;
pub const SpvOpSubgroupAvcMceGetDefaultInterShapePenaltyINTEL = enum_SpvOp_.SpvOpSubgroupAvcMceGetDefaultInterShapePenaltyINTEL;
pub const SpvOpSubgroupAvcMceSetInterShapePenaltyINTEL = enum_SpvOp_.SpvOpSubgroupAvcMceSetInterShapePenaltyINTEL;
pub const SpvOpSubgroupAvcMceGetDefaultInterDirectionPenaltyINTEL = enum_SpvOp_.SpvOpSubgroupAvcMceGetDefaultInterDirectionPenaltyINTEL;
pub const SpvOpSubgroupAvcMceSetInterDirectionPenaltyINTEL = enum_SpvOp_.SpvOpSubgroupAvcMceSetInterDirectionPenaltyINTEL;
pub const SpvOpSubgroupAvcMceGetDefaultIntraLumaShapePenaltyINTEL = enum_SpvOp_.SpvOpSubgroupAvcMceGetDefaultIntraLumaShapePenaltyINTEL;
pub const SpvOpSubgroupAvcMceGetDefaultInterMotionVectorCostTableINTEL = enum_SpvOp_.SpvOpSubgroupAvcMceGetDefaultInterMotionVectorCostTableINTEL;
pub const SpvOpSubgroupAvcMceGetDefaultHighPenaltyCostTableINTEL = enum_SpvOp_.SpvOpSubgroupAvcMceGetDefaultHighPenaltyCostTableINTEL;
pub const SpvOpSubgroupAvcMceGetDefaultMediumPenaltyCostTableINTEL = enum_SpvOp_.SpvOpSubgroupAvcMceGetDefaultMediumPenaltyCostTableINTEL;
pub const SpvOpSubgroupAvcMceGetDefaultLowPenaltyCostTableINTEL = enum_SpvOp_.SpvOpSubgroupAvcMceGetDefaultLowPenaltyCostTableINTEL;
pub const SpvOpSubgroupAvcMceSetMotionVectorCostFunctionINTEL = enum_SpvOp_.SpvOpSubgroupAvcMceSetMotionVectorCostFunctionINTEL;
pub const SpvOpSubgroupAvcMceGetDefaultIntraLumaModePenaltyINTEL = enum_SpvOp_.SpvOpSubgroupAvcMceGetDefaultIntraLumaModePenaltyINTEL;
pub const SpvOpSubgroupAvcMceGetDefaultNonDcLumaIntraPenaltyINTEL = enum_SpvOp_.SpvOpSubgroupAvcMceGetDefaultNonDcLumaIntraPenaltyINTEL;
pub const SpvOpSubgroupAvcMceGetDefaultIntraChromaModeBasePenaltyINTEL = enum_SpvOp_.SpvOpSubgroupAvcMceGetDefaultIntraChromaModeBasePenaltyINTEL;
pub const SpvOpSubgroupAvcMceSetAcOnlyHaarINTEL = enum_SpvOp_.SpvOpSubgroupAvcMceSetAcOnlyHaarINTEL;
pub const SpvOpSubgroupAvcMceSetSourceInterlacedFieldPolarityINTEL = enum_SpvOp_.SpvOpSubgroupAvcMceSetSourceInterlacedFieldPolarityINTEL;
pub const SpvOpSubgroupAvcMceSetSingleReferenceInterlacedFieldPolarityINTEL = enum_SpvOp_.SpvOpSubgroupAvcMceSetSingleReferenceInterlacedFieldPolarityINTEL;
pub const SpvOpSubgroupAvcMceSetDualReferenceInterlacedFieldPolaritiesINTEL = enum_SpvOp_.SpvOpSubgroupAvcMceSetDualReferenceInterlacedFieldPolaritiesINTEL;
pub const SpvOpSubgroupAvcMceConvertToImePayloadINTEL = enum_SpvOp_.SpvOpSubgroupAvcMceConvertToImePayloadINTEL;
pub const SpvOpSubgroupAvcMceConvertToImeResultINTEL = enum_SpvOp_.SpvOpSubgroupAvcMceConvertToImeResultINTEL;
pub const SpvOpSubgroupAvcMceConvertToRefPayloadINTEL = enum_SpvOp_.SpvOpSubgroupAvcMceConvertToRefPayloadINTEL;
pub const SpvOpSubgroupAvcMceConvertToRefResultINTEL = enum_SpvOp_.SpvOpSubgroupAvcMceConvertToRefResultINTEL;
pub const SpvOpSubgroupAvcMceConvertToSicPayloadINTEL = enum_SpvOp_.SpvOpSubgroupAvcMceConvertToSicPayloadINTEL;
pub const SpvOpSubgroupAvcMceConvertToSicResultINTEL = enum_SpvOp_.SpvOpSubgroupAvcMceConvertToSicResultINTEL;
pub const SpvOpSubgroupAvcMceGetMotionVectorsINTEL = enum_SpvOp_.SpvOpSubgroupAvcMceGetMotionVectorsINTEL;
pub const SpvOpSubgroupAvcMceGetInterDistortionsINTEL = enum_SpvOp_.SpvOpSubgroupAvcMceGetInterDistortionsINTEL;
pub const SpvOpSubgroupAvcMceGetBestInterDistortionsINTEL = enum_SpvOp_.SpvOpSubgroupAvcMceGetBestInterDistortionsINTEL;
pub const SpvOpSubgroupAvcMceGetInterMajorShapeINTEL = enum_SpvOp_.SpvOpSubgroupAvcMceGetInterMajorShapeINTEL;
pub const SpvOpSubgroupAvcMceGetInterMinorShapeINTEL = enum_SpvOp_.SpvOpSubgroupAvcMceGetInterMinorShapeINTEL;
pub const SpvOpSubgroupAvcMceGetInterDirectionsINTEL = enum_SpvOp_.SpvOpSubgroupAvcMceGetInterDirectionsINTEL;
pub const SpvOpSubgroupAvcMceGetInterMotionVectorCountINTEL = enum_SpvOp_.SpvOpSubgroupAvcMceGetInterMotionVectorCountINTEL;
pub const SpvOpSubgroupAvcMceGetInterReferenceIdsINTEL = enum_SpvOp_.SpvOpSubgroupAvcMceGetInterReferenceIdsINTEL;
pub const SpvOpSubgroupAvcMceGetInterReferenceInterlacedFieldPolaritiesINTEL = enum_SpvOp_.SpvOpSubgroupAvcMceGetInterReferenceInterlacedFieldPolaritiesINTEL;
pub const SpvOpSubgroupAvcImeInitializeINTEL = enum_SpvOp_.SpvOpSubgroupAvcImeInitializeINTEL;
pub const SpvOpSubgroupAvcImeSetSingleReferenceINTEL = enum_SpvOp_.SpvOpSubgroupAvcImeSetSingleReferenceINTEL;
pub const SpvOpSubgroupAvcImeSetDualReferenceINTEL = enum_SpvOp_.SpvOpSubgroupAvcImeSetDualReferenceINTEL;
pub const SpvOpSubgroupAvcImeRefWindowSizeINTEL = enum_SpvOp_.SpvOpSubgroupAvcImeRefWindowSizeINTEL;
pub const SpvOpSubgroupAvcImeAdjustRefOffsetINTEL = enum_SpvOp_.SpvOpSubgroupAvcImeAdjustRefOffsetINTEL;
pub const SpvOpSubgroupAvcImeConvertToMcePayloadINTEL = enum_SpvOp_.SpvOpSubgroupAvcImeConvertToMcePayloadINTEL;
pub const SpvOpSubgroupAvcImeSetMaxMotionVectorCountINTEL = enum_SpvOp_.SpvOpSubgroupAvcImeSetMaxMotionVectorCountINTEL;
pub const SpvOpSubgroupAvcImeSetUnidirectionalMixDisableINTEL = enum_SpvOp_.SpvOpSubgroupAvcImeSetUnidirectionalMixDisableINTEL;
pub const SpvOpSubgroupAvcImeSetEarlySearchTerminationThresholdINTEL = enum_SpvOp_.SpvOpSubgroupAvcImeSetEarlySearchTerminationThresholdINTEL;
pub const SpvOpSubgroupAvcImeSetWeightedSadINTEL = enum_SpvOp_.SpvOpSubgroupAvcImeSetWeightedSadINTEL;
pub const SpvOpSubgroupAvcImeEvaluateWithSingleReferenceINTEL = enum_SpvOp_.SpvOpSubgroupAvcImeEvaluateWithSingleReferenceINTEL;
pub const SpvOpSubgroupAvcImeEvaluateWithDualReferenceINTEL = enum_SpvOp_.SpvOpSubgroupAvcImeEvaluateWithDualReferenceINTEL;
pub const SpvOpSubgroupAvcImeEvaluateWithSingleReferenceStreaminINTEL = enum_SpvOp_.SpvOpSubgroupAvcImeEvaluateWithSingleReferenceStreaminINTEL;
pub const SpvOpSubgroupAvcImeEvaluateWithDualReferenceStreaminINTEL = enum_SpvOp_.SpvOpSubgroupAvcImeEvaluateWithDualReferenceStreaminINTEL;
pub const SpvOpSubgroupAvcImeEvaluateWithSingleReferenceStreamoutINTEL = enum_SpvOp_.SpvOpSubgroupAvcImeEvaluateWithSingleReferenceStreamoutINTEL;
pub const SpvOpSubgroupAvcImeEvaluateWithDualReferenceStreamoutINTEL = enum_SpvOp_.SpvOpSubgroupAvcImeEvaluateWithDualReferenceStreamoutINTEL;
pub const SpvOpSubgroupAvcImeEvaluateWithSingleReferenceStreaminoutINTEL = enum_SpvOp_.SpvOpSubgroupAvcImeEvaluateWithSingleReferenceStreaminoutINTEL;
pub const SpvOpSubgroupAvcImeEvaluateWithDualReferenceStreaminoutINTEL = enum_SpvOp_.SpvOpSubgroupAvcImeEvaluateWithDualReferenceStreaminoutINTEL;
pub const SpvOpSubgroupAvcImeConvertToMceResultINTEL = enum_SpvOp_.SpvOpSubgroupAvcImeConvertToMceResultINTEL;
pub const SpvOpSubgroupAvcImeGetSingleReferenceStreaminINTEL = enum_SpvOp_.SpvOpSubgroupAvcImeGetSingleReferenceStreaminINTEL;
pub const SpvOpSubgroupAvcImeGetDualReferenceStreaminINTEL = enum_SpvOp_.SpvOpSubgroupAvcImeGetDualReferenceStreaminINTEL;
pub const SpvOpSubgroupAvcImeStripSingleReferenceStreamoutINTEL = enum_SpvOp_.SpvOpSubgroupAvcImeStripSingleReferenceStreamoutINTEL;
pub const SpvOpSubgroupAvcImeStripDualReferenceStreamoutINTEL = enum_SpvOp_.SpvOpSubgroupAvcImeStripDualReferenceStreamoutINTEL;
pub const SpvOpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeMotionVectorsINTEL = enum_SpvOp_.SpvOpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeMotionVectorsINTEL;
pub const SpvOpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeDistortionsINTEL = enum_SpvOp_.SpvOpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeDistortionsINTEL;
pub const SpvOpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeReferenceIdsINTEL = enum_SpvOp_.SpvOpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeReferenceIdsINTEL;
pub const SpvOpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeMotionVectorsINTEL = enum_SpvOp_.SpvOpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeMotionVectorsINTEL;
pub const SpvOpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeDistortionsINTEL = enum_SpvOp_.SpvOpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeDistortionsINTEL;
pub const SpvOpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeReferenceIdsINTEL = enum_SpvOp_.SpvOpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeReferenceIdsINTEL;
pub const SpvOpSubgroupAvcImeGetBorderReachedINTEL = enum_SpvOp_.SpvOpSubgroupAvcImeGetBorderReachedINTEL;
pub const SpvOpSubgroupAvcImeGetTruncatedSearchIndicationINTEL = enum_SpvOp_.SpvOpSubgroupAvcImeGetTruncatedSearchIndicationINTEL;
pub const SpvOpSubgroupAvcImeGetUnidirectionalEarlySearchTerminationINTEL = enum_SpvOp_.SpvOpSubgroupAvcImeGetUnidirectionalEarlySearchTerminationINTEL;
pub const SpvOpSubgroupAvcImeGetWeightingPatternMinimumMotionVectorINTEL = enum_SpvOp_.SpvOpSubgroupAvcImeGetWeightingPatternMinimumMotionVectorINTEL;
pub const SpvOpSubgroupAvcImeGetWeightingPatternMinimumDistortionINTEL = enum_SpvOp_.SpvOpSubgroupAvcImeGetWeightingPatternMinimumDistortionINTEL;
pub const SpvOpSubgroupAvcFmeInitializeINTEL = enum_SpvOp_.SpvOpSubgroupAvcFmeInitializeINTEL;
pub const SpvOpSubgroupAvcBmeInitializeINTEL = enum_SpvOp_.SpvOpSubgroupAvcBmeInitializeINTEL;
pub const SpvOpSubgroupAvcRefConvertToMcePayloadINTEL = enum_SpvOp_.SpvOpSubgroupAvcRefConvertToMcePayloadINTEL;
pub const SpvOpSubgroupAvcRefSetBidirectionalMixDisableINTEL = enum_SpvOp_.SpvOpSubgroupAvcRefSetBidirectionalMixDisableINTEL;
pub const SpvOpSubgroupAvcRefSetBilinearFilterEnableINTEL = enum_SpvOp_.SpvOpSubgroupAvcRefSetBilinearFilterEnableINTEL;
pub const SpvOpSubgroupAvcRefEvaluateWithSingleReferenceINTEL = enum_SpvOp_.SpvOpSubgroupAvcRefEvaluateWithSingleReferenceINTEL;
pub const SpvOpSubgroupAvcRefEvaluateWithDualReferenceINTEL = enum_SpvOp_.SpvOpSubgroupAvcRefEvaluateWithDualReferenceINTEL;
pub const SpvOpSubgroupAvcRefEvaluateWithMultiReferenceINTEL = enum_SpvOp_.SpvOpSubgroupAvcRefEvaluateWithMultiReferenceINTEL;
pub const SpvOpSubgroupAvcRefEvaluateWithMultiReferenceInterlacedINTEL = enum_SpvOp_.SpvOpSubgroupAvcRefEvaluateWithMultiReferenceInterlacedINTEL;
pub const SpvOpSubgroupAvcRefConvertToMceResultINTEL = enum_SpvOp_.SpvOpSubgroupAvcRefConvertToMceResultINTEL;
pub const SpvOpSubgroupAvcSicInitializeINTEL = enum_SpvOp_.SpvOpSubgroupAvcSicInitializeINTEL;
pub const SpvOpSubgroupAvcSicConfigureSkcINTEL = enum_SpvOp_.SpvOpSubgroupAvcSicConfigureSkcINTEL;
pub const SpvOpSubgroupAvcSicConfigureIpeLumaINTEL = enum_SpvOp_.SpvOpSubgroupAvcSicConfigureIpeLumaINTEL;
pub const SpvOpSubgroupAvcSicConfigureIpeLumaChromaINTEL = enum_SpvOp_.SpvOpSubgroupAvcSicConfigureIpeLumaChromaINTEL;
pub const SpvOpSubgroupAvcSicGetMotionVectorMaskINTEL = enum_SpvOp_.SpvOpSubgroupAvcSicGetMotionVectorMaskINTEL;
pub const SpvOpSubgroupAvcSicConvertToMcePayloadINTEL = enum_SpvOp_.SpvOpSubgroupAvcSicConvertToMcePayloadINTEL;
pub const SpvOpSubgroupAvcSicSetIntraLumaShapePenaltyINTEL = enum_SpvOp_.SpvOpSubgroupAvcSicSetIntraLumaShapePenaltyINTEL;
pub const SpvOpSubgroupAvcSicSetIntraLumaModeCostFunctionINTEL = enum_SpvOp_.SpvOpSubgroupAvcSicSetIntraLumaModeCostFunctionINTEL;
pub const SpvOpSubgroupAvcSicSetIntraChromaModeCostFunctionINTEL = enum_SpvOp_.SpvOpSubgroupAvcSicSetIntraChromaModeCostFunctionINTEL;
pub const SpvOpSubgroupAvcSicSetBilinearFilterEnableINTEL = enum_SpvOp_.SpvOpSubgroupAvcSicSetBilinearFilterEnableINTEL;
pub const SpvOpSubgroupAvcSicSetSkcForwardTransformEnableINTEL = enum_SpvOp_.SpvOpSubgroupAvcSicSetSkcForwardTransformEnableINTEL;
pub const SpvOpSubgroupAvcSicSetBlockBasedRawSkipSadINTEL = enum_SpvOp_.SpvOpSubgroupAvcSicSetBlockBasedRawSkipSadINTEL;
pub const SpvOpSubgroupAvcSicEvaluateIpeINTEL = enum_SpvOp_.SpvOpSubgroupAvcSicEvaluateIpeINTEL;
pub const SpvOpSubgroupAvcSicEvaluateWithSingleReferenceINTEL = enum_SpvOp_.SpvOpSubgroupAvcSicEvaluateWithSingleReferenceINTEL;
pub const SpvOpSubgroupAvcSicEvaluateWithDualReferenceINTEL = enum_SpvOp_.SpvOpSubgroupAvcSicEvaluateWithDualReferenceINTEL;
pub const SpvOpSubgroupAvcSicEvaluateWithMultiReferenceINTEL = enum_SpvOp_.SpvOpSubgroupAvcSicEvaluateWithMultiReferenceINTEL;
pub const SpvOpSubgroupAvcSicEvaluateWithMultiReferenceInterlacedINTEL = enum_SpvOp_.SpvOpSubgroupAvcSicEvaluateWithMultiReferenceInterlacedINTEL;
pub const SpvOpSubgroupAvcSicConvertToMceResultINTEL = enum_SpvOp_.SpvOpSubgroupAvcSicConvertToMceResultINTEL;
pub const SpvOpSubgroupAvcSicGetIpeLumaShapeINTEL = enum_SpvOp_.SpvOpSubgroupAvcSicGetIpeLumaShapeINTEL;
pub const SpvOpSubgroupAvcSicGetBestIpeLumaDistortionINTEL = enum_SpvOp_.SpvOpSubgroupAvcSicGetBestIpeLumaDistortionINTEL;
pub const SpvOpSubgroupAvcSicGetBestIpeChromaDistortionINTEL = enum_SpvOp_.SpvOpSubgroupAvcSicGetBestIpeChromaDistortionINTEL;
pub const SpvOpSubgroupAvcSicGetPackedIpeLumaModesINTEL = enum_SpvOp_.SpvOpSubgroupAvcSicGetPackedIpeLumaModesINTEL;
pub const SpvOpSubgroupAvcSicGetIpeChromaModeINTEL = enum_SpvOp_.SpvOpSubgroupAvcSicGetIpeChromaModeINTEL;
pub const SpvOpSubgroupAvcSicGetPackedSkcLumaCountThresholdINTEL = enum_SpvOp_.SpvOpSubgroupAvcSicGetPackedSkcLumaCountThresholdINTEL;
pub const SpvOpSubgroupAvcSicGetPackedSkcLumaSumThresholdINTEL = enum_SpvOp_.SpvOpSubgroupAvcSicGetPackedSkcLumaSumThresholdINTEL;
pub const SpvOpSubgroupAvcSicGetInterRawSadsINTEL = enum_SpvOp_.SpvOpSubgroupAvcSicGetInterRawSadsINTEL;
pub const SpvOpMax = enum_SpvOp_.SpvOpMax;
pub const enum_SpvOp_ = extern enum {
    SpvOpNop = 0,
    SpvOpUndef = 1,
    SpvOpSourceContinued = 2,
    SpvOpSource = 3,
    SpvOpSourceExtension = 4,
    SpvOpName = 5,
    SpvOpMemberName = 6,
    SpvOpString = 7,
    SpvOpLine = 8,
    SpvOpExtension = 10,
    SpvOpExtInstImport = 11,
    SpvOpExtInst = 12,
    SpvOpMemoryModel = 14,
    SpvOpEntryPoint = 15,
    SpvOpExecutionMode = 16,
    SpvOpCapability = 17,
    SpvOpTypeVoid = 19,
    SpvOpTypeBool = 20,
    SpvOpTypeInt = 21,
    SpvOpTypeFloat = 22,
    SpvOpTypeVector = 23,
    SpvOpTypeMatrix = 24,
    SpvOpTypeImage = 25,
    SpvOpTypeSampler = 26,
    SpvOpTypeSampledImage = 27,
    SpvOpTypeArray = 28,
    SpvOpTypeRuntimeArray = 29,
    SpvOpTypeStruct = 30,
    SpvOpTypeOpaque = 31,
    SpvOpTypePointer = 32,
    SpvOpTypeFunction = 33,
    SpvOpTypeEvent = 34,
    SpvOpTypeDeviceEvent = 35,
    SpvOpTypeReserveId = 36,
    SpvOpTypeQueue = 37,
    SpvOpTypePipe = 38,
    SpvOpTypeForwardPointer = 39,
    SpvOpConstantTrue = 41,
    SpvOpConstantFalse = 42,
    SpvOpConstant = 43,
    SpvOpConstantComposite = 44,
    SpvOpConstantSampler = 45,
    SpvOpConstantNull = 46,
    SpvOpSpecConstantTrue = 48,
    SpvOpSpecConstantFalse = 49,
    SpvOpSpecConstant = 50,
    SpvOpSpecConstantComposite = 51,
    SpvOpSpecConstantOp = 52,
    SpvOpFunction = 54,
    SpvOpFunctionParameter = 55,
    SpvOpFunctionEnd = 56,
    SpvOpFunctionCall = 57,
    SpvOpVariable = 59,
    SpvOpImageTexelPointer = 60,
    SpvOpLoad = 61,
    SpvOpStore = 62,
    SpvOpCopyMemory = 63,
    SpvOpCopyMemorySized = 64,
    SpvOpAccessChain = 65,
    SpvOpInBoundsAccessChain = 66,
    SpvOpPtrAccessChain = 67,
    SpvOpArrayLength = 68,
    SpvOpGenericPtrMemSemantics = 69,
    SpvOpInBoundsPtrAccessChain = 70,
    SpvOpDecorate = 71,
    SpvOpMemberDecorate = 72,
    SpvOpDecorationGroup = 73,
    SpvOpGroupDecorate = 74,
    SpvOpGroupMemberDecorate = 75,
    SpvOpVectorExtractDynamic = 77,
    SpvOpVectorInsertDynamic = 78,
    SpvOpVectorShuffle = 79,
    SpvOpCompositeConstruct = 80,
    SpvOpCompositeExtract = 81,
    SpvOpCompositeInsert = 82,
    SpvOpCopyObject = 83,
    SpvOpTranspose = 84,
    SpvOpSampledImage = 86,
    SpvOpImageSampleImplicitLod = 87,
    SpvOpImageSampleExplicitLod = 88,
    SpvOpImageSampleDrefImplicitLod = 89,
    SpvOpImageSampleDrefExplicitLod = 90,
    SpvOpImageSampleProjImplicitLod = 91,
    SpvOpImageSampleProjExplicitLod = 92,
    SpvOpImageSampleProjDrefImplicitLod = 93,
    SpvOpImageSampleProjDrefExplicitLod = 94,
    SpvOpImageFetch = 95,
    SpvOpImageGather = 96,
    SpvOpImageDrefGather = 97,
    SpvOpImageRead = 98,
    SpvOpImageWrite = 99,
    SpvOpImage = 100,
    SpvOpImageQueryFormat = 101,
    SpvOpImageQueryOrder = 102,
    SpvOpImageQuerySizeLod = 103,
    SpvOpImageQuerySize = 104,
    SpvOpImageQueryLod = 105,
    SpvOpImageQueryLevels = 106,
    SpvOpImageQuerySamples = 107,
    SpvOpConvertFToU = 109,
    SpvOpConvertFToS = 110,
    SpvOpConvertSToF = 111,
    SpvOpConvertUToF = 112,
    SpvOpUConvert = 113,
    SpvOpSConvert = 114,
    SpvOpFConvert = 115,
    SpvOpQuantizeToF16 = 116,
    SpvOpConvertPtrToU = 117,
    SpvOpSatConvertSToU = 118,
    SpvOpSatConvertUToS = 119,
    SpvOpConvertUToPtr = 120,
    SpvOpPtrCastToGeneric = 121,
    SpvOpGenericCastToPtr = 122,
    SpvOpGenericCastToPtrExplicit = 123,
    SpvOpBitcast = 124,
    SpvOpSNegate = 126,
    SpvOpFNegate = 127,
    SpvOpIAdd = 128,
    SpvOpFAdd = 129,
    SpvOpISub = 130,
    SpvOpFSub = 131,
    SpvOpIMul = 132,
    SpvOpFMul = 133,
    SpvOpUDiv = 134,
    SpvOpSDiv = 135,
    SpvOpFDiv = 136,
    SpvOpUMod = 137,
    SpvOpSRem = 138,
    SpvOpSMod = 139,
    SpvOpFRem = 140,
    SpvOpFMod = 141,
    SpvOpVectorTimesScalar = 142,
    SpvOpMatrixTimesScalar = 143,
    SpvOpVectorTimesMatrix = 144,
    SpvOpMatrixTimesVector = 145,
    SpvOpMatrixTimesMatrix = 146,
    SpvOpOuterProduct = 147,
    SpvOpDot = 148,
    SpvOpIAddCarry = 149,
    SpvOpISubBorrow = 150,
    SpvOpUMulExtended = 151,
    SpvOpSMulExtended = 152,
    SpvOpAny = 154,
    SpvOpAll = 155,
    SpvOpIsNan = 156,
    SpvOpIsInf = 157,
    SpvOpIsFinite = 158,
    SpvOpIsNormal = 159,
    SpvOpSignBitSet = 160,
    SpvOpLessOrGreater = 161,
    SpvOpOrdered = 162,
    SpvOpUnordered = 163,
    SpvOpLogicalEqual = 164,
    SpvOpLogicalNotEqual = 165,
    SpvOpLogicalOr = 166,
    SpvOpLogicalAnd = 167,
    SpvOpLogicalNot = 168,
    SpvOpSelect = 169,
    SpvOpIEqual = 170,
    SpvOpINotEqual = 171,
    SpvOpUGreaterThan = 172,
    SpvOpSGreaterThan = 173,
    SpvOpUGreaterThanEqual = 174,
    SpvOpSGreaterThanEqual = 175,
    SpvOpULessThan = 176,
    SpvOpSLessThan = 177,
    SpvOpULessThanEqual = 178,
    SpvOpSLessThanEqual = 179,
    SpvOpFOrdEqual = 180,
    SpvOpFUnordEqual = 181,
    SpvOpFOrdNotEqual = 182,
    SpvOpFUnordNotEqual = 183,
    SpvOpFOrdLessThan = 184,
    SpvOpFUnordLessThan = 185,
    SpvOpFOrdGreaterThan = 186,
    SpvOpFUnordGreaterThan = 187,
    SpvOpFOrdLessThanEqual = 188,
    SpvOpFUnordLessThanEqual = 189,
    SpvOpFOrdGreaterThanEqual = 190,
    SpvOpFUnordGreaterThanEqual = 191,
    SpvOpShiftRightLogical = 194,
    SpvOpShiftRightArithmetic = 195,
    SpvOpShiftLeftLogical = 196,
    SpvOpBitwiseOr = 197,
    SpvOpBitwiseXor = 198,
    SpvOpBitwiseAnd = 199,
    SpvOpNot = 200,
    SpvOpBitFieldInsert = 201,
    SpvOpBitFieldSExtract = 202,
    SpvOpBitFieldUExtract = 203,
    SpvOpBitReverse = 204,
    SpvOpBitCount = 205,
    SpvOpDPdx = 207,
    SpvOpDPdy = 208,
    SpvOpFwidth = 209,
    SpvOpDPdxFine = 210,
    SpvOpDPdyFine = 211,
    SpvOpFwidthFine = 212,
    SpvOpDPdxCoarse = 213,
    SpvOpDPdyCoarse = 214,
    SpvOpFwidthCoarse = 215,
    SpvOpEmitVertex = 218,
    SpvOpEndPrimitive = 219,
    SpvOpEmitStreamVertex = 220,
    SpvOpEndStreamPrimitive = 221,
    SpvOpControlBarrier = 224,
    SpvOpMemoryBarrier = 225,
    SpvOpAtomicLoad = 227,
    SpvOpAtomicStore = 228,
    SpvOpAtomicExchange = 229,
    SpvOpAtomicCompareExchange = 230,
    SpvOpAtomicCompareExchangeWeak = 231,
    SpvOpAtomicIIncrement = 232,
    SpvOpAtomicIDecrement = 233,
    SpvOpAtomicIAdd = 234,
    SpvOpAtomicISub = 235,
    SpvOpAtomicSMin = 236,
    SpvOpAtomicUMin = 237,
    SpvOpAtomicSMax = 238,
    SpvOpAtomicUMax = 239,
    SpvOpAtomicAnd = 240,
    SpvOpAtomicOr = 241,
    SpvOpAtomicXor = 242,
    SpvOpPhi = 245,
    SpvOpLoopMerge = 246,
    SpvOpSelectionMerge = 247,
    SpvOpLabel = 248,
    SpvOpBranch = 249,
    SpvOpBranchConditional = 250,
    SpvOpSwitch = 251,
    SpvOpKill = 252,
    SpvOpReturn = 253,
    SpvOpReturnValue = 254,
    SpvOpUnreachable = 255,
    SpvOpLifetimeStart = 256,
    SpvOpLifetimeStop = 257,
    SpvOpGroupAsyncCopy = 259,
    SpvOpGroupWaitEvents = 260,
    SpvOpGroupAll = 261,
    SpvOpGroupAny = 262,
    SpvOpGroupBroadcast = 263,
    SpvOpGroupIAdd = 264,
    SpvOpGroupFAdd = 265,
    SpvOpGroupFMin = 266,
    SpvOpGroupUMin = 267,
    SpvOpGroupSMin = 268,
    SpvOpGroupFMax = 269,
    SpvOpGroupUMax = 270,
    SpvOpGroupSMax = 271,
    SpvOpReadPipe = 274,
    SpvOpWritePipe = 275,
    SpvOpReservedReadPipe = 276,
    SpvOpReservedWritePipe = 277,
    SpvOpReserveReadPipePackets = 278,
    SpvOpReserveWritePipePackets = 279,
    SpvOpCommitReadPipe = 280,
    SpvOpCommitWritePipe = 281,
    SpvOpIsValidReserveId = 282,
    SpvOpGetNumPipePackets = 283,
    SpvOpGetMaxPipePackets = 284,
    SpvOpGroupReserveReadPipePackets = 285,
    SpvOpGroupReserveWritePipePackets = 286,
    SpvOpGroupCommitReadPipe = 287,
    SpvOpGroupCommitWritePipe = 288,
    SpvOpEnqueueMarker = 291,
    SpvOpEnqueueKernel = 292,
    SpvOpGetKernelNDrangeSubGroupCount = 293,
    SpvOpGetKernelNDrangeMaxSubGroupSize = 294,
    SpvOpGetKernelWorkGroupSize = 295,
    SpvOpGetKernelPreferredWorkGroupSizeMultiple = 296,
    SpvOpRetainEvent = 297,
    SpvOpReleaseEvent = 298,
    SpvOpCreateUserEvent = 299,
    SpvOpIsValidEvent = 300,
    SpvOpSetUserEventStatus = 301,
    SpvOpCaptureEventProfilingInfo = 302,
    SpvOpGetDefaultQueue = 303,
    SpvOpBuildNDRange = 304,
    SpvOpImageSparseSampleImplicitLod = 305,
    SpvOpImageSparseSampleExplicitLod = 306,
    SpvOpImageSparseSampleDrefImplicitLod = 307,
    SpvOpImageSparseSampleDrefExplicitLod = 308,
    SpvOpImageSparseSampleProjImplicitLod = 309,
    SpvOpImageSparseSampleProjExplicitLod = 310,
    SpvOpImageSparseSampleProjDrefImplicitLod = 311,
    SpvOpImageSparseSampleProjDrefExplicitLod = 312,
    SpvOpImageSparseFetch = 313,
    SpvOpImageSparseGather = 314,
    SpvOpImageSparseDrefGather = 315,
    SpvOpImageSparseTexelsResident = 316,
    SpvOpNoLine = 317,
    SpvOpAtomicFlagTestAndSet = 318,
    SpvOpAtomicFlagClear = 319,
    SpvOpImageSparseRead = 320,
    SpvOpSizeOf = 321,
    SpvOpTypePipeStorage = 322,
    SpvOpConstantPipeStorage = 323,
    SpvOpCreatePipeFromPipeStorage = 324,
    SpvOpGetKernelLocalSizeForSubgroupCount = 325,
    SpvOpGetKernelMaxNumSubgroups = 326,
    SpvOpTypeNamedBarrier = 327,
    SpvOpNamedBarrierInitialize = 328,
    SpvOpMemoryNamedBarrier = 329,
    SpvOpModuleProcessed = 330,
    SpvOpExecutionModeId = 331,
    SpvOpDecorateId = 332,
    SpvOpGroupNonUniformElect = 333,
    SpvOpGroupNonUniformAll = 334,
    SpvOpGroupNonUniformAny = 335,
    SpvOpGroupNonUniformAllEqual = 336,
    SpvOpGroupNonUniformBroadcast = 337,
    SpvOpGroupNonUniformBroadcastFirst = 338,
    SpvOpGroupNonUniformBallot = 339,
    SpvOpGroupNonUniformInverseBallot = 340,
    SpvOpGroupNonUniformBallotBitExtract = 341,
    SpvOpGroupNonUniformBallotBitCount = 342,
    SpvOpGroupNonUniformBallotFindLSB = 343,
    SpvOpGroupNonUniformBallotFindMSB = 344,
    SpvOpGroupNonUniformShuffle = 345,
    SpvOpGroupNonUniformShuffleXor = 346,
    SpvOpGroupNonUniformShuffleUp = 347,
    SpvOpGroupNonUniformShuffleDown = 348,
    SpvOpGroupNonUniformIAdd = 349,
    SpvOpGroupNonUniformFAdd = 350,
    SpvOpGroupNonUniformIMul = 351,
    SpvOpGroupNonUniformFMul = 352,
    SpvOpGroupNonUniformSMin = 353,
    SpvOpGroupNonUniformUMin = 354,
    SpvOpGroupNonUniformFMin = 355,
    SpvOpGroupNonUniformSMax = 356,
    SpvOpGroupNonUniformUMax = 357,
    SpvOpGroupNonUniformFMax = 358,
    SpvOpGroupNonUniformBitwiseAnd = 359,
    SpvOpGroupNonUniformBitwiseOr = 360,
    SpvOpGroupNonUniformBitwiseXor = 361,
    SpvOpGroupNonUniformLogicalAnd = 362,
    SpvOpGroupNonUniformLogicalOr = 363,
    SpvOpGroupNonUniformLogicalXor = 364,
    SpvOpGroupNonUniformQuadBroadcast = 365,
    SpvOpGroupNonUniformQuadSwap = 366,
    SpvOpCopyLogical = 400,
    SpvOpPtrEqual = 401,
    SpvOpPtrNotEqual = 402,
    SpvOpPtrDiff = 403,
    SpvOpSubgroupBallotKHR = 4421,
    SpvOpSubgroupFirstInvocationKHR = 4422,
    SpvOpSubgroupAllKHR = 4428,
    SpvOpSubgroupAnyKHR = 4429,
    SpvOpSubgroupAllEqualKHR = 4430,
    SpvOpSubgroupReadInvocationKHR = 4432,
    SpvOpGroupIAddNonUniformAMD = 5000,
    SpvOpGroupFAddNonUniformAMD = 5001,
    SpvOpGroupFMinNonUniformAMD = 5002,
    SpvOpGroupUMinNonUniformAMD = 5003,
    SpvOpGroupSMinNonUniformAMD = 5004,
    SpvOpGroupFMaxNonUniformAMD = 5005,
    SpvOpGroupUMaxNonUniformAMD = 5006,
    SpvOpGroupSMaxNonUniformAMD = 5007,
    SpvOpFragmentMaskFetchAMD = 5011,
    SpvOpFragmentFetchAMD = 5012,
    SpvOpReadClockKHR = 5056,
    SpvOpImageSampleFootprintNV = 5283,
    SpvOpGroupNonUniformPartitionNV = 5296,
    SpvOpWritePackedPrimitiveIndices4x8NV = 5299,
    SpvOpReportIntersectionNV = 5334,
    SpvOpIgnoreIntersectionNV = 5335,
    SpvOpTerminateRayNV = 5336,
    SpvOpTraceNV = 5337,
    SpvOpTypeAccelerationStructureNV = 5341,
    SpvOpExecuteCallableNV = 5344,
    SpvOpTypeCooperativeMatrixNV = 5358,
    SpvOpCooperativeMatrixLoadNV = 5359,
    SpvOpCooperativeMatrixStoreNV = 5360,
    SpvOpCooperativeMatrixMulAddNV = 5361,
    SpvOpCooperativeMatrixLengthNV = 5362,
    SpvOpBeginInvocationInterlockEXT = 5364,
    SpvOpEndInvocationInterlockEXT = 5365,
    SpvOpDemoteToHelperInvocationEXT = 5380,
    SpvOpIsHelperInvocationEXT = 5381,
    SpvOpSubgroupShuffleINTEL = 5571,
    SpvOpSubgroupShuffleDownINTEL = 5572,
    SpvOpSubgroupShuffleUpINTEL = 5573,
    SpvOpSubgroupShuffleXorINTEL = 5574,
    SpvOpSubgroupBlockReadINTEL = 5575,
    SpvOpSubgroupBlockWriteINTEL = 5576,
    SpvOpSubgroupImageBlockReadINTEL = 5577,
    SpvOpSubgroupImageBlockWriteINTEL = 5578,
    SpvOpSubgroupImageMediaBlockReadINTEL = 5580,
    SpvOpSubgroupImageMediaBlockWriteINTEL = 5581,
    SpvOpUCountLeadingZerosINTEL = 5585,
    SpvOpUCountTrailingZerosINTEL = 5586,
    SpvOpAbsISubINTEL = 5587,
    SpvOpAbsUSubINTEL = 5588,
    SpvOpIAddSatINTEL = 5589,
    SpvOpUAddSatINTEL = 5590,
    SpvOpIAverageINTEL = 5591,
    SpvOpUAverageINTEL = 5592,
    SpvOpIAverageRoundedINTEL = 5593,
    SpvOpUAverageRoundedINTEL = 5594,
    SpvOpISubSatINTEL = 5595,
    SpvOpUSubSatINTEL = 5596,
    SpvOpIMul32x16INTEL = 5597,
    SpvOpUMul32x16INTEL = 5598,
    SpvOpDecorateString = 5632,
    SpvOpDecorateStringGOOGLE = 5632,
    SpvOpMemberDecorateString = 5633,
    SpvOpMemberDecorateStringGOOGLE = 5633,
    SpvOpVmeImageINTEL = 5699,
    SpvOpTypeVmeImageINTEL = 5700,
    SpvOpTypeAvcImePayloadINTEL = 5701,
    SpvOpTypeAvcRefPayloadINTEL = 5702,
    SpvOpTypeAvcSicPayloadINTEL = 5703,
    SpvOpTypeAvcMcePayloadINTEL = 5704,
    SpvOpTypeAvcMceResultINTEL = 5705,
    SpvOpTypeAvcImeResultINTEL = 5706,
    SpvOpTypeAvcImeResultSingleReferenceStreamoutINTEL = 5707,
    SpvOpTypeAvcImeResultDualReferenceStreamoutINTEL = 5708,
    SpvOpTypeAvcImeSingleReferenceStreaminINTEL = 5709,
    SpvOpTypeAvcImeDualReferenceStreaminINTEL = 5710,
    SpvOpTypeAvcRefResultINTEL = 5711,
    SpvOpTypeAvcSicResultINTEL = 5712,
    SpvOpSubgroupAvcMceGetDefaultInterBaseMultiReferencePenaltyINTEL = 5713,
    SpvOpSubgroupAvcMceSetInterBaseMultiReferencePenaltyINTEL = 5714,
    SpvOpSubgroupAvcMceGetDefaultInterShapePenaltyINTEL = 5715,
    SpvOpSubgroupAvcMceSetInterShapePenaltyINTEL = 5716,
    SpvOpSubgroupAvcMceGetDefaultInterDirectionPenaltyINTEL = 5717,
    SpvOpSubgroupAvcMceSetInterDirectionPenaltyINTEL = 5718,
    SpvOpSubgroupAvcMceGetDefaultIntraLumaShapePenaltyINTEL = 5719,
    SpvOpSubgroupAvcMceGetDefaultInterMotionVectorCostTableINTEL = 5720,
    SpvOpSubgroupAvcMceGetDefaultHighPenaltyCostTableINTEL = 5721,
    SpvOpSubgroupAvcMceGetDefaultMediumPenaltyCostTableINTEL = 5722,
    SpvOpSubgroupAvcMceGetDefaultLowPenaltyCostTableINTEL = 5723,
    SpvOpSubgroupAvcMceSetMotionVectorCostFunctionINTEL = 5724,
    SpvOpSubgroupAvcMceGetDefaultIntraLumaModePenaltyINTEL = 5725,
    SpvOpSubgroupAvcMceGetDefaultNonDcLumaIntraPenaltyINTEL = 5726,
    SpvOpSubgroupAvcMceGetDefaultIntraChromaModeBasePenaltyINTEL = 5727,
    SpvOpSubgroupAvcMceSetAcOnlyHaarINTEL = 5728,
    SpvOpSubgroupAvcMceSetSourceInterlacedFieldPolarityINTEL = 5729,
    SpvOpSubgroupAvcMceSetSingleReferenceInterlacedFieldPolarityINTEL = 5730,
    SpvOpSubgroupAvcMceSetDualReferenceInterlacedFieldPolaritiesINTEL = 5731,
    SpvOpSubgroupAvcMceConvertToImePayloadINTEL = 5732,
    SpvOpSubgroupAvcMceConvertToImeResultINTEL = 5733,
    SpvOpSubgroupAvcMceConvertToRefPayloadINTEL = 5734,
    SpvOpSubgroupAvcMceConvertToRefResultINTEL = 5735,
    SpvOpSubgroupAvcMceConvertToSicPayloadINTEL = 5736,
    SpvOpSubgroupAvcMceConvertToSicResultINTEL = 5737,
    SpvOpSubgroupAvcMceGetMotionVectorsINTEL = 5738,
    SpvOpSubgroupAvcMceGetInterDistortionsINTEL = 5739,
    SpvOpSubgroupAvcMceGetBestInterDistortionsINTEL = 5740,
    SpvOpSubgroupAvcMceGetInterMajorShapeINTEL = 5741,
    SpvOpSubgroupAvcMceGetInterMinorShapeINTEL = 5742,
    SpvOpSubgroupAvcMceGetInterDirectionsINTEL = 5743,
    SpvOpSubgroupAvcMceGetInterMotionVectorCountINTEL = 5744,
    SpvOpSubgroupAvcMceGetInterReferenceIdsINTEL = 5745,
    SpvOpSubgroupAvcMceGetInterReferenceInterlacedFieldPolaritiesINTEL = 5746,
    SpvOpSubgroupAvcImeInitializeINTEL = 5747,
    SpvOpSubgroupAvcImeSetSingleReferenceINTEL = 5748,
    SpvOpSubgroupAvcImeSetDualReferenceINTEL = 5749,
    SpvOpSubgroupAvcImeRefWindowSizeINTEL = 5750,
    SpvOpSubgroupAvcImeAdjustRefOffsetINTEL = 5751,
    SpvOpSubgroupAvcImeConvertToMcePayloadINTEL = 5752,
    SpvOpSubgroupAvcImeSetMaxMotionVectorCountINTEL = 5753,
    SpvOpSubgroupAvcImeSetUnidirectionalMixDisableINTEL = 5754,
    SpvOpSubgroupAvcImeSetEarlySearchTerminationThresholdINTEL = 5755,
    SpvOpSubgroupAvcImeSetWeightedSadINTEL = 5756,
    SpvOpSubgroupAvcImeEvaluateWithSingleReferenceINTEL = 5757,
    SpvOpSubgroupAvcImeEvaluateWithDualReferenceINTEL = 5758,
    SpvOpSubgroupAvcImeEvaluateWithSingleReferenceStreaminINTEL = 5759,
    SpvOpSubgroupAvcImeEvaluateWithDualReferenceStreaminINTEL = 5760,
    SpvOpSubgroupAvcImeEvaluateWithSingleReferenceStreamoutINTEL = 5761,
    SpvOpSubgroupAvcImeEvaluateWithDualReferenceStreamoutINTEL = 5762,
    SpvOpSubgroupAvcImeEvaluateWithSingleReferenceStreaminoutINTEL = 5763,
    SpvOpSubgroupAvcImeEvaluateWithDualReferenceStreaminoutINTEL = 5764,
    SpvOpSubgroupAvcImeConvertToMceResultINTEL = 5765,
    SpvOpSubgroupAvcImeGetSingleReferenceStreaminINTEL = 5766,
    SpvOpSubgroupAvcImeGetDualReferenceStreaminINTEL = 5767,
    SpvOpSubgroupAvcImeStripSingleReferenceStreamoutINTEL = 5768,
    SpvOpSubgroupAvcImeStripDualReferenceStreamoutINTEL = 5769,
    SpvOpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeMotionVectorsINTEL = 5770,
    SpvOpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeDistortionsINTEL = 5771,
    SpvOpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeReferenceIdsINTEL = 5772,
    SpvOpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeMotionVectorsINTEL = 5773,
    SpvOpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeDistortionsINTEL = 5774,
    SpvOpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeReferenceIdsINTEL = 5775,
    SpvOpSubgroupAvcImeGetBorderReachedINTEL = 5776,
    SpvOpSubgroupAvcImeGetTruncatedSearchIndicationINTEL = 5777,
    SpvOpSubgroupAvcImeGetUnidirectionalEarlySearchTerminationINTEL = 5778,
    SpvOpSubgroupAvcImeGetWeightingPatternMinimumMotionVectorINTEL = 5779,
    SpvOpSubgroupAvcImeGetWeightingPatternMinimumDistortionINTEL = 5780,
    SpvOpSubgroupAvcFmeInitializeINTEL = 5781,
    SpvOpSubgroupAvcBmeInitializeINTEL = 5782,
    SpvOpSubgroupAvcRefConvertToMcePayloadINTEL = 5783,
    SpvOpSubgroupAvcRefSetBidirectionalMixDisableINTEL = 5784,
    SpvOpSubgroupAvcRefSetBilinearFilterEnableINTEL = 5785,
    SpvOpSubgroupAvcRefEvaluateWithSingleReferenceINTEL = 5786,
    SpvOpSubgroupAvcRefEvaluateWithDualReferenceINTEL = 5787,
    SpvOpSubgroupAvcRefEvaluateWithMultiReferenceINTEL = 5788,
    SpvOpSubgroupAvcRefEvaluateWithMultiReferenceInterlacedINTEL = 5789,
    SpvOpSubgroupAvcRefConvertToMceResultINTEL = 5790,
    SpvOpSubgroupAvcSicInitializeINTEL = 5791,
    SpvOpSubgroupAvcSicConfigureSkcINTEL = 5792,
    SpvOpSubgroupAvcSicConfigureIpeLumaINTEL = 5793,
    SpvOpSubgroupAvcSicConfigureIpeLumaChromaINTEL = 5794,
    SpvOpSubgroupAvcSicGetMotionVectorMaskINTEL = 5795,
    SpvOpSubgroupAvcSicConvertToMcePayloadINTEL = 5796,
    SpvOpSubgroupAvcSicSetIntraLumaShapePenaltyINTEL = 5797,
    SpvOpSubgroupAvcSicSetIntraLumaModeCostFunctionINTEL = 5798,
    SpvOpSubgroupAvcSicSetIntraChromaModeCostFunctionINTEL = 5799,
    SpvOpSubgroupAvcSicSetBilinearFilterEnableINTEL = 5800,
    SpvOpSubgroupAvcSicSetSkcForwardTransformEnableINTEL = 5801,
    SpvOpSubgroupAvcSicSetBlockBasedRawSkipSadINTEL = 5802,
    SpvOpSubgroupAvcSicEvaluateIpeINTEL = 5803,
    SpvOpSubgroupAvcSicEvaluateWithSingleReferenceINTEL = 5804,
    SpvOpSubgroupAvcSicEvaluateWithDualReferenceINTEL = 5805,
    SpvOpSubgroupAvcSicEvaluateWithMultiReferenceINTEL = 5806,
    SpvOpSubgroupAvcSicEvaluateWithMultiReferenceInterlacedINTEL = 5807,
    SpvOpSubgroupAvcSicConvertToMceResultINTEL = 5808,
    SpvOpSubgroupAvcSicGetIpeLumaShapeINTEL = 5809,
    SpvOpSubgroupAvcSicGetBestIpeLumaDistortionINTEL = 5810,
    SpvOpSubgroupAvcSicGetBestIpeChromaDistortionINTEL = 5811,
    SpvOpSubgroupAvcSicGetPackedIpeLumaModesINTEL = 5812,
    SpvOpSubgroupAvcSicGetIpeChromaModeINTEL = 5813,
    SpvOpSubgroupAvcSicGetPackedSkcLumaCountThresholdINTEL = 5814,
    SpvOpSubgroupAvcSicGetPackedSkcLumaSumThresholdINTEL = 5815,
    SpvOpSubgroupAvcSicGetInterRawSadsINTEL = 5816,
    SpvOpMax = 2147483647,
};
pub const SpvOp = enum_SpvOp_;
pub extern fn spvc_get_version(major: [*c]c_uint, minor: [*c]c_uint, patch: [*c]c_uint) void;
pub extern fn spvc_get_commit_revision_and_timestamp() [*c]const u8;
pub const struct_spvc_context_s = opaque {};
pub const spvc_context = ?*struct_spvc_context_s;
pub const struct_spvc_parsed_ir_s = opaque {};
pub const spvc_parsed_ir = ?*struct_spvc_parsed_ir_s;
pub const struct_spvc_compiler_s = opaque {};
pub const spvc_compiler = ?*struct_spvc_compiler_s;
pub const struct_spvc_compiler_options_s = opaque {};
pub const spvc_compiler_options = ?*struct_spvc_compiler_options_s;
pub const struct_spvc_resources_s = opaque {};
pub const spvc_resources = ?*struct_spvc_resources_s;
pub const struct_spvc_type_s = opaque {};
pub const spvc_type = ?*const struct_spvc_type_s;
pub const struct_spvc_constant_s = opaque {};
pub const spvc_constant = ?*struct_spvc_constant_s;
pub const struct_spvc_set_s = opaque {};
pub const spvc_set = ?*const struct_spvc_set_s;
pub const spvc_type_id = SpvId;
pub const spvc_variable_id = SpvId;
pub const spvc_constant_id = SpvId;
pub const struct_spvc_reflected_resource = extern struct {
    id: spvc_variable_id,
    base_type_id: spvc_type_id,
    type_id: spvc_type_id,
    name: [*c]const u8,
};
pub const spvc_reflected_resource = struct_spvc_reflected_resource;
pub const struct_spvc_entry_point = extern struct {
    execution_model: SpvExecutionModel,
    name: [*c]const u8,
};
pub const spvc_entry_point = struct_spvc_entry_point;
pub const struct_spvc_combined_image_sampler = extern struct {
    combined_id: spvc_variable_id,
    image_id: spvc_variable_id,
    sampler_id: spvc_variable_id,
};
pub const spvc_combined_image_sampler = struct_spvc_combined_image_sampler;
pub const struct_spvc_specialization_constant = extern struct {
    id: spvc_constant_id,
    constant_id: c_uint,
};
pub const spvc_specialization_constant = struct_spvc_specialization_constant;
pub const struct_spvc_buffer_range = extern struct {
    index: c_uint,
    offset: usize,
    range: usize,
};
pub const spvc_buffer_range = struct_spvc_buffer_range;
pub const struct_spvc_hlsl_root_constants = extern struct {
    start: c_uint,
    end: c_uint,
    binding: c_uint,
    space: c_uint,
};
pub const spvc_hlsl_root_constants = struct_spvc_hlsl_root_constants;
pub const struct_spvc_hlsl_vertex_attribute_remap = extern struct {
    location: c_uint,
    semantic: [*c]const u8,
};
pub const spvc_hlsl_vertex_attribute_remap = struct_spvc_hlsl_vertex_attribute_remap;
pub const spvc_bool = u8;
pub const SPVC_SUCCESS = enum_spvc_result.SPVC_SUCCESS;
pub const SPVC_ERROR_INVALID_SPIRV = enum_spvc_result.SPVC_ERROR_INVALID_SPIRV;
pub const SPVC_ERROR_UNSUPPORTED_SPIRV = enum_spvc_result.SPVC_ERROR_UNSUPPORTED_SPIRV;
pub const SPVC_ERROR_OUT_OF_MEMORY = enum_spvc_result.SPVC_ERROR_OUT_OF_MEMORY;
pub const SPVC_ERROR_INVALID_ARGUMENT = enum_spvc_result.SPVC_ERROR_INVALID_ARGUMENT;
pub const SPVC_ERROR_INT_MAX = enum_spvc_result.SPVC_ERROR_INT_MAX;
pub const enum_spvc_result = extern enum {
    SPVC_SUCCESS = 0,
    SPVC_ERROR_INVALID_SPIRV = -1,
    SPVC_ERROR_UNSUPPORTED_SPIRV = -2,
    SPVC_ERROR_OUT_OF_MEMORY = -3,
    SPVC_ERROR_INVALID_ARGUMENT = -4,
    SPVC_ERROR_INT_MAX = 2147483647,
};
pub const spvc_result = enum_spvc_result;
pub const SPVC_CAPTURE_MODE_COPY = enum_spvc_capture_mode.SPVC_CAPTURE_MODE_COPY;
pub const SPVC_CAPTURE_MODE_TAKE_OWNERSHIP = enum_spvc_capture_mode.SPVC_CAPTURE_MODE_TAKE_OWNERSHIP;
pub const SPVC_CAPTURE_MODE_INT_MAX = enum_spvc_capture_mode.SPVC_CAPTURE_MODE_INT_MAX;
pub const enum_spvc_capture_mode = extern enum {
    SPVC_CAPTURE_MODE_COPY = 0,
    SPVC_CAPTURE_MODE_TAKE_OWNERSHIP = 1,
    SPVC_CAPTURE_MODE_INT_MAX = 2147483647,
};
pub const spvc_capture_mode = enum_spvc_capture_mode;
pub const SPVC_BACKEND_NONE = enum_spvc_backend.SPVC_BACKEND_NONE;
pub const SPVC_BACKEND_GLSL = enum_spvc_backend.SPVC_BACKEND_GLSL;
pub const SPVC_BACKEND_HLSL = enum_spvc_backend.SPVC_BACKEND_HLSL;
pub const SPVC_BACKEND_MSL = enum_spvc_backend.SPVC_BACKEND_MSL;
pub const SPVC_BACKEND_CPP = enum_spvc_backend.SPVC_BACKEND_CPP;
pub const SPVC_BACKEND_JSON = enum_spvc_backend.SPVC_BACKEND_JSON;
pub const SPVC_BACKEND_INT_MAX = enum_spvc_backend.SPVC_BACKEND_INT_MAX;
pub const enum_spvc_backend = extern enum {
    SPVC_BACKEND_NONE = 0,
    SPVC_BACKEND_GLSL = 1,
    SPVC_BACKEND_HLSL = 2,
    SPVC_BACKEND_MSL = 3,
    SPVC_BACKEND_CPP = 4,
    SPVC_BACKEND_JSON = 5,
    SPVC_BACKEND_INT_MAX = 2147483647,
};
pub const spvc_backend = enum_spvc_backend;
pub const SPVC_RESOURCE_TYPE_UNKNOWN = enum_spvc_resource_type.SPVC_RESOURCE_TYPE_UNKNOWN;
pub const SPVC_RESOURCE_TYPE_UNIFORM_BUFFER = enum_spvc_resource_type.SPVC_RESOURCE_TYPE_UNIFORM_BUFFER;
pub const SPVC_RESOURCE_TYPE_STORAGE_BUFFER = enum_spvc_resource_type.SPVC_RESOURCE_TYPE_STORAGE_BUFFER;
pub const SPVC_RESOURCE_TYPE_STAGE_INPUT = enum_spvc_resource_type.SPVC_RESOURCE_TYPE_STAGE_INPUT;
pub const SPVC_RESOURCE_TYPE_STAGE_OUTPUT = enum_spvc_resource_type.SPVC_RESOURCE_TYPE_STAGE_OUTPUT;
pub const SPVC_RESOURCE_TYPE_SUBPASS_INPUT = enum_spvc_resource_type.SPVC_RESOURCE_TYPE_SUBPASS_INPUT;
pub const SPVC_RESOURCE_TYPE_STORAGE_IMAGE = enum_spvc_resource_type.SPVC_RESOURCE_TYPE_STORAGE_IMAGE;
pub const SPVC_RESOURCE_TYPE_SAMPLED_IMAGE = enum_spvc_resource_type.SPVC_RESOURCE_TYPE_SAMPLED_IMAGE;
pub const SPVC_RESOURCE_TYPE_ATOMIC_COUNTER = enum_spvc_resource_type.SPVC_RESOURCE_TYPE_ATOMIC_COUNTER;
pub const SPVC_RESOURCE_TYPE_PUSH_CONSTANT = enum_spvc_resource_type.SPVC_RESOURCE_TYPE_PUSH_CONSTANT;
pub const SPVC_RESOURCE_TYPE_SEPARATE_IMAGE = enum_spvc_resource_type.SPVC_RESOURCE_TYPE_SEPARATE_IMAGE;
pub const SPVC_RESOURCE_TYPE_SEPARATE_SAMPLERS = enum_spvc_resource_type.SPVC_RESOURCE_TYPE_SEPARATE_SAMPLERS;
pub const SPVC_RESOURCE_TYPE_ACCELERATION_STRUCTURE = enum_spvc_resource_type.SPVC_RESOURCE_TYPE_ACCELERATION_STRUCTURE;
pub const SPVC_RESOURCE_TYPE_INT_MAX = enum_spvc_resource_type.SPVC_RESOURCE_TYPE_INT_MAX;
pub const enum_spvc_resource_type = extern enum {
    SPVC_RESOURCE_TYPE_UNKNOWN = 0,
    SPVC_RESOURCE_TYPE_UNIFORM_BUFFER = 1,
    SPVC_RESOURCE_TYPE_STORAGE_BUFFER = 2,
    SPVC_RESOURCE_TYPE_STAGE_INPUT = 3,
    SPVC_RESOURCE_TYPE_STAGE_OUTPUT = 4,
    SPVC_RESOURCE_TYPE_SUBPASS_INPUT = 5,
    SPVC_RESOURCE_TYPE_STORAGE_IMAGE = 6,
    SPVC_RESOURCE_TYPE_SAMPLED_IMAGE = 7,
    SPVC_RESOURCE_TYPE_ATOMIC_COUNTER = 8,
    SPVC_RESOURCE_TYPE_PUSH_CONSTANT = 9,
    SPVC_RESOURCE_TYPE_SEPARATE_IMAGE = 10,
    SPVC_RESOURCE_TYPE_SEPARATE_SAMPLERS = 11,
    SPVC_RESOURCE_TYPE_ACCELERATION_STRUCTURE = 12,
    SPVC_RESOURCE_TYPE_INT_MAX = 2147483647,
};
pub const spvc_resource_type = enum_spvc_resource_type;
pub const SPVC_BASETYPE_UNKNOWN = enum_spvc_basetype.SPVC_BASETYPE_UNKNOWN;
pub const SPVC_BASETYPE_VOID = enum_spvc_basetype.SPVC_BASETYPE_VOID;
pub const SPVC_BASETYPE_BOOLEAN = enum_spvc_basetype.SPVC_BASETYPE_BOOLEAN;
pub const SPVC_BASETYPE_INT8 = enum_spvc_basetype.SPVC_BASETYPE_INT8;
pub const SPVC_BASETYPE_UINT8 = enum_spvc_basetype.SPVC_BASETYPE_UINT8;
pub const SPVC_BASETYPE_INT16 = enum_spvc_basetype.SPVC_BASETYPE_INT16;
pub const SPVC_BASETYPE_UINT16 = enum_spvc_basetype.SPVC_BASETYPE_UINT16;
pub const SPVC_BASETYPE_INT32 = enum_spvc_basetype.SPVC_BASETYPE_INT32;
pub const SPVC_BASETYPE_UINT32 = enum_spvc_basetype.SPVC_BASETYPE_UINT32;
pub const SPVC_BASETYPE_INT64 = enum_spvc_basetype.SPVC_BASETYPE_INT64;
pub const SPVC_BASETYPE_UINT64 = enum_spvc_basetype.SPVC_BASETYPE_UINT64;
pub const SPVC_BASETYPE_ATOMIC_COUNTER = enum_spvc_basetype.SPVC_BASETYPE_ATOMIC_COUNTER;
pub const SPVC_BASETYPE_FP16 = enum_spvc_basetype.SPVC_BASETYPE_FP16;
pub const SPVC_BASETYPE_FP32 = enum_spvc_basetype.SPVC_BASETYPE_FP32;
pub const SPVC_BASETYPE_FP64 = enum_spvc_basetype.SPVC_BASETYPE_FP64;
pub const SPVC_BASETYPE_STRUCT = enum_spvc_basetype.SPVC_BASETYPE_STRUCT;
pub const SPVC_BASETYPE_IMAGE = enum_spvc_basetype.SPVC_BASETYPE_IMAGE;
pub const SPVC_BASETYPE_SAMPLED_IMAGE = enum_spvc_basetype.SPVC_BASETYPE_SAMPLED_IMAGE;
pub const SPVC_BASETYPE_SAMPLER = enum_spvc_basetype.SPVC_BASETYPE_SAMPLER;
pub const SPVC_BASETYPE_ACCELERATION_STRUCTURE = enum_spvc_basetype.SPVC_BASETYPE_ACCELERATION_STRUCTURE;
pub const SPVC_BASETYPE_INT_MAX = enum_spvc_basetype.SPVC_BASETYPE_INT_MAX;
pub const enum_spvc_basetype = extern enum {
    SPVC_BASETYPE_UNKNOWN = 0,
    SPVC_BASETYPE_VOID = 1,
    SPVC_BASETYPE_BOOLEAN = 2,
    SPVC_BASETYPE_INT8 = 3,
    SPVC_BASETYPE_UINT8 = 4,
    SPVC_BASETYPE_INT16 = 5,
    SPVC_BASETYPE_UINT16 = 6,
    SPVC_BASETYPE_INT32 = 7,
    SPVC_BASETYPE_UINT32 = 8,
    SPVC_BASETYPE_INT64 = 9,
    SPVC_BASETYPE_UINT64 = 10,
    SPVC_BASETYPE_ATOMIC_COUNTER = 11,
    SPVC_BASETYPE_FP16 = 12,
    SPVC_BASETYPE_FP32 = 13,
    SPVC_BASETYPE_FP64 = 14,
    SPVC_BASETYPE_STRUCT = 15,
    SPVC_BASETYPE_IMAGE = 16,
    SPVC_BASETYPE_SAMPLED_IMAGE = 17,
    SPVC_BASETYPE_SAMPLER = 18,
    SPVC_BASETYPE_ACCELERATION_STRUCTURE = 19,
    SPVC_BASETYPE_INT_MAX = 2147483647,
};
pub const spvc_basetype = enum_spvc_basetype;
pub const SPVC_MSL_PLATFORM_IOS = enum_spvc_msl_platform.SPVC_MSL_PLATFORM_IOS;
pub const SPVC_MSL_PLATFORM_MACOS = enum_spvc_msl_platform.SPVC_MSL_PLATFORM_MACOS;
pub const SPVC_MSL_PLATFORM_MAX_INT = enum_spvc_msl_platform.SPVC_MSL_PLATFORM_MAX_INT;
pub const enum_spvc_msl_platform = extern enum {
    SPVC_MSL_PLATFORM_IOS = 0,
    SPVC_MSL_PLATFORM_MACOS = 1,
    SPVC_MSL_PLATFORM_MAX_INT = 2147483647,
};
pub const spvc_msl_platform = enum_spvc_msl_platform;
pub const SPVC_MSL_VERTEX_FORMAT_OTHER = enum_spvc_msl_vertex_format.SPVC_MSL_VERTEX_FORMAT_OTHER;
pub const SPVC_MSL_VERTEX_FORMAT_UINT8 = enum_spvc_msl_vertex_format.SPVC_MSL_VERTEX_FORMAT_UINT8;
pub const SPVC_MSL_VERTEX_FORMAT_UINT16 = enum_spvc_msl_vertex_format.SPVC_MSL_VERTEX_FORMAT_UINT16;
pub const enum_spvc_msl_vertex_format = extern enum {
    SPVC_MSL_VERTEX_FORMAT_OTHER = 0,
    SPVC_MSL_VERTEX_FORMAT_UINT8 = 1,
    SPVC_MSL_VERTEX_FORMAT_UINT16 = 2,
};
pub const spvc_msl_vertex_format = enum_spvc_msl_vertex_format;
pub const struct_spvc_msl_vertex_attribute = extern struct {
    location: c_uint,
    msl_buffer: c_uint,
    msl_offset: c_uint,
    msl_stride: c_uint,
    per_instance: spvc_bool,
    format: spvc_msl_vertex_format,
    builtin: SpvBuiltIn,
};
pub const spvc_msl_vertex_attribute = struct_spvc_msl_vertex_attribute;
pub extern fn spvc_msl_vertex_attribute_init(attr: [*c]spvc_msl_vertex_attribute) void;
pub const struct_spvc_msl_resource_binding = extern struct {
    stage: SpvExecutionModel,
    desc_set: c_uint,
    binding: c_uint,
    msl_buffer: c_uint,
    msl_texture: c_uint,
    msl_sampler: c_uint,
};
pub const spvc_msl_resource_binding = struct_spvc_msl_resource_binding;
pub extern fn spvc_msl_resource_binding_init(binding: [*c]spvc_msl_resource_binding) void;
pub extern fn spvc_msl_get_aux_buffer_struct_version() c_uint;
pub const SPVC_MSL_SAMPLER_COORD_NORMALIZED = enum_spvc_msl_sampler_coord.SPVC_MSL_SAMPLER_COORD_NORMALIZED;
pub const SPVC_MSL_SAMPLER_COORD_PIXEL = enum_spvc_msl_sampler_coord.SPVC_MSL_SAMPLER_COORD_PIXEL;
pub const SPVC_MSL_SAMPLER_INT_MAX = enum_spvc_msl_sampler_coord.SPVC_MSL_SAMPLER_INT_MAX;
pub const enum_spvc_msl_sampler_coord = extern enum {
    SPVC_MSL_SAMPLER_COORD_NORMALIZED = 0,
    SPVC_MSL_SAMPLER_COORD_PIXEL = 1,
    SPVC_MSL_SAMPLER_INT_MAX = 2147483647,
};
pub const spvc_msl_sampler_coord = enum_spvc_msl_sampler_coord;
pub const SPVC_MSL_SAMPLER_FILTER_NEAREST = enum_spvc_msl_sampler_filter.SPVC_MSL_SAMPLER_FILTER_NEAREST;
pub const SPVC_MSL_SAMPLER_FILTER_LINEAR = enum_spvc_msl_sampler_filter.SPVC_MSL_SAMPLER_FILTER_LINEAR;
pub const SPVC_MSL_SAMPLER_FILTER_INT_MAX = enum_spvc_msl_sampler_filter.SPVC_MSL_SAMPLER_FILTER_INT_MAX;
pub const enum_spvc_msl_sampler_filter = extern enum {
    SPVC_MSL_SAMPLER_FILTER_NEAREST = 0,
    SPVC_MSL_SAMPLER_FILTER_LINEAR = 1,
    SPVC_MSL_SAMPLER_FILTER_INT_MAX = 2147483647,
};
pub const spvc_msl_sampler_filter = enum_spvc_msl_sampler_filter;
pub const SPVC_MSL_SAMPLER_MIP_FILTER_NONE = enum_spvc_msl_sampler_mip_filter.SPVC_MSL_SAMPLER_MIP_FILTER_NONE;
pub const SPVC_MSL_SAMPLER_MIP_FILTER_NEAREST = enum_spvc_msl_sampler_mip_filter.SPVC_MSL_SAMPLER_MIP_FILTER_NEAREST;
pub const SPVC_MSL_SAMPLER_MIP_FILTER_LINEAR = enum_spvc_msl_sampler_mip_filter.SPVC_MSL_SAMPLER_MIP_FILTER_LINEAR;
pub const SPVC_MSL_SAMPLER_MIP_FILTER_INT_MAX = enum_spvc_msl_sampler_mip_filter.SPVC_MSL_SAMPLER_MIP_FILTER_INT_MAX;
pub const enum_spvc_msl_sampler_mip_filter = extern enum {
    SPVC_MSL_SAMPLER_MIP_FILTER_NONE = 0,
    SPVC_MSL_SAMPLER_MIP_FILTER_NEAREST = 1,
    SPVC_MSL_SAMPLER_MIP_FILTER_LINEAR = 2,
    SPVC_MSL_SAMPLER_MIP_FILTER_INT_MAX = 2147483647,
};
pub const spvc_msl_sampler_mip_filter = enum_spvc_msl_sampler_mip_filter;
pub const SPVC_MSL_SAMPLER_ADDRESS_CLAMP_TO_ZERO = enum_spvc_msl_sampler_address.SPVC_MSL_SAMPLER_ADDRESS_CLAMP_TO_ZERO;
pub const SPVC_MSL_SAMPLER_ADDRESS_CLAMP_TO_EDGE = enum_spvc_msl_sampler_address.SPVC_MSL_SAMPLER_ADDRESS_CLAMP_TO_EDGE;
pub const SPVC_MSL_SAMPLER_ADDRESS_CLAMP_TO_BORDER = enum_spvc_msl_sampler_address.SPVC_MSL_SAMPLER_ADDRESS_CLAMP_TO_BORDER;
pub const SPVC_MSL_SAMPLER_ADDRESS_REPEAT = enum_spvc_msl_sampler_address.SPVC_MSL_SAMPLER_ADDRESS_REPEAT;
pub const SPVC_MSL_SAMPLER_ADDRESS_MIRRORED_REPEAT = enum_spvc_msl_sampler_address.SPVC_MSL_SAMPLER_ADDRESS_MIRRORED_REPEAT;
pub const SPVC_MSL_SAMPLER_ADDRESS_INT_MAX = enum_spvc_msl_sampler_address.SPVC_MSL_SAMPLER_ADDRESS_INT_MAX;
pub const enum_spvc_msl_sampler_address = extern enum {
    SPVC_MSL_SAMPLER_ADDRESS_CLAMP_TO_ZERO = 0,
    SPVC_MSL_SAMPLER_ADDRESS_CLAMP_TO_EDGE = 1,
    SPVC_MSL_SAMPLER_ADDRESS_CLAMP_TO_BORDER = 2,
    SPVC_MSL_SAMPLER_ADDRESS_REPEAT = 3,
    SPVC_MSL_SAMPLER_ADDRESS_MIRRORED_REPEAT = 4,
    SPVC_MSL_SAMPLER_ADDRESS_INT_MAX = 2147483647,
};
pub const spvc_msl_sampler_address = enum_spvc_msl_sampler_address;
pub const SPVC_MSL_SAMPLER_COMPARE_FUNC_NEVER = enum_spvc_msl_sampler_compare_func.SPVC_MSL_SAMPLER_COMPARE_FUNC_NEVER;
pub const SPVC_MSL_SAMPLER_COMPARE_FUNC_LESS = enum_spvc_msl_sampler_compare_func.SPVC_MSL_SAMPLER_COMPARE_FUNC_LESS;
pub const SPVC_MSL_SAMPLER_COMPARE_FUNC_LESS_EQUAL = enum_spvc_msl_sampler_compare_func.SPVC_MSL_SAMPLER_COMPARE_FUNC_LESS_EQUAL;
pub const SPVC_MSL_SAMPLER_COMPARE_FUNC_GREATER = enum_spvc_msl_sampler_compare_func.SPVC_MSL_SAMPLER_COMPARE_FUNC_GREATER;
pub const SPVC_MSL_SAMPLER_COMPARE_FUNC_GREATER_EQUAL = enum_spvc_msl_sampler_compare_func.SPVC_MSL_SAMPLER_COMPARE_FUNC_GREATER_EQUAL;
pub const SPVC_MSL_SAMPLER_COMPARE_FUNC_EQUAL = enum_spvc_msl_sampler_compare_func.SPVC_MSL_SAMPLER_COMPARE_FUNC_EQUAL;
pub const SPVC_MSL_SAMPLER_COMPARE_FUNC_NOT_EQUAL = enum_spvc_msl_sampler_compare_func.SPVC_MSL_SAMPLER_COMPARE_FUNC_NOT_EQUAL;
pub const SPVC_MSL_SAMPLER_COMPARE_FUNC_ALWAYS = enum_spvc_msl_sampler_compare_func.SPVC_MSL_SAMPLER_COMPARE_FUNC_ALWAYS;
pub const SPVC_MSL_SAMPLER_COMPARE_FUNC_INT_MAX = enum_spvc_msl_sampler_compare_func.SPVC_MSL_SAMPLER_COMPARE_FUNC_INT_MAX;
pub const enum_spvc_msl_sampler_compare_func = extern enum {
    SPVC_MSL_SAMPLER_COMPARE_FUNC_NEVER = 0,
    SPVC_MSL_SAMPLER_COMPARE_FUNC_LESS = 1,
    SPVC_MSL_SAMPLER_COMPARE_FUNC_LESS_EQUAL = 2,
    SPVC_MSL_SAMPLER_COMPARE_FUNC_GREATER = 3,
    SPVC_MSL_SAMPLER_COMPARE_FUNC_GREATER_EQUAL = 4,
    SPVC_MSL_SAMPLER_COMPARE_FUNC_EQUAL = 5,
    SPVC_MSL_SAMPLER_COMPARE_FUNC_NOT_EQUAL = 6,
    SPVC_MSL_SAMPLER_COMPARE_FUNC_ALWAYS = 7,
    SPVC_MSL_SAMPLER_COMPARE_FUNC_INT_MAX = 2147483647,
};
pub const spvc_msl_sampler_compare_func = enum_spvc_msl_sampler_compare_func;
pub const SPVC_MSL_SAMPLER_BORDER_COLOR_TRANSPARENT_BLACK = enum_spvc_msl_sampler_border_color.SPVC_MSL_SAMPLER_BORDER_COLOR_TRANSPARENT_BLACK;
pub const SPVC_MSL_SAMPLER_BORDER_COLOR_OPAQUE_BLACK = enum_spvc_msl_sampler_border_color.SPVC_MSL_SAMPLER_BORDER_COLOR_OPAQUE_BLACK;
pub const SPVC_MSL_SAMPLER_BORDER_COLOR_OPAQUE_WHITE = enum_spvc_msl_sampler_border_color.SPVC_MSL_SAMPLER_BORDER_COLOR_OPAQUE_WHITE;
pub const SPVC_MSL_SAMPLER_BORDER_COLOR_INT_MAX = enum_spvc_msl_sampler_border_color.SPVC_MSL_SAMPLER_BORDER_COLOR_INT_MAX;
pub const enum_spvc_msl_sampler_border_color = extern enum {
    SPVC_MSL_SAMPLER_BORDER_COLOR_TRANSPARENT_BLACK = 0,
    SPVC_MSL_SAMPLER_BORDER_COLOR_OPAQUE_BLACK = 1,
    SPVC_MSL_SAMPLER_BORDER_COLOR_OPAQUE_WHITE = 2,
    SPVC_MSL_SAMPLER_BORDER_COLOR_INT_MAX = 2147483647,
};
pub const spvc_msl_sampler_border_color = enum_spvc_msl_sampler_border_color;
pub const SPVC_MSL_FORMAT_RESOLUTION_444 = enum_spvc_msl_format_resolution.SPVC_MSL_FORMAT_RESOLUTION_444;
pub const SPVC_MSL_FORMAT_RESOLUTION_422 = enum_spvc_msl_format_resolution.SPVC_MSL_FORMAT_RESOLUTION_422;
pub const SPVC_MSL_FORMAT_RESOLUTION_420 = enum_spvc_msl_format_resolution.SPVC_MSL_FORMAT_RESOLUTION_420;
pub const SPVC_MSL_FORMAT_RESOLUTION_INT_MAX = enum_spvc_msl_format_resolution.SPVC_MSL_FORMAT_RESOLUTION_INT_MAX;
pub const enum_spvc_msl_format_resolution = extern enum {
    SPVC_MSL_FORMAT_RESOLUTION_444 = 0,
    SPVC_MSL_FORMAT_RESOLUTION_422 = 1,
    SPVC_MSL_FORMAT_RESOLUTION_420 = 2,
    SPVC_MSL_FORMAT_RESOLUTION_INT_MAX = 2147483647,
};
pub const spvc_msl_format_resolution = enum_spvc_msl_format_resolution;
pub const SPVC_MSL_CHROMA_LOCATION_COSITED_EVEN = enum_spvc_msl_chroma_location.SPVC_MSL_CHROMA_LOCATION_COSITED_EVEN;
pub const SPVC_MSL_CHROMA_LOCATION_MIDPOINT = enum_spvc_msl_chroma_location.SPVC_MSL_CHROMA_LOCATION_MIDPOINT;
pub const SPVC_MSL_CHROMA_LOCATION_INT_MAX = enum_spvc_msl_chroma_location.SPVC_MSL_CHROMA_LOCATION_INT_MAX;
pub const enum_spvc_msl_chroma_location = extern enum {
    SPVC_MSL_CHROMA_LOCATION_COSITED_EVEN = 0,
    SPVC_MSL_CHROMA_LOCATION_MIDPOINT = 1,
    SPVC_MSL_CHROMA_LOCATION_INT_MAX = 2147483647,
};
pub const spvc_msl_chroma_location = enum_spvc_msl_chroma_location;
pub const SPVC_MSL_COMPONENT_SWIZZLE_IDENTITY = enum_spvc_msl_component_swizzle.SPVC_MSL_COMPONENT_SWIZZLE_IDENTITY;
pub const SPVC_MSL_COMPONENT_SWIZZLE_ZERO = enum_spvc_msl_component_swizzle.SPVC_MSL_COMPONENT_SWIZZLE_ZERO;
pub const SPVC_MSL_COMPONENT_SWIZZLE_ONE = enum_spvc_msl_component_swizzle.SPVC_MSL_COMPONENT_SWIZZLE_ONE;
pub const SPVC_MSL_COMPONENT_SWIZZLE_R = enum_spvc_msl_component_swizzle.SPVC_MSL_COMPONENT_SWIZZLE_R;
pub const SPVC_MSL_COMPONENT_SWIZZLE_G = enum_spvc_msl_component_swizzle.SPVC_MSL_COMPONENT_SWIZZLE_G;
pub const SPVC_MSL_COMPONENT_SWIZZLE_B = enum_spvc_msl_component_swizzle.SPVC_MSL_COMPONENT_SWIZZLE_B;
pub const SPVC_MSL_COMPONENT_SWIZZLE_A = enum_spvc_msl_component_swizzle.SPVC_MSL_COMPONENT_SWIZZLE_A;
pub const SPVC_MSL_COMPONENT_SWIZZLE_INT_MAX = enum_spvc_msl_component_swizzle.SPVC_MSL_COMPONENT_SWIZZLE_INT_MAX;
pub const enum_spvc_msl_component_swizzle = extern enum {
    SPVC_MSL_COMPONENT_SWIZZLE_IDENTITY = 0,
    SPVC_MSL_COMPONENT_SWIZZLE_ZERO = 1,
    SPVC_MSL_COMPONENT_SWIZZLE_ONE = 2,
    SPVC_MSL_COMPONENT_SWIZZLE_R = 3,
    SPVC_MSL_COMPONENT_SWIZZLE_G = 4,
    SPVC_MSL_COMPONENT_SWIZZLE_B = 5,
    SPVC_MSL_COMPONENT_SWIZZLE_A = 6,
    SPVC_MSL_COMPONENT_SWIZZLE_INT_MAX = 2147483647,
};
pub const spvc_msl_component_swizzle = enum_spvc_msl_component_swizzle;
pub const SPVC_MSL_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY = enum_spvc_msl_sampler_ycbcr_model_conversion.SPVC_MSL_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY;
pub const SPVC_MSL_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY = enum_spvc_msl_sampler_ycbcr_model_conversion.SPVC_MSL_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY;
pub const SPVC_MSL_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_BT_709 = enum_spvc_msl_sampler_ycbcr_model_conversion.SPVC_MSL_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_BT_709;
pub const SPVC_MSL_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_BT_601 = enum_spvc_msl_sampler_ycbcr_model_conversion.SPVC_MSL_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_BT_601;
pub const SPVC_MSL_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_BT_2020 = enum_spvc_msl_sampler_ycbcr_model_conversion.SPVC_MSL_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_BT_2020;
pub const SPVC_MSL_SAMPLER_YCBCR_MODEL_CONVERSION_INT_MAX = enum_spvc_msl_sampler_ycbcr_model_conversion.SPVC_MSL_SAMPLER_YCBCR_MODEL_CONVERSION_INT_MAX;
pub const enum_spvc_msl_sampler_ycbcr_model_conversion = extern enum {
    SPVC_MSL_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY = 0,
    SPVC_MSL_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY = 1,
    SPVC_MSL_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_BT_709 = 2,
    SPVC_MSL_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_BT_601 = 3,
    SPVC_MSL_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_BT_2020 = 4,
    SPVC_MSL_SAMPLER_YCBCR_MODEL_CONVERSION_INT_MAX = 2147483647,
};
pub const spvc_msl_sampler_ycbcr_model_conversion = enum_spvc_msl_sampler_ycbcr_model_conversion;
pub const SPVC_MSL_SAMPLER_YCBCR_RANGE_ITU_FULL = enum_spvc_msl_sampler_ycbcr_range.SPVC_MSL_SAMPLER_YCBCR_RANGE_ITU_FULL;
pub const SPVC_MSL_SAMPLER_YCBCR_RANGE_ITU_NARROW = enum_spvc_msl_sampler_ycbcr_range.SPVC_MSL_SAMPLER_YCBCR_RANGE_ITU_NARROW;
pub const SPVC_MSL_SAMPLER_YCBCR_RANGE_INT_MAX = enum_spvc_msl_sampler_ycbcr_range.SPVC_MSL_SAMPLER_YCBCR_RANGE_INT_MAX;
pub const enum_spvc_msl_sampler_ycbcr_range = extern enum {
    SPVC_MSL_SAMPLER_YCBCR_RANGE_ITU_FULL = 0,
    SPVC_MSL_SAMPLER_YCBCR_RANGE_ITU_NARROW = 1,
    SPVC_MSL_SAMPLER_YCBCR_RANGE_INT_MAX = 2147483647,
};
pub const spvc_msl_sampler_ycbcr_range = enum_spvc_msl_sampler_ycbcr_range;
pub const struct_spvc_msl_constexpr_sampler = extern struct {
    coord: spvc_msl_sampler_coord,
    min_filter: spvc_msl_sampler_filter,
    mag_filter: spvc_msl_sampler_filter,
    mip_filter: spvc_msl_sampler_mip_filter,
    s_address: spvc_msl_sampler_address,
    t_address: spvc_msl_sampler_address,
    r_address: spvc_msl_sampler_address,
    compare_func: spvc_msl_sampler_compare_func,
    border_color: spvc_msl_sampler_border_color,
    lod_clamp_min: f32,
    lod_clamp_max: f32,
    max_anisotropy: c_int,
    compare_enable: spvc_bool,
    lod_clamp_enable: spvc_bool,
    anisotropy_enable: spvc_bool,
};
pub const spvc_msl_constexpr_sampler = struct_spvc_msl_constexpr_sampler;
pub extern fn spvc_msl_constexpr_sampler_init(sampler: [*c]spvc_msl_constexpr_sampler) void;
pub const struct_spvc_msl_sampler_ycbcr_conversion = extern struct {
    planes: c_uint,
    resolution: spvc_msl_format_resolution,
    chroma_filter: spvc_msl_sampler_filter,
    x_chroma_offset: spvc_msl_chroma_location,
    y_chroma_offset: spvc_msl_chroma_location,
    swizzle: [4]spvc_msl_component_swizzle,
    ycbcr_model: spvc_msl_sampler_ycbcr_model_conversion,
    ycbcr_range: spvc_msl_sampler_ycbcr_range,
    bpc: c_uint,
};
pub const spvc_msl_sampler_ycbcr_conversion = struct_spvc_msl_sampler_ycbcr_conversion;
pub extern fn spvc_msl_sampler_ycbcr_conversion_init(conv: [*c]spvc_msl_sampler_ycbcr_conversion) void;
pub const SPVC_HLSL_BINDING_AUTO_PUSH_CONSTANT_BIT = enum_spvc_hlsl_binding_flag_bits.SPVC_HLSL_BINDING_AUTO_PUSH_CONSTANT_BIT;
pub const SPVC_HLSL_BINDING_AUTO_CBV_BIT = enum_spvc_hlsl_binding_flag_bits.SPVC_HLSL_BINDING_AUTO_CBV_BIT;
pub const SPVC_HLSL_BINDING_AUTO_SRV_BIT = enum_spvc_hlsl_binding_flag_bits.SPVC_HLSL_BINDING_AUTO_SRV_BIT;
pub const SPVC_HLSL_BINDING_AUTO_UAV_BIT = enum_spvc_hlsl_binding_flag_bits.SPVC_HLSL_BINDING_AUTO_UAV_BIT;
pub const SPVC_HLSL_BINDING_AUTO_SAMPLER_BIT = enum_spvc_hlsl_binding_flag_bits.SPVC_HLSL_BINDING_AUTO_SAMPLER_BIT;
pub const SPVC_HLSL_BINDING_AUTO_ALL = enum_spvc_hlsl_binding_flag_bits.SPVC_HLSL_BINDING_AUTO_ALL;
pub const enum_spvc_hlsl_binding_flag_bits = extern enum {
    SPVC_HLSL_BINDING_AUTO_PUSH_CONSTANT_BIT = 1,
    SPVC_HLSL_BINDING_AUTO_CBV_BIT = 2,
    SPVC_HLSL_BINDING_AUTO_SRV_BIT = 4,
    SPVC_HLSL_BINDING_AUTO_UAV_BIT = 8,
    SPVC_HLSL_BINDING_AUTO_SAMPLER_BIT = 16,
    SPVC_HLSL_BINDING_AUTO_ALL = 2147483647,
};
pub const spvc_hlsl_binding_flag_bits = enum_spvc_hlsl_binding_flag_bits;
pub const spvc_hlsl_binding_flags = c_uint;
pub const SPVC_COMPILER_OPTION_UNKNOWN = enum_spvc_compiler_option.SPVC_COMPILER_OPTION_UNKNOWN;
pub const SPVC_COMPILER_OPTION_FORCE_TEMPORARY = enum_spvc_compiler_option.SPVC_COMPILER_OPTION_FORCE_TEMPORARY;
pub const SPVC_COMPILER_OPTION_FLATTEN_MULTIDIMENSIONAL_ARRAYS = enum_spvc_compiler_option.SPVC_COMPILER_OPTION_FLATTEN_MULTIDIMENSIONAL_ARRAYS;
pub const SPVC_COMPILER_OPTION_FIXUP_DEPTH_CONVENTION = enum_spvc_compiler_option.SPVC_COMPILER_OPTION_FIXUP_DEPTH_CONVENTION;
pub const SPVC_COMPILER_OPTION_FLIP_VERTEX_Y = enum_spvc_compiler_option.SPVC_COMPILER_OPTION_FLIP_VERTEX_Y;
pub const SPVC_COMPILER_OPTION_GLSL_SUPPORT_NONZERO_BASE_INSTANCE = enum_spvc_compiler_option.SPVC_COMPILER_OPTION_GLSL_SUPPORT_NONZERO_BASE_INSTANCE;
pub const SPVC_COMPILER_OPTION_GLSL_SEPARATE_SHADER_OBJECTS = enum_spvc_compiler_option.SPVC_COMPILER_OPTION_GLSL_SEPARATE_SHADER_OBJECTS;
pub const SPVC_COMPILER_OPTION_GLSL_ENABLE_420PACK_EXTENSION = enum_spvc_compiler_option.SPVC_COMPILER_OPTION_GLSL_ENABLE_420PACK_EXTENSION;
pub const SPVC_COMPILER_OPTION_GLSL_VERSION = enum_spvc_compiler_option.SPVC_COMPILER_OPTION_GLSL_VERSION;
pub const SPVC_COMPILER_OPTION_GLSL_ES = enum_spvc_compiler_option.SPVC_COMPILER_OPTION_GLSL_ES;
pub const SPVC_COMPILER_OPTION_GLSL_VULKAN_SEMANTICS = enum_spvc_compiler_option.SPVC_COMPILER_OPTION_GLSL_VULKAN_SEMANTICS;
pub const SPVC_COMPILER_OPTION_GLSL_ES_DEFAULT_FLOAT_PRECISION_HIGHP = enum_spvc_compiler_option.SPVC_COMPILER_OPTION_GLSL_ES_DEFAULT_FLOAT_PRECISION_HIGHP;
pub const SPVC_COMPILER_OPTION_GLSL_ES_DEFAULT_INT_PRECISION_HIGHP = enum_spvc_compiler_option.SPVC_COMPILER_OPTION_GLSL_ES_DEFAULT_INT_PRECISION_HIGHP;
pub const SPVC_COMPILER_OPTION_HLSL_SHADER_MODEL = enum_spvc_compiler_option.SPVC_COMPILER_OPTION_HLSL_SHADER_MODEL;
pub const SPVC_COMPILER_OPTION_HLSL_POINT_SIZE_COMPAT = enum_spvc_compiler_option.SPVC_COMPILER_OPTION_HLSL_POINT_SIZE_COMPAT;
pub const SPVC_COMPILER_OPTION_HLSL_POINT_COORD_COMPAT = enum_spvc_compiler_option.SPVC_COMPILER_OPTION_HLSL_POINT_COORD_COMPAT;
pub const SPVC_COMPILER_OPTION_HLSL_SUPPORT_NONZERO_BASE_VERTEX_BASE_INSTANCE = enum_spvc_compiler_option.SPVC_COMPILER_OPTION_HLSL_SUPPORT_NONZERO_BASE_VERTEX_BASE_INSTANCE;
pub const SPVC_COMPILER_OPTION_MSL_VERSION = enum_spvc_compiler_option.SPVC_COMPILER_OPTION_MSL_VERSION;
pub const SPVC_COMPILER_OPTION_MSL_TEXEL_BUFFER_TEXTURE_WIDTH = enum_spvc_compiler_option.SPVC_COMPILER_OPTION_MSL_TEXEL_BUFFER_TEXTURE_WIDTH;
pub const SPVC_COMPILER_OPTION_MSL_AUX_BUFFER_INDEX = enum_spvc_compiler_option.SPVC_COMPILER_OPTION_MSL_AUX_BUFFER_INDEX;
pub const SPVC_COMPILER_OPTION_MSL_SWIZZLE_BUFFER_INDEX = enum_spvc_compiler_option.SPVC_COMPILER_OPTION_MSL_SWIZZLE_BUFFER_INDEX;
pub const SPVC_COMPILER_OPTION_MSL_INDIRECT_PARAMS_BUFFER_INDEX = enum_spvc_compiler_option.SPVC_COMPILER_OPTION_MSL_INDIRECT_PARAMS_BUFFER_INDEX;
pub const SPVC_COMPILER_OPTION_MSL_SHADER_OUTPUT_BUFFER_INDEX = enum_spvc_compiler_option.SPVC_COMPILER_OPTION_MSL_SHADER_OUTPUT_BUFFER_INDEX;
pub const SPVC_COMPILER_OPTION_MSL_SHADER_PATCH_OUTPUT_BUFFER_INDEX = enum_spvc_compiler_option.SPVC_COMPILER_OPTION_MSL_SHADER_PATCH_OUTPUT_BUFFER_INDEX;
pub const SPVC_COMPILER_OPTION_MSL_SHADER_TESS_FACTOR_OUTPUT_BUFFER_INDEX = enum_spvc_compiler_option.SPVC_COMPILER_OPTION_MSL_SHADER_TESS_FACTOR_OUTPUT_BUFFER_INDEX;
pub const SPVC_COMPILER_OPTION_MSL_SHADER_INPUT_WORKGROUP_INDEX = enum_spvc_compiler_option.SPVC_COMPILER_OPTION_MSL_SHADER_INPUT_WORKGROUP_INDEX;
pub const SPVC_COMPILER_OPTION_MSL_ENABLE_POINT_SIZE_BUILTIN = enum_spvc_compiler_option.SPVC_COMPILER_OPTION_MSL_ENABLE_POINT_SIZE_BUILTIN;
pub const SPVC_COMPILER_OPTION_MSL_DISABLE_RASTERIZATION = enum_spvc_compiler_option.SPVC_COMPILER_OPTION_MSL_DISABLE_RASTERIZATION;
pub const SPVC_COMPILER_OPTION_MSL_CAPTURE_OUTPUT_TO_BUFFER = enum_spvc_compiler_option.SPVC_COMPILER_OPTION_MSL_CAPTURE_OUTPUT_TO_BUFFER;
pub const SPVC_COMPILER_OPTION_MSL_SWIZZLE_TEXTURE_SAMPLES = enum_spvc_compiler_option.SPVC_COMPILER_OPTION_MSL_SWIZZLE_TEXTURE_SAMPLES;
pub const SPVC_COMPILER_OPTION_MSL_PAD_FRAGMENT_OUTPUT_COMPONENTS = enum_spvc_compiler_option.SPVC_COMPILER_OPTION_MSL_PAD_FRAGMENT_OUTPUT_COMPONENTS;
pub const SPVC_COMPILER_OPTION_MSL_TESS_DOMAIN_ORIGIN_LOWER_LEFT = enum_spvc_compiler_option.SPVC_COMPILER_OPTION_MSL_TESS_DOMAIN_ORIGIN_LOWER_LEFT;
pub const SPVC_COMPILER_OPTION_MSL_PLATFORM = enum_spvc_compiler_option.SPVC_COMPILER_OPTION_MSL_PLATFORM;
pub const SPVC_COMPILER_OPTION_MSL_ARGUMENT_BUFFERS = enum_spvc_compiler_option.SPVC_COMPILER_OPTION_MSL_ARGUMENT_BUFFERS;
pub const SPVC_COMPILER_OPTION_GLSL_EMIT_PUSH_CONSTANT_AS_UNIFORM_BUFFER = enum_spvc_compiler_option.SPVC_COMPILER_OPTION_GLSL_EMIT_PUSH_CONSTANT_AS_UNIFORM_BUFFER;
pub const SPVC_COMPILER_OPTION_MSL_TEXTURE_BUFFER_NATIVE = enum_spvc_compiler_option.SPVC_COMPILER_OPTION_MSL_TEXTURE_BUFFER_NATIVE;
pub const SPVC_COMPILER_OPTION_GLSL_EMIT_UNIFORM_BUFFER_AS_PLAIN_UNIFORMS = enum_spvc_compiler_option.SPVC_COMPILER_OPTION_GLSL_EMIT_UNIFORM_BUFFER_AS_PLAIN_UNIFORMS;
pub const SPVC_COMPILER_OPTION_MSL_BUFFER_SIZE_BUFFER_INDEX = enum_spvc_compiler_option.SPVC_COMPILER_OPTION_MSL_BUFFER_SIZE_BUFFER_INDEX;
pub const SPVC_COMPILER_OPTION_EMIT_LINE_DIRECTIVES = enum_spvc_compiler_option.SPVC_COMPILER_OPTION_EMIT_LINE_DIRECTIVES;
pub const SPVC_COMPILER_OPTION_MSL_MULTIVIEW = enum_spvc_compiler_option.SPVC_COMPILER_OPTION_MSL_MULTIVIEW;
pub const SPVC_COMPILER_OPTION_MSL_VIEW_MASK_BUFFER_INDEX = enum_spvc_compiler_option.SPVC_COMPILER_OPTION_MSL_VIEW_MASK_BUFFER_INDEX;
pub const SPVC_COMPILER_OPTION_MSL_DEVICE_INDEX = enum_spvc_compiler_option.SPVC_COMPILER_OPTION_MSL_DEVICE_INDEX;
pub const SPVC_COMPILER_OPTION_MSL_VIEW_INDEX_FROM_DEVICE_INDEX = enum_spvc_compiler_option.SPVC_COMPILER_OPTION_MSL_VIEW_INDEX_FROM_DEVICE_INDEX;
pub const SPVC_COMPILER_OPTION_MSL_DISPATCH_BASE = enum_spvc_compiler_option.SPVC_COMPILER_OPTION_MSL_DISPATCH_BASE;
pub const SPVC_COMPILER_OPTION_MSL_DYNAMIC_OFFSETS_BUFFER_INDEX = enum_spvc_compiler_option.SPVC_COMPILER_OPTION_MSL_DYNAMIC_OFFSETS_BUFFER_INDEX;
pub const SPVC_COMPILER_OPTION_MSL_TEXTURE_1D_AS_2D = enum_spvc_compiler_option.SPVC_COMPILER_OPTION_MSL_TEXTURE_1D_AS_2D;
pub const SPVC_COMPILER_OPTION_MSL_ENABLE_BASE_INDEX_ZERO = enum_spvc_compiler_option.SPVC_COMPILER_OPTION_MSL_ENABLE_BASE_INDEX_ZERO;
pub const SPVC_COMPILER_OPTION_MSL_IOS_FRAMEBUFFER_FETCH_SUBPASS = enum_spvc_compiler_option.SPVC_COMPILER_OPTION_MSL_IOS_FRAMEBUFFER_FETCH_SUBPASS;
pub const SPVC_COMPILER_OPTION_MSL_INVARIANT_FP_MATH = enum_spvc_compiler_option.SPVC_COMPILER_OPTION_MSL_INVARIANT_FP_MATH;
pub const SPVC_COMPILER_OPTION_MSL_EMULATE_CUBEMAP_ARRAY = enum_spvc_compiler_option.SPVC_COMPILER_OPTION_MSL_EMULATE_CUBEMAP_ARRAY;
pub const SPVC_COMPILER_OPTION_MSL_ENABLE_DECORATION_BINDING = enum_spvc_compiler_option.SPVC_COMPILER_OPTION_MSL_ENABLE_DECORATION_BINDING;
pub const SPVC_COMPILER_OPTION_INT_MAX = enum_spvc_compiler_option.SPVC_COMPILER_OPTION_INT_MAX;
pub const enum_spvc_compiler_option = extern enum {
    SPVC_COMPILER_OPTION_UNKNOWN = 0,
    SPVC_COMPILER_OPTION_FORCE_TEMPORARY = 16777217,
    SPVC_COMPILER_OPTION_FLATTEN_MULTIDIMENSIONAL_ARRAYS = 16777218,
    SPVC_COMPILER_OPTION_FIXUP_DEPTH_CONVENTION = 16777219,
    SPVC_COMPILER_OPTION_FLIP_VERTEX_Y = 16777220,
    SPVC_COMPILER_OPTION_GLSL_SUPPORT_NONZERO_BASE_INSTANCE = 33554437,
    SPVC_COMPILER_OPTION_GLSL_SEPARATE_SHADER_OBJECTS = 33554438,
    SPVC_COMPILER_OPTION_GLSL_ENABLE_420PACK_EXTENSION = 33554439,
    SPVC_COMPILER_OPTION_GLSL_VERSION = 33554440,
    SPVC_COMPILER_OPTION_GLSL_ES = 33554441,
    SPVC_COMPILER_OPTION_GLSL_VULKAN_SEMANTICS = 33554442,
    SPVC_COMPILER_OPTION_GLSL_ES_DEFAULT_FLOAT_PRECISION_HIGHP = 33554443,
    SPVC_COMPILER_OPTION_GLSL_ES_DEFAULT_INT_PRECISION_HIGHP = 33554444,
    SPVC_COMPILER_OPTION_HLSL_SHADER_MODEL = 67108877,
    SPVC_COMPILER_OPTION_HLSL_POINT_SIZE_COMPAT = 67108878,
    SPVC_COMPILER_OPTION_HLSL_POINT_COORD_COMPAT = 67108879,
    SPVC_COMPILER_OPTION_HLSL_SUPPORT_NONZERO_BASE_VERTEX_BASE_INSTANCE = 67108880,
    SPVC_COMPILER_OPTION_MSL_VERSION = 134217745,
    SPVC_COMPILER_OPTION_MSL_TEXEL_BUFFER_TEXTURE_WIDTH = 134217746,
    SPVC_COMPILER_OPTION_MSL_AUX_BUFFER_INDEX = 134217747,
    SPVC_COMPILER_OPTION_MSL_SWIZZLE_BUFFER_INDEX = 134217747,
    SPVC_COMPILER_OPTION_MSL_INDIRECT_PARAMS_BUFFER_INDEX = 134217748,
    SPVC_COMPILER_OPTION_MSL_SHADER_OUTPUT_BUFFER_INDEX = 134217749,
    SPVC_COMPILER_OPTION_MSL_SHADER_PATCH_OUTPUT_BUFFER_INDEX = 134217750,
    SPVC_COMPILER_OPTION_MSL_SHADER_TESS_FACTOR_OUTPUT_BUFFER_INDEX = 134217751,
    SPVC_COMPILER_OPTION_MSL_SHADER_INPUT_WORKGROUP_INDEX = 134217752,
    SPVC_COMPILER_OPTION_MSL_ENABLE_POINT_SIZE_BUILTIN = 134217753,
    SPVC_COMPILER_OPTION_MSL_DISABLE_RASTERIZATION = 134217754,
    SPVC_COMPILER_OPTION_MSL_CAPTURE_OUTPUT_TO_BUFFER = 134217755,
    SPVC_COMPILER_OPTION_MSL_SWIZZLE_TEXTURE_SAMPLES = 134217756,
    SPVC_COMPILER_OPTION_MSL_PAD_FRAGMENT_OUTPUT_COMPONENTS = 134217757,
    SPVC_COMPILER_OPTION_MSL_TESS_DOMAIN_ORIGIN_LOWER_LEFT = 134217758,
    SPVC_COMPILER_OPTION_MSL_PLATFORM = 134217759,
    SPVC_COMPILER_OPTION_MSL_ARGUMENT_BUFFERS = 134217760,
    SPVC_COMPILER_OPTION_GLSL_EMIT_PUSH_CONSTANT_AS_UNIFORM_BUFFER = 33554465,
    SPVC_COMPILER_OPTION_MSL_TEXTURE_BUFFER_NATIVE = 134217762,
    SPVC_COMPILER_OPTION_GLSL_EMIT_UNIFORM_BUFFER_AS_PLAIN_UNIFORMS = 33554467,
    SPVC_COMPILER_OPTION_MSL_BUFFER_SIZE_BUFFER_INDEX = 134217764,
    SPVC_COMPILER_OPTION_EMIT_LINE_DIRECTIVES = 16777253,
    SPVC_COMPILER_OPTION_MSL_MULTIVIEW = 134217766,
    SPVC_COMPILER_OPTION_MSL_VIEW_MASK_BUFFER_INDEX = 134217767,
    SPVC_COMPILER_OPTION_MSL_DEVICE_INDEX = 134217768,
    SPVC_COMPILER_OPTION_MSL_VIEW_INDEX_FROM_DEVICE_INDEX = 134217769,
    SPVC_COMPILER_OPTION_MSL_DISPATCH_BASE = 134217770,
    SPVC_COMPILER_OPTION_MSL_DYNAMIC_OFFSETS_BUFFER_INDEX = 134217771,
    SPVC_COMPILER_OPTION_MSL_TEXTURE_1D_AS_2D = 134217772,
    SPVC_COMPILER_OPTION_MSL_ENABLE_BASE_INDEX_ZERO = 134217773,
    SPVC_COMPILER_OPTION_MSL_IOS_FRAMEBUFFER_FETCH_SUBPASS = 134217774,
    SPVC_COMPILER_OPTION_MSL_INVARIANT_FP_MATH = 134217775,
    SPVC_COMPILER_OPTION_MSL_EMULATE_CUBEMAP_ARRAY = 134217776,
    SPVC_COMPILER_OPTION_MSL_ENABLE_DECORATION_BINDING = 134217777,
    SPVC_COMPILER_OPTION_INT_MAX = 2147483647,
};
pub const spvc_compiler_option = enum_spvc_compiler_option;
pub extern fn spvc_context_create(context: [*c]spvc_context) spvc_result;
pub extern fn spvc_context_destroy(context: spvc_context) void;
pub extern fn spvc_context_release_allocations(context: spvc_context) void;
pub extern fn spvc_context_get_last_error_string(context: spvc_context) [*c]const u8;
pub const spvc_error_callback = ?fn (?*c_void, [*c]const u8) callconv(.C) void;
pub extern fn spvc_context_set_error_callback(context: spvc_context, cb: spvc_error_callback, userdata: ?*c_void) void;
pub extern fn spvc_context_parse_spirv(context: spvc_context, spirv: [*c]const SpvId, word_count: usize, parsed_ir: [*c]spvc_parsed_ir) spvc_result;
pub extern fn spvc_context_create_compiler(context: spvc_context, backend: spvc_backend, parsed_ir: spvc_parsed_ir, mode: spvc_capture_mode, compiler: [*c]spvc_compiler) spvc_result;
pub extern fn spvc_compiler_get_current_id_bound(compiler: spvc_compiler) c_uint;
pub extern fn spvc_compiler_create_compiler_options(compiler: spvc_compiler, options: [*c]spvc_compiler_options) spvc_result;
pub extern fn spvc_compiler_options_set_bool(options: spvc_compiler_options, option: spvc_compiler_option, value: spvc_bool) spvc_result;
pub extern fn spvc_compiler_options_set_uint(options: spvc_compiler_options, option: spvc_compiler_option, value: c_uint) spvc_result;
pub extern fn spvc_compiler_install_compiler_options(compiler: spvc_compiler, options: spvc_compiler_options) spvc_result;
pub extern fn spvc_compiler_compile(compiler: spvc_compiler, source: [*c]([*c]const u8)) spvc_result;
pub extern fn spvc_compiler_add_header_line(compiler: spvc_compiler, line: [*c]const u8) spvc_result;
pub extern fn spvc_compiler_require_extension(compiler: spvc_compiler, ext: [*c]const u8) spvc_result;
pub extern fn spvc_compiler_flatten_buffer_block(compiler: spvc_compiler, id: spvc_variable_id) spvc_result;
pub extern fn spvc_compiler_hlsl_set_root_constants_layout(compiler: spvc_compiler, constant_info: [*c]const spvc_hlsl_root_constants, count: usize) spvc_result;
pub extern fn spvc_compiler_hlsl_add_vertex_attribute_remap(compiler: spvc_compiler, remap: [*c]const spvc_hlsl_vertex_attribute_remap, remaps: usize) spvc_result;
pub extern fn spvc_compiler_hlsl_remap_num_workgroups_builtin(compiler: spvc_compiler) spvc_variable_id;
pub extern fn spvc_compiler_hlsl_set_resource_binding_flags(compiler: spvc_compiler, flags: spvc_hlsl_binding_flags) spvc_result;
pub extern fn spvc_compiler_msl_is_rasterization_disabled(compiler: spvc_compiler) spvc_bool;
pub extern fn spvc_compiler_msl_needs_aux_buffer(compiler: spvc_compiler) spvc_bool;
pub extern fn spvc_compiler_msl_needs_swizzle_buffer(compiler: spvc_compiler) spvc_bool;
pub extern fn spvc_compiler_msl_needs_buffer_size_buffer(compiler: spvc_compiler) spvc_bool;
pub extern fn spvc_compiler_msl_needs_output_buffer(compiler: spvc_compiler) spvc_bool;
pub extern fn spvc_compiler_msl_needs_patch_output_buffer(compiler: spvc_compiler) spvc_bool;
pub extern fn spvc_compiler_msl_needs_input_threadgroup_mem(compiler: spvc_compiler) spvc_bool;
pub extern fn spvc_compiler_msl_add_vertex_attribute(compiler: spvc_compiler, attrs: [*c]const spvc_msl_vertex_attribute) spvc_result;
pub extern fn spvc_compiler_msl_add_resource_binding(compiler: spvc_compiler, binding: [*c]const spvc_msl_resource_binding) spvc_result;
pub extern fn spvc_compiler_msl_add_discrete_descriptor_set(compiler: spvc_compiler, desc_set: c_uint) spvc_result;
pub extern fn spvc_compiler_msl_set_argument_buffer_device_address_space(compiler: spvc_compiler, desc_set: c_uint, device_address: spvc_bool) spvc_result;
pub extern fn spvc_compiler_msl_is_vertex_attribute_used(compiler: spvc_compiler, location: c_uint) spvc_bool;
pub extern fn spvc_compiler_msl_is_resource_used(compiler: spvc_compiler, model: SpvExecutionModel, set: c_uint, binding: c_uint) spvc_bool;
pub extern fn spvc_compiler_msl_remap_constexpr_sampler(compiler: spvc_compiler, id: spvc_variable_id, sampler: [*c]const spvc_msl_constexpr_sampler) spvc_result;
pub extern fn spvc_compiler_msl_remap_constexpr_sampler_by_binding(compiler: spvc_compiler, desc_set: c_uint, binding: c_uint, sampler: [*c]const spvc_msl_constexpr_sampler) spvc_result;
pub extern fn spvc_compiler_msl_remap_constexpr_sampler_ycbcr(compiler: spvc_compiler, id: spvc_variable_id, sampler: [*c]const spvc_msl_constexpr_sampler, conv: [*c]const spvc_msl_sampler_ycbcr_conversion) spvc_result;
pub extern fn spvc_compiler_msl_remap_constexpr_sampler_by_binding_ycbcr(compiler: spvc_compiler, desc_set: c_uint, binding: c_uint, sampler: [*c]const spvc_msl_constexpr_sampler, conv: [*c]const spvc_msl_sampler_ycbcr_conversion) spvc_result;
pub extern fn spvc_compiler_msl_set_fragment_output_components(compiler: spvc_compiler, location: c_uint, components: c_uint) spvc_result;
pub extern fn spvc_compiler_msl_get_automatic_resource_binding(compiler: spvc_compiler, id: spvc_variable_id) c_uint;
pub extern fn spvc_compiler_msl_get_automatic_resource_binding_secondary(compiler: spvc_compiler, id: spvc_variable_id) c_uint;
pub extern fn spvc_compiler_msl_add_dynamic_buffer(compiler: spvc_compiler, desc_set: c_uint, binding: c_uint, index: c_uint) spvc_result;
pub extern fn spvc_compiler_get_active_interface_variables(compiler: spvc_compiler, set: [*c]spvc_set) spvc_result;
pub extern fn spvc_compiler_set_enabled_interface_variables(compiler: spvc_compiler, set: spvc_set) spvc_result;
pub extern fn spvc_compiler_create_shader_resources(compiler: spvc_compiler, resources: [*c]spvc_resources) spvc_result;
pub extern fn spvc_compiler_create_shader_resources_for_active_variables(compiler: spvc_compiler, resources: [*c]spvc_resources, active: spvc_set) spvc_result;
pub extern fn spvc_resources_get_resource_list_for_type(resources: spvc_resources, type_0: spvc_resource_type, resource_list: [*c]([*c]const spvc_reflected_resource), resource_size: [*c]usize) spvc_result;
pub extern fn spvc_compiler_set_decoration(compiler: spvc_compiler, id: SpvId, decoration: SpvDecoration, argument: c_uint) void;
pub extern fn spvc_compiler_set_decoration_string(compiler: spvc_compiler, id: SpvId, decoration: SpvDecoration, argument: [*c]const u8) void;
pub extern fn spvc_compiler_set_name(compiler: spvc_compiler, id: SpvId, argument: [*c]const u8) void;
pub extern fn spvc_compiler_set_member_decoration(compiler: spvc_compiler, id: spvc_type_id, member_index: c_uint, decoration: SpvDecoration, argument: c_uint) void;
pub extern fn spvc_compiler_set_member_decoration_string(compiler: spvc_compiler, id: spvc_type_id, member_index: c_uint, decoration: SpvDecoration, argument: [*c]const u8) void;
pub extern fn spvc_compiler_set_member_name(compiler: spvc_compiler, id: spvc_type_id, member_index: c_uint, argument: [*c]const u8) void;
pub extern fn spvc_compiler_unset_decoration(compiler: spvc_compiler, id: SpvId, decoration: SpvDecoration) void;
pub extern fn spvc_compiler_unset_member_decoration(compiler: spvc_compiler, id: spvc_type_id, member_index: c_uint, decoration: SpvDecoration) void;
pub extern fn spvc_compiler_has_decoration(compiler: spvc_compiler, id: SpvId, decoration: SpvDecoration) spvc_bool;
pub extern fn spvc_compiler_has_member_decoration(compiler: spvc_compiler, id: spvc_type_id, member_index: c_uint, decoration: SpvDecoration) spvc_bool;
pub extern fn spvc_compiler_get_name(compiler: spvc_compiler, id: SpvId) [*c]const u8;
pub extern fn spvc_compiler_get_decoration(compiler: spvc_compiler, id: SpvId, decoration: SpvDecoration) c_uint;
pub extern fn spvc_compiler_get_decoration_string(compiler: spvc_compiler, id: SpvId, decoration: SpvDecoration) [*c]const u8;
pub extern fn spvc_compiler_get_member_decoration(compiler: spvc_compiler, id: spvc_type_id, member_index: c_uint, decoration: SpvDecoration) c_uint;
pub extern fn spvc_compiler_get_member_decoration_string(compiler: spvc_compiler, id: spvc_type_id, member_index: c_uint, decoration: SpvDecoration) [*c]const u8;
pub extern fn spvc_compiler_get_member_name(compiler: spvc_compiler, id: spvc_type_id, member_index: c_uint) [*c]const u8;
pub extern fn spvc_compiler_get_entry_points(compiler: spvc_compiler, entry_points: [*c]([*c]const spvc_entry_point), num_entry_points: [*c]usize) spvc_result;
pub extern fn spvc_compiler_set_entry_point(compiler: spvc_compiler, name: [*c]const u8, model: SpvExecutionModel) spvc_result;
pub extern fn spvc_compiler_rename_entry_point(compiler: spvc_compiler, old_name: [*c]const u8, new_name: [*c]const u8, model: SpvExecutionModel) spvc_result;
pub extern fn spvc_compiler_get_cleansed_entry_point_name(compiler: spvc_compiler, name: [*c]const u8, model: SpvExecutionModel) [*c]const u8;
pub extern fn spvc_compiler_set_execution_mode(compiler: spvc_compiler, mode: SpvExecutionMode) void;
pub extern fn spvc_compiler_unset_execution_mode(compiler: spvc_compiler, mode: SpvExecutionMode) void;
pub extern fn spvc_compiler_set_execution_mode_with_arguments(compiler: spvc_compiler, mode: SpvExecutionMode, arg0: c_uint, arg1: c_uint, arg2: c_uint) void;
pub extern fn spvc_compiler_get_execution_modes(compiler: spvc_compiler, modes: [*c]([*c]const SpvExecutionMode), num_modes: [*c]usize) spvc_result;
pub extern fn spvc_compiler_get_execution_mode_argument(compiler: spvc_compiler, mode: SpvExecutionMode) c_uint;
pub extern fn spvc_compiler_get_execution_mode_argument_by_index(compiler: spvc_compiler, mode: SpvExecutionMode, index: c_uint) c_uint;
pub extern fn spvc_compiler_get_execution_model(compiler: spvc_compiler) SpvExecutionModel;
pub extern fn spvc_compiler_get_type_handle(compiler: spvc_compiler, id: spvc_type_id) spvc_type;
pub extern fn spvc_type_get_base_type_id(type_0: spvc_type) spvc_type_id;
pub extern fn spvc_type_get_basetype(type_0: spvc_type) spvc_basetype;
pub extern fn spvc_type_get_bit_width(type_0: spvc_type) c_uint;
pub extern fn spvc_type_get_vector_size(type_0: spvc_type) c_uint;
pub extern fn spvc_type_get_columns(type_0: spvc_type) c_uint;
pub extern fn spvc_type_get_num_array_dimensions(type_0: spvc_type) c_uint;
pub extern fn spvc_type_array_dimension_is_literal(type_0: spvc_type, dimension: c_uint) spvc_bool;
pub extern fn spvc_type_get_array_dimension(type_0: spvc_type, dimension: c_uint) SpvId;
pub extern fn spvc_type_get_num_member_types(type_0: spvc_type) c_uint;
pub extern fn spvc_type_get_member_type(type_0: spvc_type, index: c_uint) spvc_type_id;
pub extern fn spvc_type_get_storage_class(type_0: spvc_type) SpvStorageClass;
pub extern fn spvc_type_get_image_sampled_type(type_0: spvc_type) spvc_type_id;
pub extern fn spvc_type_get_image_dimension(type_0: spvc_type) SpvDim;
pub extern fn spvc_type_get_image_is_depth(type_0: spvc_type) spvc_bool;
pub extern fn spvc_type_get_image_arrayed(type_0: spvc_type) spvc_bool;
pub extern fn spvc_type_get_image_multisampled(type_0: spvc_type) spvc_bool;
pub extern fn spvc_type_get_image_is_storage(type_0: spvc_type) spvc_bool;
pub extern fn spvc_type_get_image_storage_format(type_0: spvc_type) SpvImageFormat;
pub extern fn spvc_type_get_image_access_qualifier(type_0: spvc_type) SpvAccessQualifier;
pub extern fn spvc_compiler_get_declared_struct_size(compiler: spvc_compiler, struct_type: spvc_type, size: [*c]usize) spvc_result;
pub extern fn spvc_compiler_get_declared_struct_size_runtime_array(compiler: spvc_compiler, struct_type: spvc_type, array_size: usize, size: [*c]usize) spvc_result;
pub extern fn spvc_compiler_get_declared_struct_member_size(compiler: spvc_compiler, type_0: spvc_type, index: c_uint, size: [*c]usize) spvc_result;
pub extern fn spvc_compiler_type_struct_member_offset(compiler: spvc_compiler, type_0: spvc_type, index: c_uint, offset: [*c]c_uint) spvc_result;
pub extern fn spvc_compiler_type_struct_member_array_stride(compiler: spvc_compiler, type_0: spvc_type, index: c_uint, stride: [*c]c_uint) spvc_result;
pub extern fn spvc_compiler_type_struct_member_matrix_stride(compiler: spvc_compiler, type_0: spvc_type, index: c_uint, stride: [*c]c_uint) spvc_result;
pub extern fn spvc_compiler_build_dummy_sampler_for_combined_images(compiler: spvc_compiler, id: [*c]spvc_variable_id) spvc_result;
pub extern fn spvc_compiler_build_combined_image_samplers(compiler: spvc_compiler) spvc_result;
pub extern fn spvc_compiler_get_combined_image_samplers(compiler: spvc_compiler, samplers: [*c]([*c]const spvc_combined_image_sampler), num_samplers: [*c]usize) spvc_result;
pub extern fn spvc_compiler_get_specialization_constants(compiler: spvc_compiler, constants: [*c]([*c]const spvc_specialization_constant), num_constants: [*c]usize) spvc_result;
pub extern fn spvc_compiler_get_constant_handle(compiler: spvc_compiler, id: spvc_constant_id) spvc_constant;
pub extern fn spvc_compiler_get_work_group_size_specialization_constants(compiler: spvc_compiler, x: [*c]spvc_specialization_constant, y: [*c]spvc_specialization_constant, z: [*c]spvc_specialization_constant) spvc_constant_id;
pub extern fn spvc_compiler_get_active_buffer_ranges(compiler: spvc_compiler, id: spvc_variable_id, ranges: [*c]([*c]const spvc_buffer_range), num_ranges: [*c]usize) spvc_result;
pub extern fn spvc_constant_get_scalar_fp16(constant: spvc_constant, column: c_uint, row: c_uint) f32;
pub extern fn spvc_constant_get_scalar_fp32(constant: spvc_constant, column: c_uint, row: c_uint) f32;
pub extern fn spvc_constant_get_scalar_fp64(constant: spvc_constant, column: c_uint, row: c_uint) f64;
pub extern fn spvc_constant_get_scalar_u32(constant: spvc_constant, column: c_uint, row: c_uint) c_uint;
pub extern fn spvc_constant_get_scalar_i32(constant: spvc_constant, column: c_uint, row: c_uint) c_int;
pub extern fn spvc_constant_get_scalar_u16(constant: spvc_constant, column: c_uint, row: c_uint) c_uint;
pub extern fn spvc_constant_get_scalar_i16(constant: spvc_constant, column: c_uint, row: c_uint) c_int;
pub extern fn spvc_constant_get_scalar_u8(constant: spvc_constant, column: c_uint, row: c_uint) c_uint;
pub extern fn spvc_constant_get_scalar_i8(constant: spvc_constant, column: c_uint, row: c_uint) c_int;
pub extern fn spvc_constant_get_subconstants(constant: spvc_constant, constituents: [*c]([*c]const spvc_constant_id), count: [*c]usize) void;
pub extern fn spvc_constant_get_type(constant: spvc_constant) spvc_type_id;
pub extern fn spvc_compiler_get_binary_offset_for_decoration(compiler: spvc_compiler, id: spvc_variable_id, decoration: SpvDecoration, word_offset: [*c]c_uint) spvc_bool;
pub extern fn spvc_compiler_buffer_is_hlsl_counter_buffer(compiler: spvc_compiler, id: spvc_variable_id) spvc_bool;
pub extern fn spvc_compiler_buffer_get_hlsl_counter_buffer(compiler: spvc_compiler, id: spvc_variable_id, counter_id: [*c]spvc_variable_id) spvc_bool;
pub extern fn spvc_compiler_get_declared_capabilities(compiler: spvc_compiler, capabilities: [*c]([*c]const SpvCapability), num_capabilities: [*c]usize) spvc_result;
pub extern fn spvc_compiler_get_declared_extensions(compiler: spvc_compiler, extensions: [*c]([*c]([*c]const u8)), num_extensions: [*c]usize) spvc_result;
pub extern fn spvc_compiler_get_remapped_declared_block_name(compiler: spvc_compiler, id: spvc_variable_id) [*c]const u8;
pub extern fn spvc_compiler_get_buffer_block_decorations(compiler: spvc_compiler, id: spvc_variable_id, decorations: [*c]([*c]const SpvDecoration), num_decorations: [*c]usize) spvc_result;
pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL = 1;
pub const __BIGGEST_ALIGNMENT__ = 16;
pub const __SIZEOF_FLOAT__ = 4;
pub const __INT64_FMTd__ = "ld";
pub const __STDC_VERSION__ = @as(c_long, 201112);
pub const __INT_LEAST32_FMTi__ = "i";
pub const __INT_LEAST8_FMTi__ = "hhi";
pub const __LDBL_EPSILON__ = 0.000000;
pub const __LZCNT__ = 1;
pub const __INT_LEAST32_FMTd__ = "d";
pub const __STDC_UTF_32__ = 1;
pub const __INVPCID__ = 1;
pub const __SIG_ATOMIC_WIDTH__ = 32;
pub const __UINT_FAST64_FMTX__ = "lX";
pub const __GCC_ATOMIC_LLONG_LOCK_FREE = 2;
pub const __SEG_FS = 1;
pub const __clang_version__ = "9.0.0 (tags/RELEASE_900/final)";
pub const __UINT_LEAST8_FMTo__ = "hho";
pub const __GCC_ASM_FLAG_OUTPUTS__ = 1;
pub const __SIZEOF_DOUBLE__ = 8;
pub const __INTMAX_FMTd__ = "ld";
pub const __CLANG_ATOMIC_CHAR_LOCK_FREE = 2;
pub const __INT_LEAST16_FMTi__ = "hi";
pub const __GCC_ATOMIC_SHORT_LOCK_FREE = 2;
pub const __FMA__ = 1;
pub const __MMX__ = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_16 = 1;
pub const __SIZE_FMTX__ = "lX";
pub const __RDSEED__ = 1;
pub const __WCHAR_WIDTH__ = 32;
pub const __FSGSBASE__ = 1;
pub const __PTRDIFF_FMTd__ = "ld";
pub const __DBL_MIN_EXP__ = -1021;
pub const __FLT_EVAL_METHOD__ = 0;
pub const __SSE_MATH__ = 1;
pub const SPVC_COMPILER_OPTION_COMMON_BIT = 16777216;
pub const __UINT_FAST8_FMTo__ = "hho";
pub const __UINT_LEAST64_MAX__ = @as(c_ulong, 18446744073709551615);
pub const __UINT_LEAST64_FMTx__ = "lx";
pub const __INT8_MAX__ = 127;
pub const __DBL_HAS_DENORM__ = 1;
pub const __FLOAT128__ = 1;
pub const __ATOMIC_RELAXED = 0;
pub const __DBL_DECIMAL_DIG__ = 17;
pub const __XSAVEC__ = 1;
pub const __SIZEOF_SHORT__ = 2;
pub const __UINT_FAST16_MAX__ = 65535;
pub const __UINT16_FMTX__ = "hX";
pub const __CLANG_ATOMIC_SHORT_LOCK_FREE = 2;
pub const __SSSE3__ = 1;
pub const __CONSTANT_CFSTRINGS__ = 1;
pub const __AVX2__ = 1;
pub const __LDBL_MAX_EXP__ = 16384;
pub const __WINT_MAX__ = @as(c_uint, 4294967295);
pub const __NO_MATH_INLINES = 1;
pub const SPVC_COMPILER_OPTION_GLSL_BIT = 33554432;
pub const __WCHAR_TYPE__ = int;
pub const __LONG_MAX__ = @as(c_long, 9223372036854775807);
pub const __STDC_HOSTED__ = 1;
pub const __pic__ = 2;
pub const __PTRDIFF_WIDTH__ = 64;
pub const __INT_FAST16_FMTi__ = "hi";
pub const __INT_LEAST32_TYPE__ = int;
pub const __SCHAR_MAX__ = 127;
pub const __LDBL_DENORM_MIN__ = 0.000000;
pub const SPVC_C_API_VERSION_MINOR = 21;
pub const __PRFCHW__ = 1;
pub const __INT64_C_SUFFIX__ = L;
pub const __ELF__ = 1;
pub const __LDBL_MANT_DIG__ = 64;
pub const SPVC_COMPILER_OPTION_MSL_BIT = 134217728;
pub const __CLANG_ATOMIC_INT_LOCK_FREE = 2;
pub const __SIZEOF_PTRDIFF_T__ = 8;
pub const __SIG_ATOMIC_MAX__ = 2147483647;
pub const __UINT64_FMTX__ = "lX";
pub const SPVC_MSL_ARGUMENT_BUFFER_BINDING = ~@as(c_uint, 3);
pub const __UINT64_MAX__ = @as(c_ulong, 18446744073709551615);
pub const __DBL_MANT_DIG__ = 53;
pub const __FLT_DECIMAL_DIG__ = 9;
pub const __INT_LEAST32_MAX__ = 2147483647;
pub const __DBL_DIG__ = 15;
pub const __ATOMIC_ACQUIRE = 2;
pub const __OPENCL_MEMORY_SCOPE_WORK_GROUP = 1;
pub const __UINT_FAST16_FMTu__ = "hu";
pub const __INTPTR_FMTi__ = "li";
pub const __UINT_FAST8_FMTX__ = "hhX";
pub const __LITTLE_ENDIAN__ = 1;
pub const __SSE__ = 1;
pub const SPVC_MSL_PUSH_CONSTANT_BINDING = 0;
pub const __FLT_HAS_QUIET_NAN__ = 1;
pub const __SIZEOF_SIZE_T__ = 8;
pub const __SEG_GS = 1;
pub const __UINT_LEAST16_FMTo__ = "ho";
pub const __UINT8_FMTo__ = "hho";
pub const __UINT_LEAST16_FMTx__ = "hx";
pub const __CLANG_ATOMIC_WCHAR_T_LOCK_FREE = 2;
pub const __UINT_FAST16_FMTX__ = "hX";
pub const __VERSION__ = "Clang 9.0.0 (tags/RELEASE_900/final)";
pub const __UINT_FAST32_FMTx__ = "x";
pub const __UINTPTR_MAX__ = @as(c_ulong, 18446744073709551615);
pub const __UINT_FAST8_FMTu__ = "hhu";
pub const __UINT_LEAST8_FMTu__ = "hhu";
pub const __UINT_LEAST64_FMTo__ = "lo";
pub const __UINT_LEAST8_MAX__ = 255;
pub const __RDRND__ = 1;
pub const __SIZEOF_WCHAR_T__ = 4;
pub const __MOVBE__ = 1;
pub const __LDBL_MAX__ = inf;
pub const __UINT16_MAX__ = 65535;
pub const _LP64 = 1;
pub const __x86_64 = 1;
pub const __code_model_small_ = 1;
pub const linux = 1;
pub const __SIZEOF_WINT_T__ = 4;
pub const __UINTMAX_FMTo__ = "lo";
pub const __FLT_DIG__ = 6;
pub const __UINT_LEAST8_FMTX__ = "hhX";
pub const __INT16_MAX__ = 32767;
pub const __WINT_UNSIGNED__ = 1;
pub const __FLT_MAX_10_EXP__ = 38;
pub const __UINTPTR_FMTX__ = "lX";
pub const __UINT_LEAST16_FMTu__ = "hu";
pub const __CLANG_ATOMIC_POINTER_LOCK_FREE = 2;
pub const __WINT_WIDTH__ = 32;
pub const __F16C__ = 1;
pub const __SHRT_MAX__ = 32767;
pub const __GCC_ATOMIC_BOOL_LOCK_FREE = 2;
pub const __POINTER_WIDTH__ = 64;
pub const SPVC_C_API_VERSION_MAJOR = 0;
pub const __PTRDIFF_MAX__ = @as(c_long, 9223372036854775807);
pub const __tune_corei7__ = 1;
pub const __INT32_FMTd__ = "d";
pub const __DBL_MIN__ = 0.000000;
pub const __SIZEOF_LONG__ = 8;
pub const __INTPTR_WIDTH__ = 64;
pub const __INT_FAST32_TYPE__ = int;
pub const SPVC_MSL_AUX_BUFFER_STRUCT_VERSION = 1;
pub const __NO_INLINE__ = 1;
pub const __UINT_FAST32_FMTX__ = "X";
pub const __gnu_linux__ = 1;
pub const __INT_FAST32_MAX__ = 2147483647;
pub const __corei7__ = 1;
pub const __UINTMAX_FMTu__ = "lu";
pub const __BMI__ = 1;
pub const __FLT_RADIX__ = 2;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 = 1;
pub const __GCC_ATOMIC_INT_LOCK_FREE = 2;
pub const __SGX__ = 1;
pub const __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES = 3;
pub const __PRAGMA_REDEFINE_EXTNAME = 1;
pub const __INT_FAST8_FMTd__ = "hhd";
pub const __INT32_TYPE__ = int;
pub const __UINTMAX_WIDTH__ = 64;
pub const __FLT_MIN__ = 0.000000;
pub const __INT64_FMTi__ = "li";
pub const __UINT_FAST64_FMTu__ = "lu";
pub const __INT8_FMTd__ = "hhd";
pub const __INT_FAST16_TYPE__ = short;
pub const __FLT_MAX_EXP__ = 128;
pub const __XSAVE__ = 1;
pub const __DBL_MAX_10_EXP__ = 308;
pub const __LDBL_MIN__ = 0.000000;
pub const __INT_FAST64_FMTi__ = "li";
pub const __INT_LEAST8_FMTd__ = "hhd";
pub const __CLANG_ATOMIC_LLONG_LOCK_FREE = 2;
pub const __UINT_LEAST32_FMTX__ = "X";
pub const __PIC__ = 2;
pub const __UINTMAX_MAX__ = @as(c_ulong, 18446744073709551615);
pub const SPVC_FALSE = if (@typeId(@TypeOf(0)) == @import("builtin").TypeId.Pointer) @ptrCast(spvc_bool, 0) else if (@typeId(@TypeOf(0)) == @import("builtin").TypeId.Int) @intToPtr(spvc_bool, 0) else @as(spvc_bool, 0);
pub const __UINT_FAST16_FMTo__ = "ho";
pub const __LDBL_DECIMAL_DIG__ = 21;
pub const __UINT_LEAST64_FMTX__ = "lX";
pub const __clang_minor__ = 0;
pub const __SIZEOF_FLOAT128__ = 16;
pub const __UINT_FAST64_FMTo__ = "lo";
pub const __SIZE_FMTx__ = "lx";
pub const __DBL_MAX__ = 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878;
pub const __DBL_EPSILON__ = 0.000000;
pub const __UINT64_FMTx__ = "lx";
pub const __CHAR_BIT__ = 8;
pub const __INT16_FMTi__ = "hi";
pub const _DEBUG = 1;
pub const SPVC_COMPILER_OPTION_HLSL_BIT = 67108864;
pub const __GNUC_MINOR__ = 2;
pub const __UINT_FAST32_MAX__ = @as(c_uint, 4294967295);
pub const __UINT8_FMTX__ = "hhX";
pub const __FLT_EPSILON__ = 0.000000;
pub const __UINTPTR_WIDTH__ = 64;
pub const __llvm__ = 1;
pub const __UINT_FAST64_MAX__ = @as(c_ulong, 18446744073709551615);
pub const __INT_FAST32_FMTi__ = "i";
pub const __FLT_HAS_INFINITY__ = 1;
pub const SPVC_COMPILER_OPTION_LANG_BITS = 251658240;
pub const __AES__ = 1;
pub const NULL = if (@typeId(@TypeOf(0)) == @import("builtin").TypeId.Pointer) @ptrCast([*c]void, 0) else if (@typeId(@TypeOf(0)) == @import("builtin").TypeId.Int) @intToPtr([*c]void, 0) else @as([*c]void, 0);
pub const __UINT8_FMTx__ = "hhx";
pub const __INTMAX_C_SUFFIX__ = L;
pub const __ORDER_LITTLE_ENDIAN__ = 1234;
pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE = 2;
pub const __INT16_FMTd__ = "hd";
pub const __UINT32_FMTX__ = "X";
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 = 1;
pub const __UINT32_C_SUFFIX__ = U;
pub const __INT32_MAX__ = 2147483647;
pub const __GCC_ATOMIC_CHAR_LOCK_FREE = 2;
pub const __INTMAX_WIDTH__ = 64;
pub const __CLANG_ATOMIC_BOOL_LOCK_FREE = 2;
pub const __SIZE_FMTo__ = "lo";
pub const __DBL_HAS_QUIET_NAN__ = 1;
pub const __INT_FAST8_FMTi__ = "hhi";
pub const __UINT_LEAST32_FMTo__ = "o";
pub const __STDC_UTF_16__ = 1;
pub const __UINT_LEAST32_MAX__ = @as(c_uint, 4294967295);
pub const __ATOMIC_RELEASE = 3;
pub const __UINT_FAST16_FMTx__ = "hx";
pub const __UINTMAX_C_SUFFIX__ = UL;
pub const __FLT_MIN_EXP__ = -125;
pub const __SIZEOF_LONG_DOUBLE__ = 16;
pub const __UINT_LEAST64_FMTu__ = "lu";
pub const __GCC_ATOMIC_LONG_LOCK_FREE = 2;
pub const __ORDER_PDP_ENDIAN__ = 3412;
pub const __INT_FAST64_FMTd__ = "ld";
pub const __CLANG_ATOMIC_LONG_LOCK_FREE = 2;
pub const __GXX_ABI_VERSION = 1002;
pub const __INT16_TYPE__ = short;
pub const __SSE2_MATH__ = 1;
pub const __FLT_MANT_DIG__ = 24;
pub const __UINT_FAST64_FMTx__ = "lx";
pub const SPVC_TRUE = if (@typeId(@TypeOf(1)) == @import("builtin").TypeId.Pointer) @ptrCast(spvc_bool, 1) else if (@typeId(@TypeOf(1)) == @import("builtin").TypeId.Int) @intToPtr(spvc_bool, 1) else @as(spvc_bool, 1);
pub const __STDC__ = 1;
pub const __INT_FAST8_MAX__ = 127;
pub const __INTPTR_FMTd__ = "ld";
pub const __GNUC_PATCHLEVEL__ = 1;
pub const __UINT_LEAST8_FMTx__ = "hhx";
pub const __SIZE_WIDTH__ = 64;
pub const __MPX__ = 1;
pub const __INT_LEAST64_FMTi__ = "li";
pub const __SSE4_2__ = 1;
pub const __AVX__ = 1;
pub const __INT_FAST16_MAX__ = 32767;
pub const __INTPTR_MAX__ = @as(c_long, 9223372036854775807);
pub const __CLANG_ATOMIC_CHAR16_T_LOCK_FREE = 2;
pub const __UINT64_FMTu__ = "lu";
pub const __BYTE_ORDER__ = __ORDER_LITTLE_ENDIAN__;
pub const __SSE2__ = 1;
pub const __INT_MAX__ = 2147483647;
pub const __INTMAX_FMTi__ = "li";
pub const __DBL_DENORM_MIN__ = 0.000000;
pub const SPVC_MSL_PUSH_CONSTANT_DESC_SET = ~@as(c_uint, 0);
pub const __clang_major__ = 9;
pub const __GNUC__ = 4;
pub const __UINT32_MAX__ = @as(c_uint, 4294967295);
pub const __FLT_DENORM_MIN__ = 0.000000;
pub const __DBL_MAX_EXP__ = 1024;
pub const __INT8_FMTi__ = "hhi";
pub const __UINT_LEAST16_MAX__ = 65535;
pub const __XSAVES__ = 1;
pub const __LDBL_HAS_DENORM__ = 1;
pub const SPVC_COMPILER_OPTION_ENUM_BITS = 16777215;
pub const __LDBL_HAS_QUIET_NAN__ = 1;
pub const __UINT_FAST8_MAX__ = 255;
pub const __DBL_MIN_10_EXP__ = -307;
pub const __UINT8_FMTu__ = "hhu";
pub const __INT_FAST64_MAX__ = @as(c_long, 9223372036854775807);
pub const SPVC_C_API_VERSION_PATCH = 0;
pub const __SSE3__ = 1;
pub const __UINT16_FMTu__ = "hu";
pub const __ATOMIC_SEQ_CST = 5;
pub const __SIZE_FMTu__ = "lu";
pub const __LDBL_MIN_EXP__ = -16381;
pub const __UINT_FAST32_FMTu__ = "u";
pub const __pie__ = 2;
pub const __clang_patchlevel__ = 0;
pub const __SIZEOF_LONG_LONG__ = 8;
pub const __BMI2__ = 1;
pub const __GNUC_STDC_INLINE__ = 1;
pub const __PCLMUL__ = 1;
pub const __FXSR__ = 1;
pub const __UINT8_MAX__ = 255;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 = 1;
pub const __UINT32_FMTx__ = "x";
pub const __UINT16_FMTo__ = "ho";
pub const __POPCNT__ = 1;
pub const __OPENCL_MEMORY_SCOPE_DEVICE = 2;
pub const __UINT32_FMTu__ = "u";
pub const __SIZEOF_POINTER__ = 8;
pub const __SIZE_MAX__ = @as(c_ulong, 18446744073709551615);
pub const __unix = 1;
pub const SPV_REVISION = 1;
pub const __INT_FAST16_FMTd__ = "hd";
pub const unix = 1;
pub const __UINT_LEAST32_FMTu__ = "u";
pub const __FLT_MAX__ = 340282346999999984391321947108527833088.000000;
pub const __corei7 = 1;
pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE = 2;
pub const __ATOMIC_CONSUME = 1;
pub const __unix__ = 1;
pub const __x86_64__ = 1;
pub const __LDBL_HAS_INFINITY__ = 1;
pub const __UINTMAX_FMTx__ = "lx";
pub const __UINT64_C_SUFFIX__ = UL;
pub const __FLT_MIN_10_EXP__ = -37;
pub const __INT_LEAST16_MAX__ = 32767;
pub const __UINT32_FMTo__ = "o";
pub const __UINTPTR_FMTo__ = "lo";
pub const __INT_LEAST16_FMTd__ = "hd";
pub const __UINTPTR_FMTx__ = "lx";
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8 = 1;
pub const __INT_LEAST64_FMTd__ = "ld";
pub const __INT_LEAST16_TYPE__ = short;
pub const __ORDER_BIG_ENDIAN__ = 4321;
pub const __LDBL_MIN_10_EXP__ = -4931;
pub const __INT_LEAST8_MAX__ = 127;
pub const SPVC_MSL_BUFFER_SIZE_BUFFER_BINDING = ~@as(c_uint, 2);
pub const __SIZEOF_INT__ = 4;
pub const __GCC_ATOMIC_POINTER_LOCK_FREE = 2;
pub const __amd64 = 1;
pub const __OBJC_BOOL_IS_BOOL = 0;
pub const __ADX__ = 1;
pub const __LDBL_MAX_10_EXP__ = 4932;
pub const __SIZEOF_INT128__ = 16;
pub const __UINT_FAST8_FMTx__ = "hhx";
pub const __PIE__ = 2;
pub const __linux = 1;
pub const __UINT16_FMTx__ = "hx";
pub const __UINTPTR_FMTu__ = "lu";
pub const __UINT_LEAST16_FMTX__ = "hX";
pub const __CLFLUSHOPT__ = 1;
pub const __amd64__ = 1;
pub const __UINT_FAST32_FMTo__ = "o";
pub const __linux__ = 1;
pub const __clang__ = 1;
pub const __LP64__ = 1;
pub const __PTRDIFF_FMTi__ = "li";
pub const __SSE4_1__ = 1;
pub const __LDBL_DIG__ = 18;
pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE = 2;
pub const __XSAVEOPT__ = 1;
pub const __UINT64_FMTo__ = "lo";
pub const __INT_FAST32_FMTd__ = "d";
pub const __ATOMIC_ACQ_REL = 4;
pub const __LONG_LONG_MAX__ = @as(c_longlong, 9223372036854775807);
pub const SPV_VERSION = 66816;
pub const __OPENCL_MEMORY_SCOPE_SUB_GROUP = 4;
pub const SPVC_MSL_SWIZZLE_BUFFER_BINDING = ~@as(c_uint, 1);
pub const __INTMAX_MAX__ = @as(c_long, 9223372036854775807);
pub const __UINT_LEAST32_FMTx__ = "x";
pub const __WCHAR_MAX__ = 2147483647;
pub const __INT64_MAX__ = @as(c_long, 9223372036854775807);
pub const __CLANG_ATOMIC_CHAR32_T_LOCK_FREE = 2;
pub const __INT_LEAST64_MAX__ = @as(c_long, 9223372036854775807);
pub const __UINTMAX_FMTX__ = "lX";
pub const __OPENCL_MEMORY_SCOPE_WORK_ITEM = 0;
pub const __FLT_HAS_DENORM__ = 1;
pub const __DECIMAL_DIG__ = __LDBL_DECIMAL_DIG__;
pub const __INT32_FMTi__ = "i";
pub const __DBL_HAS_INFINITY__ = 1;
pub const __FINITE_MATH_ONLY__ = 0;
pub const SpvSourceLanguage_ = enum_SpvSourceLanguage_;
pub const SpvExecutionModel_ = enum_SpvExecutionModel_;
pub const SpvAddressingModel_ = enum_SpvAddressingModel_;
pub const SpvMemoryModel_ = enum_SpvMemoryModel_;
pub const SpvExecutionMode_ = enum_SpvExecutionMode_;
pub const SpvStorageClass_ = enum_SpvStorageClass_;
pub const SpvDim_ = enum_SpvDim_;
pub const SpvSamplerAddressingMode_ = enum_SpvSamplerAddressingMode_;
pub const SpvSamplerFilterMode_ = enum_SpvSamplerFilterMode_;
pub const SpvImageFormat_ = enum_SpvImageFormat_;
pub const SpvImageChannelOrder_ = enum_SpvImageChannelOrder_;
pub const SpvImageChannelDataType_ = enum_SpvImageChannelDataType_;
pub const SpvImageOperandsShift_ = enum_SpvImageOperandsShift_;
pub const SpvImageOperandsMask_ = enum_SpvImageOperandsMask_;
pub const SpvFPFastMathModeShift_ = enum_SpvFPFastMathModeShift_;
pub const SpvFPFastMathModeMask_ = enum_SpvFPFastMathModeMask_;
pub const SpvFPRoundingMode_ = enum_SpvFPRoundingMode_;
pub const SpvLinkageType_ = enum_SpvLinkageType_;
pub const SpvAccessQualifier_ = enum_SpvAccessQualifier_;
pub const SpvFunctionParameterAttribute_ = enum_SpvFunctionParameterAttribute_;
pub const SpvDecoration_ = enum_SpvDecoration_;
pub const SpvBuiltIn_ = enum_SpvBuiltIn_;
pub const SpvSelectionControlShift_ = enum_SpvSelectionControlShift_;
pub const SpvSelectionControlMask_ = enum_SpvSelectionControlMask_;
pub const SpvLoopControlShift_ = enum_SpvLoopControlShift_;
pub const SpvLoopControlMask_ = enum_SpvLoopControlMask_;
pub const SpvFunctionControlShift_ = enum_SpvFunctionControlShift_;
pub const SpvFunctionControlMask_ = enum_SpvFunctionControlMask_;
pub const SpvMemorySemanticsShift_ = enum_SpvMemorySemanticsShift_;
pub const SpvMemorySemanticsMask_ = enum_SpvMemorySemanticsMask_;
pub const SpvMemoryAccessShift_ = enum_SpvMemoryAccessShift_;
pub const SpvMemoryAccessMask_ = enum_SpvMemoryAccessMask_;
pub const SpvScope_ = enum_SpvScope_;
pub const SpvGroupOperation_ = enum_SpvGroupOperation_;
pub const SpvKernelEnqueueFlags_ = enum_SpvKernelEnqueueFlags_;
pub const SpvKernelProfilingInfoShift_ = enum_SpvKernelProfilingInfoShift_;
pub const SpvKernelProfilingInfoMask_ = enum_SpvKernelProfilingInfoMask_;
pub const SpvCapability_ = enum_SpvCapability_;
pub const SpvOp_ = enum_SpvOp_;
pub const spvc_context_s = struct_spvc_context_s;
pub const spvc_parsed_ir_s = struct_spvc_parsed_ir_s;
pub const spvc_compiler_s = struct_spvc_compiler_s;
pub const spvc_compiler_options_s = struct_spvc_compiler_options_s;
pub const spvc_resources_s = struct_spvc_resources_s;
pub const spvc_type_s = struct_spvc_type_s;
pub const spvc_constant_s = struct_spvc_constant_s;
pub const spvc_set_s = struct_spvc_set_s;
